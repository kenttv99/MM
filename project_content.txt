Project Files Content
================
File: constants.py
# constants.py

"""
Модуль с константами проекта
"""

# Используется в database/init_db.py и database/drop_db.py
DATABASE_URL = "postgresql+asyncpg://postgres:assasin88@localhost:5432/moscow_mellows"

# Все три константы используются в api/auth.py
SECRET_KEY = "123456789"
ALGORITHM = "HS256"
ACCESS_TOKEN_EXPIRE_MINUTES = 30

RATE_LIMITS = {
    "register": "20/minute",      # 20 регистраций в минуту
    "login": "60/minute",         # 60 попыток входа в минуту
    "access_me": "60/minute",     # 60 запросов к /me в минуту
    "verify_token": "600/minute",  # 600 запросов проверки токена в минуту (10 в секунду)
    "verify_token_admin": "100/minute"
}
================
File: backend\api\admin_auth_routers.py
from fastapi import APIRouter, Depends, HTTPException, status, Request
from backend.schemas_enums.schemas import AdminCreate, AdminLogin, AdminResponse
from backend.config.auth import create_admin, get_admin_by_username, pwd_context, create_access_token, get_current_admin, log_admin_activity
from backend.database.user_db import AsyncSession, get_async_db
from backend.config.logging_config import logger
from fastapi.security import HTTPBearer, HTTPAuthorizationCredentials
from datetime import timedelta
from backend.config.rate_limiter import rate_limit
from constants import ACCESS_TOKEN_EXPIRE_MINUTES

router = APIRouter()

bearer_scheme = HTTPBearer()

@router.post("/register", response_model=AdminResponse, status_code=status.HTTP_201_CREATED)
@rate_limit("register_admin")  # Лимит определяется в constants.py
async def register_admin(admin: AdminCreate, db: AsyncSession = Depends(get_async_db), request: Request = None):
    """Регистрация нового администратора."""
    existing_admin = await get_admin_by_username(db, admin.email)
    if existing_admin:
        logger.warning(f"Attempt to register existing admin email: {admin.email}")
        raise HTTPException(
            status_code=status.HTTP_400_BAD_REQUEST,
            detail="Email already exists"
        )
    
    try:
        new_admin = await create_admin(db, admin.fio, admin.email, admin.password)
        await log_admin_activity(db, new_admin.id, request, action="register")
        logger.info(f"Admin registered successfully: {new_admin.email}")
        return new_admin
    except Exception as e:
        logger.error(f"Error registering admin: {str(e)}")
        await db.rollback()
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail="Failed to register admin"
        )

@router.post("/login")
@rate_limit("login_admin")  # Лимит определяется в constants.py
async def login_admin(admin: AdminLogin, db: AsyncSession = Depends(get_async_db), request: Request = None):
    """Авторизация администратора с возвратом токена."""
    db_admin = await get_admin_by_username(db, admin.email)
    if not db_admin or not pwd_context.verify(admin.password, db_admin.password_hash):
        await log_admin_activity(db, db_admin.id if db_admin else None, request, action="login_failed")
        logger.warning(f"Failed login attempt for admin email: {admin.email}")
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail="Неверный логин или пароль"
        )
    
    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)
    access_token = create_access_token(
        data={"sub": db_admin.email}, expires_delta=access_token_expires
    )
    await log_admin_activity(db, db_admin.id, request, action="login")
    logger.info(f"Admin logged in successfully: {db_admin.email}")
    return {"access_token": access_token, "token_type": "bearer"}

@router.get("/me", response_model=AdminResponse)
@rate_limit("access_me_admin")  # Лимит определяется в constants.py
async def read_admins_me(
    credentials: HTTPAuthorizationCredentials = Depends(bearer_scheme),
    db: AsyncSession = Depends(get_async_db),
    request: Request = None
):
    """Получение данных текущего администратора (защищенный эндпоинт)."""
    token = credentials.credentials
    current_admin = await get_current_admin(token, db)
    await log_admin_activity(db, current_admin.id, request, action="access_me")
    logger.info(f"Admin accessed their profile: {current_admin.email}")
    return current_admin

@router.get("/verify_token")
@rate_limit("verify_token_admin")  # Отдельный лимит с более высоким порогом
async def verify_token(
    request: Request,
    credentials: HTTPAuthorizationCredentials = Depends(bearer_scheme),
    db: AsyncSession = Depends(get_async_db)
):
    """
    Облегченная проверка действительности токена без полной загрузки профиля.
    Используется для клиентской авторизации с меньшими ограничениями по частоте запросов.
    """
    try:
        token = credentials.credentials
        current_admin = await get_current_admin(token, db)
        return {
            "is_valid": True,
            "admin_id": current_admin.id,
            "email": current_admin.email
        }
    except HTTPException:
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail="Invalid token"
        )
================
File: backend\api\admin_edit_routers.py
from enum import Enum
from fastapi import APIRouter, Depends, HTTPException, status, Request
from fastapi.security import HTTPBearer, HTTPAuthorizationCredentials
from backend.schemas_enums.schemas import EventCreate, EventUpdate
from backend.database.user_db import AsyncSession, Registration, TicketType, get_async_db, Event
from backend.config.auth import get_current_admin, log_admin_activity
from backend.config.logging_config import logger
from datetime import datetime, timezone

router = APIRouter()
bearer_scheme = HTTPBearer()

# Маршрут для создания мероприятия
# backend/api/admin_edit_routers.py
from fastapi import APIRouter, Depends, HTTPException, status, Request
from fastapi.security import HTTPBearer, HTTPAuthorizationCredentials
from backend.schemas_enums.schemas import EventCreate, EventUpdate, TicketTypeCreate
from backend.database.user_db import AsyncSession, get_async_db, Event, TicketType
from backend.config.auth import get_current_admin, log_admin_activity
from backend.config.logging_config import logger
from datetime import datetime, timezone
from sqlalchemy.orm import selectinload

router = APIRouter()
bearer_scheme = HTTPBearer()

@router.post("", response_model=EventCreate, status_code=status.HTTP_201_CREATED)
async def create_event(
    event: EventCreate,
    db: AsyncSession = Depends(get_async_db),
    credentials: HTTPAuthorizationCredentials = Depends(bearer_scheme),
    request: Request = None
):
    token = credentials.credentials
    current_admin = await get_current_admin(token, db)
    
    now_without_tz = datetime.now(timezone.utc).replace(tzinfo=None)
    
    db_event = Event(
        title=event.title,
        description=event.description,
        start_date=event.start_date.replace(tzinfo=None) if event.start_date.tzinfo else event.start_date,
        end_date=event.end_date.replace(tzinfo=None) if event.end_date and event.end_date.tzinfo else event.end_date,
        location=event.location,
        image_url=event.image_url,
        price=event.price,
        published=event.published,
        created_at=now_without_tz,
        updated_at=now_without_tz,
        status=event.status  # Устанавливаем статус
    )
    db.add(db_event)
    await db.flush()
    
    if event.ticket_type:
        ticket_type = TicketType(
            event_id=db_event.id,
            name=event.ticket_type.name.value,
            price=event.ticket_type.price,
            available_quantity=event.ticket_type.available_quantity,
            sold_quantity=0,
            free_registration=event.ticket_type.free_registration
        )
        db.add(ticket_type)
        await db.flush()

    await db.commit()
    await db.refresh(db_event, options=[selectinload(Event.tickets)])
    
    event_dict = db_event.__dict__
    if db_event.tickets:
        ticket = db_event.tickets[0]
        event_dict["ticket_type"] = TicketTypeCreate(
            name=ticket.name,
            price=ticket.price,
            available_quantity=ticket.available_quantity,
            free_registration=ticket.free_registration
        ).model_dump()
    
    await log_admin_activity(db, current_admin.id, request, action="create_event")
    logger.info(f"Event created by admin {current_admin.email}: {db_event.title}")
    return EventCreate(**event_dict)

# Маршрут для обновления мероприятия
@router.put("/{event_id}", response_model=EventCreate)
async def update_event(
    event_id: int,
    event: EventUpdate,
    db: AsyncSession = Depends(get_async_db),
    credentials: HTTPAuthorizationCredentials = Depends(bearer_scheme),
    request: Request = None
):
    token = credentials.credentials
    current_admin = await get_current_admin(token, db)
    
    db_event = await db.get(Event, event_id)
    if not db_event:
        raise HTTPException(status_code=404, detail="Event not found")

    update_data = event.model_dump(exclude_unset=True)
    for key, value in update_data.items():
        if key == "status":
            value = value.value if isinstance(value, Enum) else value
        setattr(db_event, key, value)
    db_event.updated_at = datetime.now(timezone.utc).replace(tzinfo=None)

    await db.commit()
    await db.refresh(db_event, options=[selectinload(Event.tickets)])

    event_dict = db_event.__dict__
    if db_event.tickets:
        ticket = db_event.tickets[0]
        event_dict["ticket_type"] = TicketTypeCreate(
            name=ticket.name,
            price=ticket.price,
            available_quantity=ticket.available_quantity,
            free_registration=ticket.free_registration
        ).model_dump()

    await log_admin_activity(db, current_admin.id, request, action="update_event")
    logger.info(f"Event updated by admin {current_admin.email}: {db_event.title}")
    return EventCreate(**event_dict)
================
File: backend\api\event_routers.py
from fastapi import APIRouter, Depends, HTTPException, status, Request
from backend.database.user_db import AsyncSession, get_async_db, Event
from backend.config.logging_config import logger
from sqlalchemy.future import select
from sqlalchemy.orm import selectinload
from backend.schemas_enums.schemas import EventCreate, TicketTypeCreate

router = APIRouter(
    tags=["Events"]
)

# Маршрут для получения списка мероприятий (без авторизации)
@router.get("", response_model=list[EventCreate])
async def get_events(db: AsyncSession = Depends(get_async_db)):
    result = await db.execute(
        select(Event).where(Event.status != "draft").options(selectinload(Event.tickets))
    )
    events = result.scalars().all()
    
    event_responses = []
    for event in events:
        event_dict = event.__dict__
        if event.tickets:
            ticket = event.tickets[0]
            event_dict["ticket_type"] = TicketTypeCreate(
                name=ticket.name,
                price=ticket.price,
                available_quantity=ticket.available_quantity,
                free_registration=ticket.free_registration
            ).model_dump()
        event_responses.append(EventCreate(**event_dict))
    
    return event_responses

# Маршрут для получения конкретного мероприятия (без авторизации)
@router.get("/{event_id}", response_model=EventCreate)
async def get_event(
    event_id: int,
    db: AsyncSession = Depends(get_async_db),
    request: Request = None
):
    """Получение конкретного мероприятия по ID (публичный доступ)."""
    try:
        # Подгружаем событие с связанными tickets
        db_event = await db.get(Event, event_id, options=[selectinload(Event.tickets)])
        if not db_event:
            raise HTTPException(status_code=status.HTTP_404_NOT_FOUND, detail="Event not found")
        
        # Формируем ответ с ticket_type
        event_dict = db_event.__dict__
        if db_event.tickets and len(db_event.tickets) > 0:
            ticket = db_event.tickets[0]  # Берем первый тип билета
            event_dict["ticket_type"] = TicketTypeCreate(
                name=ticket.name,
                price=ticket.price,
                available_quantity=ticket.available_quantity,
                free_registration=ticket.free_registration
            ).model_dump()
            logger.info(f"Event {event_id} retrieved with {ticket.available_quantity - ticket.sold_quantity} available tickets")
        
        logger.info(f"Public request for event {event_id}")
        return EventCreate(**event_dict)
    except Exception as e:
        logger.error(f"Error retrieving event {event_id}: {str(e)}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail="Failed to retrieve event"
        )
================
File: backend\api\guests_registration_routers.py
# backend/api/guests_registration_routers.py
from datetime import datetime
from fastapi import APIRouter, Depends, HTTPException, status
from backend.database.user_db import AsyncSession, Event, get_async_db, Registration, TicketType
from backend.config.auth import get_current_user
from sqlalchemy.future import select

router = APIRouter(tags=["Registration"])

@router.post("/register")
async def register_for_event(
    data: dict,
    db: AsyncSession = Depends(get_async_db),
    current_user = Depends(get_current_user)
):
    event_id = data.get("event_id")
    user_id = data.get("user_id")

    if not event_id or not user_id:
        raise HTTPException(status_code=400, detail="Event ID and User ID are required")

    # Проверка статуса мероприятия
    event = await db.get(Event, event_id)
    if not event or event.status != "registration_open":
        raise HTTPException(status_code=400, detail="Registration is not open for this event")

    # Проверка доступных билетов
    ticket = (await db.execute(select(TicketType).where(TicketType.event_id == event_id))).scalars().first()
    if not ticket or ticket.available_quantity <= ticket.sold_quantity:
        raise HTTPException(status_code=400, detail="No available tickets")

    # Создание записи о регистрации
    registration = Registration(
        user_id=user_id,
        event_id=event_id,
        ticket_type_id=ticket.id,
        ticket_number=f"TICKET-{event_id}-{user_id}-{datetime.utcnow().timestamp()}",
        payment_status=False,
        amount_paid=0 if ticket.free_registration else ticket.price,
    )
    db.add(registration)
    ticket.sold_quantity += 1
    await db.commit()

    return {"message": "Successfully registered"}
================
File: backend\api\media_routers.py

================
File: backend\api\user_auth_routers.py
from fastapi import APIRouter, Depends, HTTPException, status, Request
from backend.schemas_enums.schemas import UserCreate, UserLogin, UserResponse
from backend.config.auth import create_user, get_user_by_username, pwd_context, create_access_token, get_current_user, log_user_activity
from backend.database.user_db import AsyncSession, get_async_db
from backend.config.logging_config import logger
from fastapi.security import HTTPBearer, HTTPAuthorizationCredentials
from datetime import timedelta
from backend.config.rate_limiter import rate_limit
from constants import ACCESS_TOKEN_EXPIRE_MINUTES

router = APIRouter()

bearer_scheme = HTTPBearer()

@router.post("/register", response_model=UserResponse, status_code=status.HTTP_201_CREATED)
@rate_limit("register")  # Лимит определяется в constants.py
async def register_user(user: UserCreate, db: AsyncSession = Depends(get_async_db), request: Request = None):
    """Регистрация нового пользователя."""
    existing_user = await get_user_by_username(db, user.email)
    if existing_user:
        logger.warning(f"Attempt to register existing email: {user.email}")
        raise HTTPException(
            status_code=status.HTTP_400_BAD_REQUEST,
            detail="Email already exists"
        )
    
    try:
        new_user = await create_user(db, user.fio, user.email, user.password, user.telegram, user.whatsapp)
        await log_user_activity(db, new_user.id, request, action="register")
        logger.info(f"User registered successfully: {new_user.email}")
        return new_user
    except Exception as e:
        logger.error(f"Error registering user: {str(e)}")
        await db.rollback()
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail="Failed to register user"
        )

@router.post("/login")
@rate_limit("login")  # Лимит определяется в constants.py
async def login_user(user: UserLogin, db: AsyncSession = Depends(get_async_db), request: Request = None):
    """Авторизация пользователя с возвратом токена."""
    db_user = await get_user_by_username(db, user.email)
    if not db_user or not pwd_context.verify(user.password, db_user.password_hash):
        await log_user_activity(db, db_user.id if db_user else None, request, action="login_failed")
        logger.warning(f"Failed login attempt for email: {user.email}")
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail="Неверный логин или пароль"
        )
    
    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)
    access_token = create_access_token(
        data={"sub": db_user.email}, expires_delta=access_token_expires
    )
    await log_user_activity(db, db_user.id, request, action="login")
    logger.info(f"User logged in successfully: {db_user.email}")
    return {"access_token": access_token, "token_type": "bearer"}

@router.get("/me", response_model=UserResponse)
@rate_limit("access_me")  # Лимит определяется в constants.py
async def read_users_me(
    credentials: HTTPAuthorizationCredentials = Depends(bearer_scheme),
    db: AsyncSession = Depends(get_async_db),
    request: Request = None
):
    """Получение данных текущего пользователя (защищенный эндпоинт)."""
    token = credentials.credentials
    current_user = await get_current_user(token, db)
    await log_user_activity(db, current_user.id, request, action="access_me")
    logger.info(f"User accessed their profile: {current_user.email}")
    return current_user

@router.get("/verify_token")
@rate_limit("verify_token")  # Отдельный лимит с более высоким порогом
async def verify_token(
    request: Request,
    credentials: HTTPAuthorizationCredentials = Depends(bearer_scheme),
    db: AsyncSession = Depends(get_async_db)
):
    """
    Облегченная проверка действительности токена без полной загрузки профиля.
    Используется для клиентской авторизации с меньшими ограничениями по частоте запросов.
    """
    try:
        token = credentials.credentials
        # Только проверяем действительность токена без загрузки полного профиля
        current_user = await get_current_user(token, db)
        return {
            "is_valid": True,
            "user_id": current_user.id,
            "email": current_user.email
        }
    except HTTPException:
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail="Invalid token"
        )
================
File: backend\config\auth.py
import hashlib
from sqlalchemy.ext.asyncio import AsyncSession
from backend.database.user_db import User, UserActivity, Admin, get_async_db
from sqlalchemy.future import select
from passlib.context import CryptContext
from typing import Optional
from jose import JWTError, jwt
from datetime import datetime, timedelta
from fastapi import HTTPException, Request, status
from backend.config.logging_config import logger
from constants import SECRET_KEY, ALGORITHM

# Контекст для хэширования паролей
pwd_context = CryptContext(schemes=["bcrypt"], deprecated="auto")

async def create_user(session: AsyncSession, fio: str, email: str, password: str, telegram: str, whatsapp: str) -> User:
    """Создание нового пользователя с хэшированием пароля."""
    password_hash = pwd_context.hash(password)
    new_user = User(fio=fio, email=email, password_hash=password_hash, telegram=telegram, whatsapp=whatsapp)
    session.add(new_user)
    await session.commit()
    await session.refresh(new_user)
    return new_user

async def get_user_by_username(session: AsyncSession, email: str) -> Optional[User]:
    """Получение пользователя по email."""
    result = await session.execute(select(User).where(User.email == email))
    return result.scalars().first()

def create_access_token(data: dict, expires_delta: timedelta = None):
    """Генерация JWT-токена."""
    to_encode = data.copy()
    if expires_delta:
        expire = datetime.utcnow() + expires_delta
    else:
        expire = datetime.utcnow() + timedelta(minutes=15)
    to_encode.update({"exp": expire})
    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)
    return encoded_jwt

async def get_current_user(token: str, session: AsyncSession) -> User:
    """Проверка токена и получение текущего пользователя."""
    credentials_exception = HTTPException(
        status_code=status.HTTP_401_UNAUTHORIZED,
        detail="Could not validate credentials",
        headers={"WWW-Authenticate": "Bearer"},
    )
    try:
        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])
        email: str = payload.get("sub")
        if email is None:
            raise credentials_exception
    except JWTError:
        raise credentials_exception
    
    user = await get_user_by_username(session, email)
    if user is None:
        raise credentials_exception
    return user

async def create_admin(session: AsyncSession, fio: str, email: str, password: str) -> Admin:
    """Создание нового администратора с хэшированием пароля."""
    password_hash = pwd_context.hash(password)
    new_admin = Admin(fio=fio, email=email, password_hash=password_hash)
    session.add(new_admin)
    await session.commit()
    await session.refresh(new_admin)
    return new_admin

async def get_admin_by_username(session: AsyncSession, email: str) -> Optional[Admin]:
    """Получение администратора по email."""
    result = await session.execute(select(Admin).where(Admin.email == email))
    return result.scalars().first()

async def get_current_admin(token: str, session: AsyncSession) -> Admin:
    """Проверка токена и получение текущего администратора."""
    credentials_exception = HTTPException(
        status_code=status.HTTP_401_UNAUTHORIZED,
        detail="Could not validate credentials",
        headers={"WWW-Authenticate": "Bearer"},
    )
    try:
        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])
        email: str = payload.get("sub")
        if email is None:
            raise credentials_exception
    except JWTError:
        raise credentials_exception
    
    # Получаем администратора по email
    result = await session.execute(select(Admin).where(Admin.email == email))
    admin = result.scalars().first()
    if admin is None:
        raise HTTPException(
            status_code=status.HTTP_403_FORBIDDEN,
            detail="Not authorized as an admin"
        )
    return admin

async def log_user_activity(
    db: AsyncSession,
    user_id: int,
    request: Request,
    action: str
):
    """Логирование активности пользователя с фингерпринтом устройства, предотвращение дубликатов."""
    # Получаем IP-адрес из заголовка X-Forwarded-For (для прокси) или напрямую
    ip_address = request.headers.get("X-Forwarded-For", request.client.host)
    # Получаем куки (если они есть)
    cookies = "; ".join([f"{key}={value}" for key, value in request.cookies.items()]) if request.cookies else None
    # Получаем User-Agent
    user_agent = request.headers.get("User-Agent", "Unknown")
    # Дополнительные заголовки для фингерпринта
    accept_language = request.headers.get("Accept-Language", "")
    accept_encoding = request.headers.get("Accept-Encoding", "")

    # Генерируем фингерпринт устройства
    fingerprint_data = f"{ip_address}{user_agent}{cookies or ''}{accept_language}{accept_encoding}"
    device_fingerprint = hashlib.sha256(fingerprint_data.encode("utf-8")).hexdigest()

    # Проверяем существование записи с теми же данными
    stmt = select(UserActivity).where(
        UserActivity.user_id == user_id,
        UserActivity.ip_address == ip_address,
        UserActivity.device_fingerprint == device_fingerprint,
        UserActivity.action == action,
        UserActivity.created_at >= (datetime.utcnow() - timedelta(minutes=5))  # Проверяем за последние 5 минут
    )
    result = await db.execute(stmt)
    existing_activity = result.scalars().first()

    if not existing_activity:
        # Если записи нет, создаем новую
        activity = UserActivity(
            user_id=user_id,
            ip_address=ip_address,
            cookies=cookies,
            user_agent=user_agent,
            action=action,
            device_fingerprint=device_fingerprint
        )
        db.add(activity)
        await db.commit()
    else:
        # Если запись существует, обновляем created_at (опционально)
        existing_activity.created_at = datetime.utcnow()
        await db.commit()
        logger.info(f"Duplicate activity ignored for user_id={user_id}, action={action}")

async def log_admin_activity(
    db: AsyncSession,
    admin_id: int,
    request: Request,
    action: str
):
    """Логирование активности администратора."""
    # Получаем IP-адрес из заголовка X-Forwarded-For (для прокси) или напрямую
    ip_address = request.headers.get("X-Forwarded-For", request.client.host)
    # Получаем куки (если они есть)
    cookies = "; ".join([f"{key}={value}" for key, value in request.cookies.items()]) if request.cookies else None
    # Получаем User-Agent
    user_agent = request.headers.get("User-Agent", "Unknown")
    # Дополнительные заголовки для фингерпринта
    accept_language = request.headers.get("Accept-Language", "")
    accept_encoding = request.headers.get("Accept-Encoding", "")

    # Генерируем фингерпринт устройства
    fingerprint_data = f"{ip_address}{user_agent}{cookies or ''}{accept_language}{accept_encoding}"
    device_fingerprint = hashlib.sha256(fingerprint_data.encode("utf-8")).hexdigest()

    # Создаем запись активности администратора
    # Проверяем существование записи с теми же данными за последние 5 минут
    stmt = select(UserActivity).where(
        UserActivity.user_id == admin_id,  # Здесь user_id используется как общий идентификатор активности
        UserActivity.ip_address == ip_address,
        UserActivity.device_fingerprint == device_fingerprint,
        UserActivity.action == action,
        UserActivity.created_at >= (datetime.utcnow() - timedelta(minutes=5))
    )
    result = await db.execute(stmt)
    existing_activity = result.scalars().first()

    if not existing_activity:
        # Если записи нет, создаем новую
        activity = UserActivity(
            user_id=admin_id,  # Используем user_id как идентификатор, хотя это администратор
            ip_address=ip_address,
            cookies=cookies,
            user_agent=user_agent,
            action=action,
            device_fingerprint=device_fingerprint
        )
        db.add(activity)
        await db.commit()
    else:
        # Если запись существует, обновляем created_at
        existing_activity.created_at = datetime.utcnow()
        await db.commit()
        logger.info(f"Duplicate admin activity ignored for admin_id={admin_id}, action={action}")

async def get_user_or_ip_key(request: Request) -> str:
    """Возвращает user_id (если аутентифицирован) или IP-адрес как ключ для ограничения."""
    auth_header = request.headers.get("Authorization")
    if auth_header and auth_header.startswith("Bearer "):
        token = auth_header.split(" ")[1]
        async with get_async_db() as session:
            try:
                user = await get_current_user(token, session)
                return f"user_{user.id}"  # Ключ на основе user_id
            except Exception:
                pass
    return f"ip_{request.client.host}"  # Ключ на основе IP для неаутентифицированных пользователей
================
File: backend\config\logging_config.py
# config/logging_config.py
import logging
from logging.handlers import RotatingFileHandler


def setup_logging():
    """Настройка логирования для приложения."""
    # Создание логгера root для перехвата всех логов
    logger = logging.getLogger()  # root logger вместо "JE"
    logger.setLevel(logging.INFO)  # Уровень логирования

    # Проверка, есть ли уже обработчики, чтобы избежать дублирования
    if not logger.handlers:
        # Обработчик для консоли
        console_handler = logging.StreamHandler()
        console_handler.setLevel(logging.INFO)

        # Обработчик для файла с ротацией
        file_handler = RotatingFileHandler("app.log", maxBytes=10**6, backupCount=3)
        file_handler.setLevel(logging.ERROR)  # Логировать только ошибки в файл

        # Форматтер
        formatter = logging.Formatter("%(asctime)s - %(name)s - %(levelname)s - %(message)s")
        console_handler.setFormatter(formatter)
        file_handler.setFormatter(formatter)

        # Добавление обработчиков к логгеру
        logger.addHandler(console_handler)
        logger.addHandler(file_handler)

    return logger

# Инициализация логирования при импорте этого модуля
logger = setup_logging()
================
File: backend\config\rate_limiter.py
from slowapi import Limiter
from slowapi.util import get_remote_address
from constants import RATE_LIMITS
from functools import wraps
from fastapi import Request
from typing import Callable, Any

# Инициализация Limiter
limiter = Limiter(key_func=get_remote_address)

def rate_limit(action: str):
    """
    Декоратор для применения лимитов запросов на основе действия (action).
    """
    def decorator(func: Callable) -> Callable:
        @wraps(func)
        async def wrapper(*args: Any, **kwargs: Any) -> Any:
            # Получаем лимит из RATE_LIMITS или устанавливаем значение по умолчанию
            limit = RATE_LIMITS.get(action, "100/minute")  # По умолчанию 100 запросов в минуту
            
            # Находим объект Request в аргументах
            request = None
            for arg in args:
                if isinstance(arg, Request):
                    request = arg
                    break
            
            if 'request' in kwargs:
                request = kwargs['request']
            
            if not request:
                # Если request не найден в аргументах, создаем заглушку
                # или используем другие методы для получения информации о запросе
                from starlette.datastructures import Headers
                from starlette.types import Scope
                
                # Создаем минимальную заглушку для Request
                class RequestStub(Request):
                    def __init__(self):
                        self.scope = {"type": "http", "headers": []}
                        self.headers = Headers(raw=self.scope.get("headers", []))
                        self.client = type('obj', (object,), {'host': '127.0.0.1'})
                
                request = RequestStub()
            
            # Применяем лимит с использованием request
            @limiter.limit(limit)
            async def limited_func(request: Request) -> Any:
                # Передаем все оригинальные аргументы в функцию
                return await func(*args, **kwargs)
            
            return await limited_func(request)
        
        return wrapper
    
    return decorator
================
File: backend\database\admin_db.py

================
File: backend\database\drop_db.py
# backend/database/drop_db.py
import asyncio
from sqlalchemy.ext.asyncio import create_async_engine
from backend.database.user_db import Base  # Импортируем Base
from constants import DATABASE_URL

# Создаем асинхронный движок
engine = create_async_engine(DATABASE_URL, echo=True, future=True)

async def drop_tables():
    async with engine.begin() as conn:
        # Отражаем текущую структуру базы через run_sync
        await conn.run_sync(Base.metadata.reflect)
        # Удаляем все таблицы через run_sync
        await conn.run_sync(Base.metadata.drop_all)

if __name__ == "__main__":
    asyncio.run(drop_tables())
    print("Все таблицы успешно удалены.")
================
File: backend\database\init_admin_db.py

================
File: backend\database\init_user_db.py

================
File: backend\database\user_db.py
import asyncio
from typing import AsyncGenerator
from sqlalchemy.ext.asyncio import create_async_engine, AsyncSession, async_sessionmaker
from backend.schemas_enums.enums import EventStatus, MediaType, Status
from constants import DATABASE_URL
from datetime import datetime
from sqlalchemy.orm import (
    declarative_base,
    relationship,
    backref,
    selectinload
)
from contextlib import asynccontextmanager
from sqlalchemy import (
    Column,
    Integer,
    String,
    ForeignKey,
    Boolean,
    Text,
    DECIMAL,
    TIMESTAMP,
    Enum,
    UniqueConstraint,
)

# Создание асинхронного движка SQLAlchemy
engine = create_async_engine(DATABASE_URL, echo=True, future=True)

# Базовый класс для моделей
Base = declarative_base()

# Создание асинхронной фабрики сессий
AsyncSessionLocal = async_sessionmaker(
    engine,
    class_=AsyncSession,
    expire_on_commit=False,
    autocommit=False,
    autoflush=False
)


class UserParams(Base):
    __tablename__ = "users_params"

    id = Column(Integer, primary_key=True, index=True)
    user_id = Column(Integer, ForeignKey("users.id"), nullable=False)
    max_card_amount = Column(DECIMAL(20, 8), nullable=False)
    max_photo_program_amount = Column(DECIMAL(20, 8), nullable=False)
    max_video_program_amount = Column(DECIMAL(20, 8), nullable=False)
    
    # Обратная ссылка на пользователя
    user = relationship("User", back_populates="params")


class Event(Base):
    __tablename__ = "events"

    id = Column(Integer, primary_key=True, index=True)
    title = Column(String(255), nullable=False)
    description = Column(Text)
    start_date = Column(TIMESTAMP, nullable=False)
    end_date = Column(TIMESTAMP)
    location = Column(String(255))
    image_url = Column(String(255))
    price = Column(DECIMAL(20, 8), nullable=False)
    published = Column(Boolean, default=False)
    created_at = Column(TIMESTAMP, default=datetime.utcnow)
    updated_at = Column(TIMESTAMP, default=datetime.utcnow, onupdate=datetime.utcnow)
    status = Column(Enum(EventStatus), default=EventStatus.draft, nullable=False)
    
    # Связь с типами билетов
    tickets = relationship("TicketType", back_populates="event")
    
    # Связь с регистрациями на мероприятие
    registrations = relationship("Registration", back_populates="event")
    
    # Связь с медиа, относящимся к мероприятию
    medias = relationship("Media", back_populates="event")


class TicketType(Base):
    __tablename__ = "ticket_types"

    id = Column(Integer, primary_key=True, index=True)
    event_id = Column(Integer, ForeignKey("events.id"))
    name = Column(String(255), nullable=False)  # Название типа билета (например, "Стандарт", "Премиум")
    price = Column(DECIMAL(20, 8), nullable=False)  # Цена билета
    available_quantity = Column(Integer, nullable=False)  # Количество доступных билетов данного типа
    sold_quantity = Column(Integer, default=0)  # Количество проданных билетов данного типа
    free_registration = Column(Boolean, default=False)  # Возможность бесплатной регистрации
    
    # Обратная связь с событием
    event = relationship("Event", back_populates="tickets")
    
    # Связь с регистрациями, использующими данный тип билета
    registrations = relationship("Registration", back_populates="ticket_type")


class Registration(Base):
    __tablename__ = "registrations"

    id = Column(Integer, primary_key=True, index=True)
    user_id = Column(Integer, ForeignKey("users.id"))
    event_id = Column(Integer, ForeignKey("events.id"))
    ticket_type_id = Column(Integer, ForeignKey("ticket_types.id"))
    ticket_number = Column(String(255))  # Номер билета
    payment_status = Column(Boolean, default=False)  # Статус оплаты
    amount_paid = Column(DECIMAL(20, 8))  # Сумма платежа
    status = Column(Enum(Status), default=Status.pending.name)  # Статусы: pending, approved, rejected
    submission_time = Column(TIMESTAMP, default=datetime.utcnow)
    
    # Обратная связь с пользователем
    user = relationship("User", back_populates="registrations")
    
    # Обратная связь с мероприятием
    event = relationship("Event", back_populates="registrations")
    
    # Обратная связь с типом билета
    ticket_type = relationship("TicketType", back_populates="registrations")


class Media(Base):
    __tablename__ = "medias"

    id = Column(Integer, primary_key=True, index=True)
    event_id = Column(Integer, ForeignKey("events.id"))  # К какому мероприятию относится
    user_uploaded_by_id = Column(Integer, ForeignKey("users.id"), nullable=True)  # Кто загрузил (обычный пользователь)
    admin_uploaded_by_id = Column(Integer, ForeignKey("admins.id"), nullable=True)  # Кто загрузил (администратор)
    type = Column(Enum(MediaType), nullable=False)  # Тип медиафайла
    url = Column(String(255), nullable=False)  # Ссылка на файл
    caption = Column(String(500))  # Описание файла
    approved = Column(Boolean, default=False)  # Прошёл ли модерацию
    created_at = Column(TIMESTAMP, default=datetime.utcnow)
    updated_at = Column(TIMESTAMP, default=datetime.utcnow, onupdate=datetime.utcnow)
    
    # Обратная связь с мероприятием
    event = relationship("Event", back_populates="medias")
    
    # Обратная связь с пользователем, загрузившим медиа
    user_uploaded_by = relationship("User", foreign_keys=[user_uploaded_by_id], back_populates="user_medias")
    
    # Обратная связь с администратором, загрузившим медиа
    admin_uploaded_by = relationship("Admin", foreign_keys=[admin_uploaded_by_id], back_populates="admin_medias")
    
class User(Base):
    __tablename__ = "users"

    id = Column(Integer, primary_key=True, index=True)
    fio = Column(String(255), nullable=False)
    email = Column(String(255), unique=True, nullable=False)
    password_hash = Column(Text, nullable=False)
    avatar_url = Column(String(255), nullable=True)
    telegram = Column(String(255), unique=True, nullable=False)
    whatsapp = Column(String(255), unique=True, nullable=False)
    created_at = Column(TIMESTAMP, default=datetime.utcnow)
    updated_at = Column(TIMESTAMP, default=datetime.utcnow, onupdate=datetime.utcnow)
    
    # Связь с параметрами пользователя
    params = relationship("UserParams", uselist=False, back_populates="user")
    # Связь с регистрациями пользователя
    registrations = relationship("Registration", back_populates="user")
    # Связь с медиа, загруженным пользователем
    user_medias = relationship("Media", foreign_keys=[Media.user_uploaded_by_id], back_populates="user_uploaded_by")
    activities = relationship("UserActivity", back_populates="user")  # Новая связь
    
class UserActivity(Base):
    __tablename__ = "user_activities"

    id = Column(Integer, primary_key=True, index=True)
    user_id = Column(Integer, ForeignKey("users.id"), nullable=False)
    ip_address = Column(String(45), nullable=False)  # Поддержка IPv4 и IPv6
    cookies = Column(Text, nullable=True)  # Храним куки как текст
    user_agent = Column(Text, nullable=True)  # Информация о браузере/устройстве
    action = Column(String(50), nullable=False)  # Тип действия: register, login, access_me
    created_at = Column(TIMESTAMP, default=datetime.utcnow)
    device_fingerprint = Column(Text, nullable=True)

    user = relationship("User", back_populates="activities")
    
    # Уникальный индекс для предотвращения дубликатов
    __table_args__ = (
        UniqueConstraint('user_id', 'ip_address', 'device_fingerprint', 'action', 'created_at', name='uq_user_activity'),
    )


class Admin(Base):
    __tablename__ = "admins"

    id = Column(Integer, primary_key=True, index=True)
    fio = Column(String(255), nullable=False)
    email = Column(String(255), unique=True, nullable=False)
    password_hash = Column(Text, nullable=False)
    avatar_url = Column(String(255), nullable=True)
    created_at = Column(TIMESTAMP, default=datetime.utcnow)
    updated_at = Column(TIMESTAMP, default=datetime.utcnow, onupdate=datetime.utcnow)
    
    # Связь с медиа, загруженным администратором
    admin_medias = relationship("Media", foreign_keys=[Media.admin_uploaded_by_id], back_populates="admin_uploaded_by")

# Функция для инициализации базы данных
async def init_db():
    try:
        async with engine.begin() as conn:
            # Создание всех таблиц
            await conn.run_sync(Base.metadata.create_all)
            print("Таблицы успешно созданы.")
    except Exception as e:
        print(f"Произошла ошибка при инициализации базы данных: {e}")
    finally:
        await engine.dispose()

# Контекст-менеджер для получения сессии
@asynccontextmanager
async def get_session() -> AsyncGenerator[AsyncSession, None]:
    async with AsyncSessionLocal() as session:
        async with session.begin():
            try:
                yield session
            except Exception:
                await session.rollback()
                raise
            finally:
                await session.close()

# Dependency для FastAPI
async def get_async_db() -> AsyncGenerator[AsyncSession, None]:
    async with AsyncSessionLocal() as session:
        try:
            yield session
        except Exception:
            await session.rollback()
            raise

if __name__ == "__main__":
    asyncio.run(init_db())
================
File: backend\schemas_enums\enums.py
# backend/schemas_enums/enums.py
from enum import Enum

class MediaType(Enum):
    photo = 'photo'
    video = 'video'

class Status(Enum):
    pending = 'pending'
    approved = 'approved'
    rejected = 'rejected'

class Role(Enum):
    user = 'user'
    admin = 'admin'

class TicketTypeEnum(Enum):  # Новый enum для типов билетов
    free = 'free'
    standart = 'standart'
    vip = 'vip'
    org = 'org'
    
class EventStatus(Enum):
    draft = 'draft'
    registration_open = 'registration_open'
    registration_closed = 'registration_closed'
    completed = 'completed'
================
File: backend\schemas_enums\schemas.py
from datetime import datetime
from typing import Optional
from pydantic import BaseModel, EmailStr

from backend.schemas_enums.enums import EventStatus, TicketTypeEnum


#------------------------
# ADMINS
#------------------------

class AdminCreate(BaseModel):
    fio: str
    email: EmailStr
    password: str

class AdminLogin(BaseModel):
    email: EmailStr
    password: str

class AdminResponse(BaseModel):
    id: int
    fio: str
    email: EmailStr

    class Config:
        from_attributes = True  # Для совместимости с SQLAlchemy
        
#------------------------
# USERS
#------------------------   
    

class UserCreate(BaseModel):
    fio: str
    email: EmailStr
    password: str
    telegram: str
    whatsapp: str

class UserLogin(BaseModel):
    email: EmailStr
    password: str

class UserResponse(BaseModel):
    id: int
    fio: str
    email: EmailStr
    telegram: str
    whatsapp: str

    class Config:
        from_attributes = True  # Для совместимости с SQLAlchemy
        
        
#------------------------
# EVENTS
#------------------------

class TicketTypeCreate(BaseModel):
    name: TicketTypeEnum  # Заменяем str на TicketTypeEnum
    price: float  # Цена билета
    available_quantity: int  # Доступное количество
    free_registration: Optional[bool] = False  # Бесплатная регистрация (по умолчанию False)

    class Config:
        from_attributes = True

class EventCreate(BaseModel):
    title: str
    description: Optional[str] = None
    start_date: datetime
    end_date: Optional[datetime] = None
    location: Optional[str] = None
    image_url: Optional[str] = None
    price: float
    published: Optional[bool] = False
    created_at: datetime
    updated_at: datetime
    status: Optional[EventStatus] = EventStatus.draft  # По умолчанию 'draft'
    ticket_type: Optional[TicketTypeCreate] = None

    class Config:
        from_attributes = True
    
    
class EventUpdate(BaseModel):
    id: Optional[int] = None
    title: Optional[str] = None
    description: Optional[str] = None
    start_date: Optional[datetime] = None
    end_date: Optional[datetime] = None
    location: Optional[str] = None
    image_url: Optional[str] = None
    price: Optional[float] = None
    published: Optional[bool] = None
    created_at: Optional[datetime] = None
    updated_at: Optional[datetime] = None
    status: Optional[EventStatus] = None  # Позволяем обновлять статус

    class Config:
        from_attributes = True
        

================
File: frontend\src\app\globals.css
/* frontend/src/app/globals.css */
@tailwind base;
@tailwind components;
@tailwind utilities;

/* Root variables for theming */
:root {
  --background: #ffffff;
  --foreground: #171717;
  
  /* Orange theme colors */
  --primary: #f97316;
  --primary-hover: #ea580c;
  --primary-light: #ffedd5;
  
  /* UI colors */
  --success: #22c55e;
  --warning: #f59e0b;
  --error: #ef4444;
  --info: #3b82f6;
}

/* Dark mode variables */
@media (prefers-color-scheme: dark) {
  :root {
    --background: #0a0a0a;
    --foreground: #ededed;
  }
}

html,
body {
  max-width: 100vw;
  overflow-x: hidden;
}

body {
  color: var(--foreground);
  background: var(--background);
  font-family: var(--font-geist-sans), Arial, Helvetica, sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

/* Input styles */
input, button, a, select, textarea {
  outline: none;
  transition: all 500ms cubic-bezier(0.25, 0.1, 0.25, 1);
  backface-visibility: hidden;
  transform-style: preserve-3d;
  will-change: transform, opacity;
}

/* Placeholder styles */
::placeholder {
  transition: opacity 500ms ease, color 500ms ease;
}

input:focus::placeholder {
  opacity: 0.7;
}

/* Base styles */
* {
  box-sizing: border-box;
  padding: 0;
  margin: 0;
}

a {
  color: inherit;
  text-decoration: none;
}

/* Animation keyframes */
@keyframes slideDown {
  from { transform: translateY(-100%); opacity: 0; }
  to { transform: translateY(0); opacity: 1; }
}

@keyframes spin {
  from { transform: rotate(0deg); }
  to { transform: rotate(360deg); }
}

@keyframes fadeIn {
  from { opacity: 0; }
  to { opacity: 1; }
}

@keyframes fadeOut {
  from { opacity: 1; }
  to { opacity: 0; }
}

@keyframes pulse {
  0%, 100% { opacity: 1; transform: scale(1); }
  50% { opacity: 0.7; transform: scale(0.95); }
}

/* Animation utility classes */
.animate-slide-down { animation: slideDown 0.3s ease-out; }
.animate-fade-in { animation: fadeIn 0.25s ease-in-out; }
.animate-fade-out { animation: fadeOut 0.25s ease-in-out; }
.animate-spin { animation: spin 1s linear infinite; }
.animate-spin-slow { animation: spin 2s linear infinite; }
.animate-pulse { animation: pulse 1.5s ease-in-out infinite; }

/* Common layout utilities */
.full-screen {
  position: fixed;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  width: 100vw;
  height: 100vh;
  overflow: hidden;
}

.center {
  display: flex;
  align-items: center;
  justify-content: center;
}

.backdrop {
  background-color: rgba(255, 255, 255, 0.8);
  backdrop-filter: blur(8px);
}

/* Fix for iOS safari scrolling/hiding */
body.no-scroll {
  position: fixed;
  width: 100%;
  overflow-y: hidden;
}

/* Custom component styles */
@layer components {
  .btn {
    @apply px-4 py-2 rounded-lg transition-all duration-300 font-medium;
  }
  
  .btn-primary {
    @apply bg-orange-500 text-white hover:bg-orange-600 active:bg-orange-700;
  }
  
  .btn-secondary {
    @apply bg-white border border-orange-500 text-orange-500 hover:bg-orange-50;
  }
  
  .card {
    @apply bg-white rounded-xl shadow-md hover:shadow-xl transition-all duration-300;
  }
  
  .form-input {
    @apply w-full p-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-orange-500 focus:border-transparent;
  }
}
================
File: frontend\src\app\layout.tsx
// frontend/src/app/layout.tsx
import { Geist, Geist_Mono } from "next/font/google";
import "./globals.css";
import { AuthProvider } from "@/contexts/AuthContext";

const geistSans = Geist({
  variable: "--font-geist-sans",
  subsets: ["latin"],
});

const geistMono = Geist_Mono({
  variable: "--font-geist-mono",
  subsets: ["latin"],
});

export const metadata = {
  title: "Moscow Mellows",
  description: "Moscow Mellows - ваша платформа для мероприятий",
};

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  return (
    <html lang="ru" suppressHydrationWarning>
      <body className={`${geistSans.variable} ${geistMono.variable}`}>
        <AuthProvider>
          {/* Не включаем Header, так как он будет добавлен в соответствующих макетах */}
          {children}
        </AuthProvider>
      </body>
    </html>
  );
}
================
File: frontend\src\app\page.module.css
.page {
  --gray-rgb: 0, 0, 0;
  --gray-alpha-200: rgba(var(--gray-rgb), 0.08);
  --gray-alpha-100: rgba(var(--gray-rgb), 0.05);

  --button-primary-hover: #383838;
  --button-secondary-hover: #f2f2f2;

  display: grid;
  grid-template-rows: 20px 1fr 20px;
  align-items: center;
  justify-items: center;
  min-height: 100svh;
  padding: 80px;
  gap: 64px;
  font-family: var(--font-geist-sans);
}

@media (prefers-color-scheme: dark) {
  .page {
    --gray-rgb: 255, 255, 255;
    --gray-alpha-200: rgba(var(--gray-rgb), 0.145);
    --gray-alpha-100: rgba(var(--gray-rgb), 0.06);

    --button-primary-hover: #ccc;
    --button-secondary-hover: #1a1a1a;
  }
}

.main {
  display: flex;
  flex-direction: column;
  gap: 32px;
  grid-row-start: 2;
}

.main ol {
  font-family: var(--font-geist-mono);
  padding-left: 0;
  margin: 0;
  font-size: 14px;
  line-height: 24px;
  letter-spacing: -0.01em;
  list-style-position: inside;
}

.main li:not(:last-of-type) {
  margin-bottom: 8px;
}

.main code {
  font-family: inherit;
  background: var(--gray-alpha-100);
  padding: 2px 4px;
  border-radius: 4px;
  font-weight: 600;
}

.ctas {
  display: flex;
  gap: 16px;
}

.ctas a {
  appearance: none;
  border-radius: 128px;
  height: 48px;
  padding: 0 20px;
  border: none;
  border: 1px solid transparent;
  transition:
    background 0.2s,
    color 0.2s,
    border-color 0.2s;
  cursor: pointer;
  display: flex;
  align-items: center;
  justify-content: center;
  font-size: 16px;
  line-height: 20px;
  font-weight: 500;
}

a.primary {
  background: var(--foreground);
  color: var(--background);
  gap: 8px;
}

a.secondary {
  border-color: var(--gray-alpha-200);
  min-width: 158px;
}

.footer {
  grid-row-start: 3;
  display: flex;
  gap: 24px;
}

.footer a {
  display: flex;
  align-items: center;
  gap: 8px;
}

.footer img {
  flex-shrink: 0;
}

/* Enable hover only on non-touch devices */
@media (hover: hover) and (pointer: fine) {
  a.primary:hover {
    background: var(--button-primary-hover);
    border-color: transparent;
  }

  a.secondary:hover {
    background: var(--button-secondary-hover);
    border-color: transparent;
  }

  .footer a:hover {
    text-decoration: underline;
    text-underline-offset: 4px;
  }
}

@media (max-width: 600px) {
  .page {
    padding: 32px;
    padding-bottom: 80px;
  }

  .main {
    align-items: center;
  }

  .main ol {
    text-align: center;
  }

  .ctas {
    flex-direction: column;
  }

  .ctas a {
    font-size: 14px;
    height: 40px;
    padding: 0 16px;
  }

  a.secondary {
    min-width: auto;
  }

  .footer {
    flex-wrap: wrap;
    align-items: center;
    justify-content: center;
  }
}

@media (prefers-color-scheme: dark) {
  .logo {
    filter: invert();
  }
}

================
File: frontend\src\app\page.tsx
// frontend/src/app/page.tsx
"use client";

import React, { useState, useEffect } from "react";
import Link from "next/link";
import Loading from "@/components/Loading";
import Footer from "@/components/Footer";
import { motion } from "framer-motion";
import { FaUser, FaCalendarAlt, FaVideo, FaArrowRight } from "react-icons/fa";
import { IconType } from "react-icons";

interface FeatureCardProps {
  href: string;
  icon: IconType;
  title: string;
  description: string;
  ctaText: string;
}

const FeatureCard: React.FC<FeatureCardProps> = ({ href, icon: Icon, title, description, ctaText }) => (
  <Link href={href} className="group">
    <div className="bg-white rounded-xl p-6 shadow-md hover:shadow-xl transition-all duration-300 transform group-hover:-translate-y-1 h-full flex flex-col">
      <div className="w-14 h-14 bg-orange-100 rounded-full flex items-center justify-center mb-5">
        <Icon className="w-8 h-8 text-orange-500" />
      </div>
      <h3 className="text-xl font-bold mb-4">{title}</h3>
      <p className="text-gray-700 flex-grow">{description}</p>
      <div className="mt-4 text-orange-500 group-hover:text-orange-600 flex items-center">
        {ctaText}
        <FaArrowRight className="w-5 h-5 ml-2 transform group-hover:translate-x-1 transition-transform duration-300" />
      </div>
    </div>
  </Link>
);

const PublicHomePage: React.FC = () => {
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    // Убираем искусственную задержку и сразу проверяем состояние
    setLoading(false);
    document.body.style.overflow = "auto"; // Сбрасываем стиль overflow
  }, []);

  const features: FeatureCardProps[] = [
    {
      href: "/registration",
      icon: FaUser,
      title: "Регистрация",
      description: "Создайте личный кабинет на нашей платформе, чтобы открыть возможность регистрации на мероприятия.",
      ctaText: "Зарегистрироваться",
    },
    {
      href: "/events",
      icon: FaCalendarAlt,
      title: "Мероприятия",
      description: "Прошедшие и запланированные мероприятия.",
      ctaText: "Смотреть мероприятия",
    },
    {
      href: "/media",
      icon: FaVideo,
      title: "Медиа",
      description: "Фото, видео и аудио с наших мероприятий.",
      ctaText: "Смотреть медиа",
    },
  ];

  return (
    <>
      {loading ? (
        <Loading />
      ) : (
        <motion.div initial={{ opacity: 0 }} animate={{ opacity: 1 }} transition={{ duration: 0.3 }}>
          <main className="flex-grow flex flex-col justify-center items-center pt-24 pb-16 px-4 min-h-[calc(100vh-120px)]">
            <h1 className="text-4xl font-bold text-center mb-12">MOSCOW MELLOWS</h1>
            <div className="grid grid-cols-1 md:grid-cols-3 gap-8 max-w-6xl w-full">
              {features.map((feature, index) => (
                <FeatureCard key={index} {...feature} />
              ))}
            </div>
          </main>
          <Footer />
        </motion.div>
      )}
    </>
  );
};

export default PublicHomePage;
================
File: frontend\src\app\(admin)\layout.tsx
"use client";

import { usePathname } from "next/navigation";
import { useAdminAuth } from "@/contexts/AdminAuthContext";
import { ReactNode } from "react";

interface AdminLayoutProps {
  children: ReactNode;
}

export default function AdminLayout({ children }: AdminLayoutProps) {
  const { isAdminAuth } = useAdminAuth();
  const pathname = usePathname();

  // Не показываем текст на странице /admin-login
  const isLoginPage = pathname === "/admin-login";

  return (
    <div className="min-h-screen bg-gray-100">
      {!isAdminAuth && !isLoginPage && (
        <p className="text-center text-red-500 py-4">
          Вход только для администраторов
        </p>
      )}
      {children}
    </div>
  );
}
================
File: frontend\src\app\(admin)\admin-login\page.tsx
"use client";
import InputField from "@/components/common/InputField";
import { ModalButton } from "@/components/common/AuthModal";
import { FaEnvelope, FaLock } from "react-icons/fa";
import { useAdminAuthForm } from "@/hooks/useAdminAuthForm";

export default function AdminLoginPage() {
  
  const {
    formValues,
    error,
    isLoading,
    isSuccess,
    handleChange,
    handleSubmit
  } = useAdminAuthForm({
    initialValues: {
      email: "",
      password: "",
    },
    endpoint: "/admin/login",
    redirectTo: "/admin-profile",
    isLogin: true
  });

  return (
    <div className="flex items-center justify-center min-h-screen bg-gray-50">
      <div className="bg-white p-8 rounded-2xl shadow-lg border border-gray-100 w-full max-w-md">
        {/* <h1 className="text-2xl font-bold mb-6 text-gray-900 tracking-tight">
          Вход для администраторов
        </h1> */}
        <form onSubmit={handleSubmit}>
          <InputField
            type="email"
            value={formValues.email}
            onChange={handleChange}
            placeholder="Email"
            icon={FaEnvelope}
            name="email"
            required
            disabled={isSuccess}
          />
          <InputField
            type="password"
            value={formValues.password}
            onChange={handleChange}
            placeholder="Пароль"
            icon={FaLock}
            name="password"
            required
            disabled={isSuccess}
          />
          {error && (
            <div className="text-red-500 bg-red-50 p-3 rounded-lg border-l-4 border-red-500 text-sm mb-6">
              {error}
            </div>
          )}
          {isSuccess && (
            <div className="text-green-600 bg-green-50 p-3 rounded-lg border-l-4 border-green-500 text-sm mb-6">
              Вход выполнен успешно! Перенаправление...
            </div>
          )}
          <ModalButton 
            type="submit" 
            disabled={isLoading || isSuccess}
          >
            {isLoading ? "Вход..." : (isSuccess ? "Успешно!" : "Войти")}
          </ModalButton>
        </form>
      </div>
    </div>
  );
}
================
File: frontend\src\app\(admin)\admin-profile\page.tsx
"use client";
import { useEffect, useState } from "react";
import { useRouter } from "next/navigation";
import { useAdminAuth } from "@/contexts/AdminAuthContext";
import AdminHeader from "@/components/AdminHeader";
import { FaUser, FaEnvelope, FaCalendarAlt, FaCog } from "react-icons/fa";

export default function AdminProfilePage() {
  const { adminData, isAdminAuth, isLoading, checkAdminAuth } = useAdminAuth();
  const [isInitialized, setIsInitialized] = useState(false);
  const router = useRouter();

  // Инициализация и проверка авторизации
  useEffect(() => {
    const init = async () => {
      try {
        await checkAdminAuth();
      } catch (error) {
        console.error("Ошибка при проверке авторизации:", error);
      } finally {
        setIsInitialized(true);
      }
    };
    
    init();
  }, [checkAdminAuth]);

  // Перенаправление неавторизованных пользователей
  useEffect(() => {
    if (isInitialized && !isLoading && !isAdminAuth) {
      router.push("/admin-login");
    }
  }, [isInitialized, isLoading, isAdminAuth, router]);

  // Показываем спиннер, пока идет инициализация
  if (!isInitialized || isLoading) {
    return (
      <div className="min-h-screen flex items-center justify-center">
        <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-500"></div>
      </div>
    );
  }

  // Если нет авторизации (будет перенаправление)
  if (!isAdminAuth || !adminData) {
    return null;
  }

  return (
    <div className="min-h-screen bg-gray-50">
      <AdminHeader />
      
      <main className="container mx-auto px-4 pt-24 pb-12">
        <div className="max-w-4xl mx-auto">
          <h1 className="text-3xl font-bold mb-8">Профиль администратора</h1>
          
          <div className="bg-white p-6 rounded-lg shadow-md mb-8">
            <div className="flex items-start md:items-center flex-col md:flex-row">
              <div className="w-20 h-20 bg-blue-100 rounded-full flex items-center justify-center mr-6 mb-4 md:mb-0">
                <FaUser className="text-blue-500 text-2xl" />
              </div>
              
              <div className="flex-grow">
                <h2 className="text-2xl font-semibold mb-1">{adminData.fio}</h2>
                <div className="flex items-center text-gray-600 mb-4">
                  <FaEnvelope className="mr-2" />
                  <span>{adminData.email}</span>
                </div>
                
                <div className="bg-blue-50 text-blue-700 px-3 py-1 rounded-full text-sm inline-flex items-center">
                  <FaCog className="mr-1" />
                  Администратор
                </div>
              </div>
            </div>
          </div>
          
          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            <div className="bg-white p-6 rounded-lg shadow-md">
              <h3 className="text-xl font-semibold mb-4 flex items-center">
                <FaCalendarAlt className="mr-2 text-blue-500" />
                Управление мероприятиями
              </h3>
              <p className="text-gray-600 mb-4">
                Создавайте, редактируйте и управляйте мероприятиями на платформе.
              </p>
              <button 
                onClick={() => router.push("/edit-events")}
                className="bg-blue-500 text-white px-4 py-2 rounded-lg hover:bg-blue-600 transition-colors"
              >
                Перейти к мероприятиям
              </button>
            </div>
            
            <div className="bg-white p-6 rounded-lg shadow-md">
              <h3 className="text-xl font-semibold mb-4 flex items-center">
                <FaCog className="mr-2 text-blue-500" />
                Настройки
              </h3>
              <p className="text-gray-600 mb-4">
                Управляйте настройками системы и вашего профиля.
              </p>
              <button 
                onClick={() => router.push("/dashboard")}
                className="bg-blue-500 text-white px-4 py-2 rounded-lg hover:bg-blue-600 transition-colors"
              >
                Перейти в панель управления
              </button>
            </div>
          </div>
        </div>
      </main>
    </div>
  );
}
================
File: frontend\src\app\(admin)\dashboard\page.tsx
"use client";
import { useState, ChangeEvent, useEffect } from "react";
import { useRouter } from "next/navigation";
import InputField from "@/components/common/InputField";
import { FaSearch, FaUsers, FaCalendarAlt, FaPlus } from "react-icons/fa";
import AdminHeader from "@/components/AdminHeader";
import { useAdminAuth } from "@/contexts/AdminAuthContext";

interface User {
  id: number;
  fio: string;
  email: string;
}

interface Event {
  id: number;
  title: string;
  start_date: string;
  location?: string;
  published: boolean;
}

export default function DashboardPage() {
  const [userSearch, setUserSearch] = useState("");
  const [eventSearch, setEventSearch] = useState("");
  const [users, setUsers] = useState<User[]>([]);
  const [events, setEvents] = useState<Event[]>([]);
  const [isLoading, setIsLoading] = useState(false);
  const { isAdminAuth, isLoading: authLoading } = useAdminAuth();
  const router = useRouter();

  useEffect(() => {
    // Перенаправляем неавторизованных пользователей
    if (!authLoading && !isAdminAuth) {
      router.push("/admin-login");
    } else if (isAdminAuth) {
      // Загружаем события при первой загрузке страницы
      fetchEvents();
    }
  }, [isAdminAuth, authLoading, router]);

  const fetchEvents = async () => {
    setIsLoading(true);
    try {
      const token = localStorage.getItem("admin_token");
      
      // Проверяем наличие токена
      if (!token) {
        console.error("Отсутствует токен авторизации");
        setIsLoading(false);
        return;
      }
      
      const response = await fetch("/events", {
        headers: { 
          Authorization: `Bearer ${token}`,
          "Accept": "application/json",
          "Cache-Control": "no-cache"
        },
      });
      
      // Проверяем тип содержимого ответа
      const contentType = response.headers.get("content-type");
      if (!contentType || !contentType.includes("application/json")) {
        console.error("Получен неверный формат ответа:", contentType);
        setEvents([]);
        setIsLoading(false);
        return;
      }
      
      if (response.ok) {
        const data = await response.json();
        setEvents(data);
      } else {
        console.error(`Ошибка API: ${response.status} ${response.statusText}`);
        setEvents([]);
      }
    } catch (err) {
      console.error("Ошибка при загрузке мероприятий:", err);
      setEvents([]);
    } finally {
      setIsLoading(false);
    }
  };

  const handleUserSearch = async () => {
    if (!userSearch.trim()) return;
    
    setIsLoading(true);
    try {
      const token = localStorage.getItem("admin_token");
      
      // Проверяем наличие токена
      if (!token) {
        console.error("Отсутствует токен авторизации");
        setIsLoading(false);
        return;
      }
      
      const response = await fetch(`/admin_edits/users?search=${encodeURIComponent(userSearch)}`, {
        headers: { 
          Authorization: `Bearer ${token}`,
          "Accept": "application/json" 
        },
      });
      
      // Проверяем тип содержимого ответа
      const contentType = response.headers.get("content-type");
      if (!contentType || !contentType.includes("application/json")) {
        console.error("Получен неверный формат ответа:", contentType);
        setUsers([]);
        setIsLoading(false);
        return;
      }
      
      if (response.ok) {
        const data = await response.json();
        setUsers(data);
      } else {
        console.error(`Ошибка API: ${response.status} ${response.statusText}`);
        setUsers([]);
      }
    } catch (err) {
      console.error("Ошибка поиска пользователей:", err);
      setUsers([]);
    } finally {
      setIsLoading(false);
    }
  };

  const handleEventSearch = async () => {
    setIsLoading(true);
    try {
      const token = localStorage.getItem("admin_token");
      
      // Проверяем наличие токена
      if (!token) {
        console.error("Отсутствует токен авторизации");
        setIsLoading(false);
        return;
      }
      
      const url = eventSearch.trim() 
        ? `/events?search=${encodeURIComponent(eventSearch)}`
        : '/events';
        
      const response = await fetch(url, {
        headers: { 
          Authorization: `Bearer ${token}`,
          "Accept": "application/json"
        },
      });
      
      // Проверяем тип содержимого ответа
      const contentType = response.headers.get("content-type");
      if (!contentType || !contentType.includes("application/json")) {
        console.error("Получен неверный формат ответа:", contentType);
        setEvents([]);
        setIsLoading(false);
        return;
      }
      
      if (response.ok) {
        const data = await response.json();
        setEvents(data);
      } else {
        console.error(`Ошибка API: ${response.status} ${response.statusText}`);
        setEvents([]);
      }
    } catch (err) {
      console.error("Ошибка поиска мероприятий:", err);
      setEvents([]);
    } finally {
      setIsLoading(false);
    }
  };

  if (authLoading) {
    return (
      <div className="flex items-center justify-center min-h-screen">
        <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-500"></div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gray-50">
      <AdminHeader />
      
      <main className="container mx-auto px-4 pt-24 pb-12">
        <div className="max-w-6xl mx-auto">
          <div className="flex justify-between items-center mb-8">
            <h1 className="text-3xl font-bold">Панель управления</h1>
            <button 
              onClick={() => router.push("/edit-events?new=true")}
              className="bg-blue-500 text-white px-4 py-2 rounded-lg flex items-center hover:bg-blue-600 transition-colors"
            >
              <FaPlus className="mr-2" />
              Новое мероприятие
            </button>
          </div>
          
          <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
            {/* Управление пользователями */}
            <div className="bg-white p-6 rounded-lg shadow-md">
              <div className="flex items-center mb-6">
                <FaUsers className="text-blue-500 text-xl mr-2" />
                <h2 className="text-xl font-semibold">Пользователи</h2>
              </div>
              
              <div className="mb-6">
                <InputField
                  type="text"
                  value={userSearch}
                  onChange={(e: ChangeEvent<HTMLInputElement>) => setUserSearch(e.target.value)}
                  placeholder="Поиск пользователей..."
                  icon={FaSearch}
                  onBlur={handleUserSearch}
                />
              </div>
              
              {isLoading && users.length === 0 ? (
                <div className="text-center py-4">
                  <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-500 mx-auto"></div>
                </div>
              ) : users.length > 0 ? (
                <div className="overflow-x-auto">
                  <table className="min-w-full divide-y divide-gray-200">
                    <thead>
                      <tr>
                        <th className="px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">ID</th>
                        <th className="px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">ФИО</th>
                        <th className="px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Email</th>
                      </tr>
                    </thead>
                    <tbody className="divide-y divide-gray-200">
                      {users.map((user) => (
                        <tr key={user.id} className="hover:bg-gray-50">
                          <td className="px-4 py-2 whitespace-nowrap text-sm text-gray-900">{user.id}</td>
                          <td className="px-4 py-2 whitespace-nowrap text-sm text-gray-900">{user.fio}</td>
                          <td className="px-4 py-2 whitespace-nowrap text-sm text-gray-900">{user.email}</td>
                        </tr>
                      ))}
                    </tbody>
                  </table>
                </div>
              ) : (
                <p className="text-gray-500 text-center py-4">
                  {userSearch.trim() ? "Пользователи не найдены" : "Введите запрос для поиска пользователей"}
                </p>
              )}
            </div>
            
            {/* Управление мероприятиями */}
            <div className="bg-white p-6 rounded-lg shadow-md">
              <div className="flex items-center mb-6">
                <FaCalendarAlt className="text-blue-500 text-xl mr-2" />
                <h2 className="text-xl font-semibold">Мероприятия</h2>
              </div>
              
              <div className="mb-6">
                <InputField
                  type="text"
                  value={eventSearch}
                  onChange={(e: ChangeEvent<HTMLInputElement>) => setEventSearch(e.target.value)}
                  placeholder="Поиск мероприятий..."
                  icon={FaSearch}
                  onBlur={handleEventSearch}
                />
              </div>
              
              {isLoading && events.length === 0 ? (
                <div className="text-center py-4">
                  <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-500 mx-auto"></div>
                </div>
              ) : events.length > 0 ? (
                <div className="overflow-x-auto">
                  <table className="min-w-full divide-y divide-gray-200">
                    <thead>
                      <tr>
                        <th className="px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">ID</th>
                        <th className="px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Название</th>
                        <th className="px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Статус</th>
                        <th className="px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Действия</th>
                      </tr>
                    </thead>
                    <tbody className="divide-y divide-gray-200">
                      {events.map((event) => (
                        <tr key={event.id} className="hover:bg-gray-50">
                          <td className="px-4 py-2 whitespace-nowrap text-sm text-gray-900">{event.id}</td>
                          <td className="px-4 py-2 whitespace-nowrap text-sm text-gray-900">{event.title}</td>
                          <td className="px-4 py-2 whitespace-nowrap text-sm">
                            {event.published ? (
                              <span className="px-2 py-1 text-xs rounded-full bg-green-100 text-green-700">Опубликовано</span>
                            ) : (
                              <span className="px-2 py-1 text-xs rounded-full bg-yellow-100 text-yellow-700">Черновик</span>
                            )}
                          </td>
                          <td className="px-4 py-2 whitespace-nowrap text-sm">
                            <button 
                              onClick={() => router.push(`/edit-events?event_id=${event.id}`)}
                              className="text-blue-500 hover:text-blue-700"
                            >
                              Редактировать
                            </button>
                          </td>
                        </tr>
                      ))}
                    </tbody>
                  </table>
                </div>
              ) : (
                <p className="text-gray-500 text-center py-4">
                  {eventSearch.trim() ? "Мероприятия не найдены" : "Нет доступных мероприятий"}
                </p>
              )}
            </div>
          </div>
        </div>
      </main>
    </div>
  );
}
================
File: frontend\src\app\(admin)\edit-events\page.tsx
"use client";
import { useState, useEffect, ChangeEvent, FormEvent, useCallback, useMemo } from "react";
import { useRouter, useSearchParams } from "next/navigation";
import InputField from "@/components/common/InputField";
import { ModalButton } from "@/components/common/AuthModal";
import { FaPen, FaCalendar, FaMapMarkerAlt, FaDollarSign, FaImage, FaCheck } from "react-icons/fa";
import AdminHeader from "@/components/AdminHeader";
import { useAdminAuth } from "@/contexts/AdminAuthContext";

interface EventData {
  id?: number;
  title: string;
  description: string;
  start_date: string;
  end_date?: string;
  location?: string;
  image_url?: string;
  price: number;
  published: boolean;
  created_at?: string;
  updated_at?: string;
}

export default function EditEventPage() {
  // Используем useMemo для initialEventState, чтобы он не пересоздавался при каждом рендере
  const initialEventState = useMemo<EventData>(() => ({
    title: "",
    description: "",
    start_date: new Date().toISOString().split('T')[0],
    price: 0,
    published: false
  }), []);

  const [event, setEvent] = useState<EventData>(initialEventState);
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState("");
  const [success, setSuccess] = useState("");
  const [isCreating, setIsCreating] = useState(false);
  const [isInitialized, setIsInitialized] = useState(false);
  
  const router = useRouter();
  const searchParams = useSearchParams();
  const eventId = searchParams.get("event_id");
  const isNew = searchParams.get("new") === "true";
  
  const { isAdminAuth, isLoading: authLoading } = useAdminAuth();

  // Определяем fetchEvent как useCallback, чтобы он сохранял стабильность между рендерами
  const fetchEvent = useCallback(async (id: string) => {
    setIsLoading(true);
    try {
      const token = localStorage.getItem("admin_token");
      
      // Проверяем наличие токена
      if (!token) {
        setError("Отсутствует токен авторизации");
        setTimeout(() => {
          router.push("/admin-login");
        }, 2000);
        return;
      }
      
      const response = await fetch(`/events/${id}`, {
        headers: { 
          Authorization: `Bearer ${token}`,
          "Accept": "application/json",
          "Cache-Control": "no-cache"
        },
      });
      
      // Проверяем тип содержимого ответа
      const contentType = response.headers.get("content-type");
      if (!contentType || !contentType.includes("application/json")) {
        setError(`Получен неверный формат ответа: ${contentType || "неизвестный тип"}`);
        console.error("API вернул неверный формат:", contentType);
        
        setTimeout(() => {
          router.push("/dashboard");
        }, 3000);
        return;
      }
      
      if (!response.ok) {
        setError(`Ошибка API: ${response.status} ${response.statusText}`);
        setTimeout(() => {
          router.push("/dashboard");
        }, 3000);
        return;
      }
      
      const data = await response.json();
      
      // Форматируем даты для input[type="date"]
      if (data.start_date) {
        data.start_date = new Date(data.start_date).toISOString().split('T')[0];
      }
      if (data.end_date) {
        data.end_date = new Date(data.end_date).toISOString().split('T')[0];
      }
      
      setEvent(data);
      setIsCreating(false);
      setIsInitialized(true);
    } catch (err) {
      setError(err instanceof Error ? err.message : "Произошла ошибка при загрузке данных");
      console.error("Ошибка загрузки мероприятия:", err);
      
      // При ошибке загрузки перенаправляем на dashboard
      setTimeout(() => {
        router.push("/dashboard");
      }, 3000);
    } finally {
      setIsLoading(false);
    }
  }, [router]);

  useEffect(() => {
    // Проверка параметров URL
    if (!eventId && !isNew) {
      // Если нет параметров, перенаправляем на dashboard
      router.push("/dashboard");
      return;
    }

    // Проверка авторизации
    if (!authLoading && !isAdminAuth) {
      router.push("/admin-login");
      return;
    }

    // Инициализация для создания нового мероприятия
    if (isNew) {
      setIsCreating(true);
      setEvent(initialEventState);
      setIsInitialized(true);
      return;
    }

    // Загрузка данных существующего мероприятия
    if (eventId) {
      fetchEvent(eventId);
    }
  }, [eventId, isNew, isAdminAuth, authLoading, router, fetchEvent, initialEventState]);

  const handleChange = (e: ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {
    const { name, value, type } = e.target as HTMLInputElement;
    
    if (type === 'checkbox') {
      const target = e.target as HTMLInputElement;
      setEvent({ ...event, [name]: target.checked });
    } else if (type === 'number') {
      setEvent({ ...event, [name]: parseFloat(value) });
    } else {
      setEvent({ ...event, [name]: value });
    }
  };

  const handleSubmit = async (e: FormEvent<HTMLFormElement>) => {
    e.preventDefault();
    setError("");
    setSuccess("");
    setIsLoading(true);
    
    const token = localStorage.getItem("admin_token");
    if (!token) {
      setError("Не авторизован");
      setIsLoading(false);
      return;
    }
    
    // Форматируем данные для отправки
    const eventData = {
      ...event,
      start_date: new Date(event.start_date).toISOString(),
      end_date: event.end_date ? new Date(event.end_date).toISOString() : null
    };
    
    try {
      // Определяем URL и метод в зависимости от того, создаем или редактируем
      const url = isCreating 
        ? `/admin_edits` 
        : `/admin_edits/${eventId}`;
      
      const method = isCreating ? "POST" : "PUT";
      
      const response = await fetch(url, {
        method,
        headers: {
          "Content-Type": "application/json",
          Authorization: `Bearer ${token}`,
        },
        body: JSON.stringify(eventData),
      });
      
      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.detail || "Ошибка сохранения мероприятия");
      }
      
      setSuccess(isCreating ? "Мероприятие успешно создано" : "Мероприятие успешно обновлено");
      
      // Если создали новое мероприятие, перенаправляем на страницу редактирования
      if (isCreating) {
        const data = await response.json();
        setTimeout(() => {
          router.push(`/edit-events?event_id=${data.id}`);
        }, 1500);
      }
    } catch (err) {
      setError(err instanceof Error ? err.message : "Произошла ошибка");
      console.error("Ошибка сохранения мероприятия:", err);
    } finally {
      setIsLoading(false);
    }
  };

  // Показываем индикатор загрузки
  if (authLoading || (isLoading && !isInitialized)) {
    return (
      <div className="min-h-screen flex items-center justify-center">
        <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-500"></div>
      </div>
    );
  }

  // Если нет прав или не инициализировано, не показываем содержимое
  if (!isAdminAuth || !isInitialized) {
    return null;
  }

  return (
    <div className="min-h-screen bg-gray-50">
      <AdminHeader />
      
      <main className="container mx-auto px-4 pt-24 pb-12">
        <div className="max-w-3xl mx-auto">
          <h1 className="text-3xl font-bold mb-8">
            {isCreating ? "Создание нового мероприятия" : "Редактирование мероприятия"}
          </h1>
          
          <div className="bg-white p-6 rounded-lg shadow-md">
            {error && (
              <div className="mb-6 bg-red-50 p-4 rounded-lg border-l-4 border-red-500 text-red-700">
                {error}
              </div>
            )}
            
            {success && (
              <div className="mb-6 bg-green-50 p-4 rounded-lg border-l-4 border-green-500 text-green-700">
                {success}
              </div>
            )}
            
            <form onSubmit={handleSubmit}>
              <div className="mb-6">
                <label className="block text-gray-700 mb-2 font-medium">Название мероприятия</label>
                <InputField
                  type="text"
                  value={event.title}
                  onChange={handleChange}
                  placeholder="Введите название"
                  icon={FaPen}
                  name="title"
                  required
                />
              </div>
              
              <div className="mb-6">
                <label className="block text-gray-700 mb-2 font-medium">Описание</label>
                <textarea
                  value={event.description}
                  onChange={handleChange}
                  placeholder="Введите описание мероприятия"
                  name="description"
                  className="w-full p-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                  rows={5}
                />
              </div>
              
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6 mb-6">
                <div>
                  <label className="block text-gray-700 mb-2 font-medium">Дата начала</label>
                  <InputField
                    type="date"
                    value={event.start_date}
                    onChange={handleChange}
                    placeholder="Дата начала"
                    icon={FaCalendar}
                    name="start_date"
                    required
                  />
                </div>
                <div>
                  <label className="block text-gray-700 mb-2 font-medium">Дата окончания</label>
                  <InputField
                    type="date"
                    value={event.end_date || ""}
                    onChange={handleChange}
                    placeholder="Дата окончания"
                    icon={FaCalendar}
                    name="end_date"
                  />
                </div>
              </div>
              
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6 mb-6">
                <div>
                  <label className="block text-gray-700 mb-2 font-medium">Местоположение</label>
                  <InputField
                    type="text"
                    value={event.location || ""}
                    onChange={handleChange}
                    placeholder="Место проведения"
                    icon={FaMapMarkerAlt}
                    name="location"
                  />
                </div>
                <div>
                  <label className="block text-gray-700 mb-2 font-medium">Цена</label>
                  <InputField
                    type="number"
                    value={event.price.toString()}
                    onChange={handleChange}
                    placeholder="Стоимость"
                    icon={FaDollarSign}
                    name="price"
                    required
                  />
                </div>
              </div>
              
              <div className="mb-6">
                <label className="block text-gray-700 mb-2 font-medium">URL изображения</label>
                <InputField
                  type="text"
                  value={event.image_url || ""}
                  onChange={handleChange}
                  placeholder="URL изображения для мероприятия"
                  icon={FaImage}
                  name="image_url"
                />
              </div>
              
              <div className="mb-6 flex items-center">
                <input
                  type="checkbox"
                  id="published"
                  name="published"
                  checked={event.published}
                  onChange={handleChange}
                  className="w-4 h-4 text-blue-600 bg-gray-100 border-gray-300 rounded focus:ring-blue-500"
                />
                <label htmlFor="published" className="ml-2 text-gray-700">
                  Опубликовать мероприятие
                </label>
              </div>
              
              <div className="flex justify-between">
                <button
                  type="button"
                  onClick={() => router.push("/dashboard")}
                  className="px-4 py-2 border border-gray-300 text-gray-700 rounded-lg hover:bg-gray-50"
                >
                  Отмена
                </button>
                <ModalButton 
                  type="submit"
                  disabled={isLoading}
                >
                  {isLoading ? "Сохранение..." : (
                    <>
                      <FaCheck className="mr-2" />
                      {isCreating ? "Создать мероприятие" : "Сохранить изменения"}
                    </>
                  )}
                </ModalButton>
              </div>
            </form>
          </div>
        </div>
      </main>
    </div>
  );
}
================
File: frontend\src\app\(auth)\layout.tsx
// frontend/src/app/(auth)/layout.tsx
"use client";

import Header from "@/components/Header";

export default function AuthLayout({
  children,
}: {
  children: React.ReactNode;
}) {
  return (
    <>
      <Header />
      <main className="min-h-screen pt-16">
        {children}
      </main>
    </>
  );
}
================
File: frontend\src\app\(auth)\profile\page.tsx
// frontend/src/app/(auth)/profile/page.tsx
"use client";

import React, { useEffect, useState } from "react";
import { useRouter } from "next/navigation";
import Loading from "@/components/Loading";
import { useAuth } from "@/contexts/AuthContext";

const Profile = () => {
  const { isAuth, isLoading, userData, checkAuth } = useAuth();
  const [loadingTimeout, setLoadingTimeout] = useState(false);
  const router = useRouter();

  useEffect(() => {
    if (!isLoading && !isAuth) router.push("/");
    if (isAuth) checkAuth().catch(console.error);
    
    // Устанавливаем таймаут для показа сообщения о долгой загрузке
    const timer = setTimeout(() => {
      if (isLoading || !userData) setLoadingTimeout(true);
    }, 5000);

    return () => clearTimeout(timer);
  }, [isAuth, isLoading, userData, router, checkAuth]);

  if (isLoading && !loadingTimeout) {
    return (
      <div className="min-h-screen">
        <Loading />
      </div>
    );
  }
  
  if (!userData) {
    return (
      <div className="container mx-auto px-4 py-10 mt-16">
        {!loadingTimeout && <Loading />}
        {loadingTimeout && (
          <div className="text-center mt-8 p-6 bg-orange-50 rounded-lg border border-orange-200 shadow-md z-50 relative">
            <p className="text-orange-700 font-medium mb-2 text-lg">Загрузка данных занимает больше времени, чем обычно.</p>
            <p className="text-gray-600 mb-6">Возможно, есть проблемы с соединением или сервером.</p>
            <div className="flex justify-center space-x-4">
              <button 
                onClick={() => {
                  setLoadingTimeout(false);
                  checkAuth();
                }}
                className="px-6 py-2 bg-orange-500 text-white rounded-lg hover:bg-orange-600 transition-colors"
              >
                Попробовать снова
              </button>
              <button 
                onClick={() => router.push("/")}
                className="px-6 py-2 border border-orange-500 text-orange-500 rounded-lg hover:bg-orange-50 transition-colors"
              >
                Вернуться на главную
              </button>
            </div>
          </div>
        )}
      </div>
    );
  }

  return (
    <div className="container mx-auto px-4 py-10 mt-16">
      <h1 className="text-3xl font-bold mb-6">Личный кабинет</h1>
      <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
        <div className="md:col-span-2 bg-white p-6 rounded-lg shadow">
          <div className="flex items-center space-x-4 mb-4">
            <div className="w-20 h-20 bg-orange-100 rounded-full flex items-center justify-center text-orange-500 text-2xl font-bold">
              {userData.fio ? userData.fio.charAt(0).toUpperCase() : userData.email.charAt(0).toUpperCase()}
            </div>
            <div>
              <h2 className="text-xl font-semibold">{userData.fio || "Не указано"}</h2>
              <p className="text-gray-600">{userData.email || "Не указан"}</p>
            </div>
          </div>
          <div className="space-y-2">
            <p><strong>Telegram:</strong> {userData.telegram || "Не указан"}</p>
            <p><strong>WhatsApp:</strong> {userData.whatsapp || "Не указан"}</p>
          </div>
        </div>
        <div className="bg-white p-6 rounded-lg shadow">
          <h3 className="text-lg font-semibold mb-4">Мероприятия</h3>
          <p className="text-gray-500">У вас пока нет зарегистрированных мероприятий.</p>
        </div>
      </div>
    </div>
  );
};

export default Profile;
================
File: frontend\src\app\(public)\layout.tsx
// frontend/src/app/(public)/layout.tsx
"use client";

import Header from "@/components/Header";

export default function PublicLayout({
  children,
}: {
  children: React.ReactNode;
}) {
  return (
    <>
      <Header />
      <main className="min-h-screen pt-16">
        {children}
      </main>
    </>
  );
}
================
File: frontend\src\app\(public)\page.tsx
// // frontend/src/app/(public)/page.tsx
// import React from 'react';
// import Link from 'next/link';
// import Header from '@/components/Header';
// import Footer from '@/components/Footer';

// export default function PublicHomePage() {
//   return (
//     <>
//       <Header />
      
//       {/* Главный контент с отступом для фиксированного хедера */}
//       <main className="flex-grow flex flex-col justify-center items-center pt-24 pb-16 px-4 min-h-[calc(100vh-120px)]">
//         <h1 className="text-4xl font-bold text-center mb-12">Добро пожаловать в Moscow Mellows</h1>
        
//         <div className="grid grid-cols-1 md:grid-cols-3 gap-8 max-w-6xl w-full">
//           {/* Карточка регистрации */}
//           <Link href="/registration" className="group">
//             <div className="bg-white rounded-xl p-6 shadow-md hover:shadow-xl transition-all duration-300 transform group-hover:-translate-y-1 h-full flex flex-col">
//               <div className="w-14 h-14 bg-orange-100 rounded-full flex items-center justify-center mb-5">
//                 <svg className="w-8 h-8 text-orange-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
//                   <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M18 9v3m0 0v3m0-3h3m-3 0h-3m-2-5a4 4 0 11-8 0 4 4 0 018 0zM3 20a6 6 0 0112 0v1H3v-1z" />
//                 </svg>
//               </div>
//               <h3 className="text-xl font-bold mb-4">Регистрация</h3>
//               <p className="text-gray-700 flex-grow">
//                 Зарегистрируйтесь на нашей платформе, чтобы получить доступ ко всем возможностям и событиям.
//               </p>
//               <div className="mt-4 text-orange-500 group-hover:text-orange-600 flex items-center">
//                 Зарегистрироваться
//                 <svg className="w-5 h-5 ml-2 transform group-hover:translate-x-1 transition-transform duration-300" fill="none" stroke="currentColor" viewBox="0 0 24 24">
//                   <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M14 5l7 7m0 0l-7 7m7-7H3" />
//                 </svg>
//               </div>
//             </div>
//           </Link>
          
//           {/* Карточка мероприятий */}
//           <Link href="/events" className="group">
//             <div className="bg-white rounded-xl p-6 shadow-md hover:shadow-xl transition-all duration-300 transform group-hover:-translate-y-1 h-full flex flex-col">
//               <div className="w-14 h-14 bg-orange-100 rounded-full flex items-center justify-center mb-5">
//                 <svg className="w-8 h-8 text-orange-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
//                   <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z" />
//                 </svg>
//               </div>
//               <h3 className="text-xl font-bold mb-4">Мероприятия</h3>
//               <p className="text-gray-700 flex-grow">
//                 Просмотрите список предстоящих мероприятий и выберите те, которые вам интересны.
//               </p>
//               <div className="mt-4 text-orange-500 group-hover:text-orange-600 flex items-center">
//                 Смотреть мероприятия
//                 <svg className="w-5 h-5 ml-2 transform group-hover:translate-x-1 transition-transform duration-300" fill="none" stroke="currentColor" viewBox="0 0 24 24">
//                   <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M14 5l7 7m0 0l-7 7m7-7H3" />
//                 </svg>
//               </div>
//             </div>
//           </Link>
          
//           {/* Карточка медиа */}
//           <Link href="/media" className="group">
//             <div className="bg-white rounded-xl p-6 shadow-md hover:shadow-xl transition-all duration-300 transform group-hover:-translate-y-1 h-full flex flex-col">
//               <div className="w-14 h-14 bg-orange-100 rounded-full flex items-center justify-center mb-5">
//                 <svg className="w-8 h-8 text-orange-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
//                   <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M15 10l4.553-2.276A1 1 0 0121 8.618v6.764a1 1 0 01-1.447.894L15 14M5 18h8a2 2 0 002-2V8a2 2 0 00-2-2H5a2 2 0 00-2 2v8a2 2 0 002 2z" />
//                 </svg>
//               </div>
//               <h3 className="text-xl font-bold mb-4">Медиа</h3>
//               <p className="text-gray-700 flex-grow">
//                 Ознакомьтесь с фото и видео материалами с прошедших мероприятий.
//               </p>
//               <div className="mt-4 text-orange-500 group-hover:text-orange-600 flex items-center">
//                 Смотреть медиа
//                 <svg className="w-5 h-5 ml-2 transform group-hover:translate-x-1 transition-transform duration-300" fill="none" stroke="currentColor" viewBox="0 0 24 24">
//                   <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M14 5l7 7m0 0l-7 7m7-7H3" />
//                 </svg>
//               </div>
//             </div>
//           </Link>
//         </div>
//       </main>
      
//       <Footer />
//     </>
//   );
// }
================
File: frontend\src\app\(public)\events\page.tsx
// frontend/src/app/(public)/events/page.tsx
import React from 'react';
import Footer from '@/components/Footer';
import Link from 'next/link';

export default function EventsPage() {
  return (
    <>
      <main className="flex-grow flex flex-col justify-center items-center pt-24 pb-16 px-4 min-h-[calc(100vh-120px)]">
        <div className="max-w-md w-full bg-white rounded-xl shadow-md overflow-hidden p-8 text-center">
          <div className="w-20 h-20 bg-orange-100 rounded-full flex items-center justify-center mx-auto mb-6">
            <svg className="w-12 h-12 text-orange-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z" />
            </svg>
          </div>
          
          <h1 className="text-2xl font-bold mb-4">Страница мероприятий</h1>
          <p className="text-gray-600 mb-6">
            Эта страница находится в разработке. Скоро здесь появится список доступных мероприятий.
          </p>
          
          <Link 
            href="/" 
            className="inline-flex items-center px-4 py-2 bg-orange-500 text-white rounded-lg hover:bg-orange-600 transition-colors duration-300"
          >
            <svg className="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M10 19l-7-7m0 0l7-7m-7 7h18" />
            </svg>
            Вернуться на главную
          </Link>
        </div>
      </main>
      
      <Footer />
    </>
  );
}
================
File: frontend\src\app\(public)\login\page.tsx
import React from 'react';
import Header from '@/components/Header';
import Footer from '@/components/Footer';

export default function LoginPage() {
  return (
    <>
      <Header />
      <main className="min-h-screen flex items-center justify-center bg-gray-50">
        <div className="bg-white p-8 rounded-lg shadow-md max-w-md w-full">
          <h1 className="text-2xl font-bold text-center mb-6">Вход в систему</h1>
          
          <form className="space-y-4">
            <div>
              <label htmlFor="email" className="block text-sm font-medium text-gray-700 mb-1">
                Email
              </label>
              <input
                type="email"
                id="email"
                name="email"
                className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-blue-500 focus:border-blue-500"
                placeholder="Введите ваш email"
                required
              />
            </div>
            
            <div>
              <label htmlFor="password" className="block text-sm font-medium text-gray-700 mb-1">
                Пароль
              </label>
              <input
                type="password"
                id="password"
                name="password"
                className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-blue-500 focus:border-blue-500"
                placeholder="Введите ваш пароль"
                required
              />
            </div>
            
            <button
              type="submit"
              className="w-full bg-blue-600 text-white py-2 px-4 rounded-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-opacity-50 transition-colors"
            >
              Войти
            </button>
          </form>
        </div>
      </main>
      <Footer />
    </>
  );
}
================
File: frontend\src\app\(public)\media\page.tsx
// frontend/src/app/(public)/media/page.tsx
import React from 'react';
import Header from '@/components/Header';
import Footer from '@/components/Footer';
import Link from 'next/link';

export default function MediaPage() {
  return (
    <>
      <Header />
      
      <main className="flex-grow flex flex-col justify-center items-center pt-24 pb-16 px-4 min-h-[calc(100vh-120px)]">
        <div className="max-w-md w-full bg-white rounded-xl shadow-md overflow-hidden p-8 text-center">
          <div className="w-20 h-20 bg-orange-100 rounded-full flex items-center justify-center mx-auto mb-6">
            <svg className="w-12 h-12 text-orange-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M15 10l4.553-2.276A1 1 0 0121 8.618v6.764a1 1 0 01-1.447.894L15 14M5 18h8a2 2 0 002-2V8a2 2 0 00-2-2H5a2 2 0 00-2 2v8a2 2 0 002 2z" />
            </svg>
          </div>
          
          <h1 className="text-2xl font-bold mb-4">Страница медиа</h1>
          <p className="text-gray-600 mb-6">
            Эта страница находится в разработке. Скоро здесь появится фото и видео галерея с мероприятий.
          </p>
          
          <Link 
            href="/" 
            className="inline-flex items-center px-4 py-2 bg-orange-500 text-white rounded-lg hover:bg-orange-600 transition-colors duration-300"
          >
            <svg className="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M10 19l-7-7m0 0l7-7m-7 7h18" />
            </svg>
            Вернуться на главную
          </Link>
        </div>
      </main>
      
      <Footer />
    </>
  );
}
================
File: frontend\src\app\(public)\partner\page.tsx
// frontend/src/app/(public)/partner/page.tsx
import React from 'react';
import Header from '@/components/Header';
import Footer from '@/components/Footer';
import Link from 'next/link';

export default function PartnerPage() {
  return (
    <>
      <Header />
      
      <main className="flex-grow flex flex-col justify-center items-center pt-24 pb-16 px-4 min-h-[calc(100vh-120px)]">
        <div className="max-w-md w-full bg-white rounded-xl shadow-md overflow-hidden p-8 text-center">
          <div className="w-20 h-20 bg-orange-100 rounded-full flex items-center justify-center mx-auto mb-6">
            <svg className="w-12 h-12 text-orange-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M17 20h5v-2a3 3 0 00-5.356-1.857M17 20H7m10 0v-2c0-.656-.126-1.283-.356-1.857M7 20H2v-2a3 3 0 015.356-1.857M7 20v-2c0-.656.126-1.283.356-1.857m0 0a5.002 5.002 0 019.288 0M15 7a3 3 0 11-6 0 3 3 0 016 0zm6 3a2 2 0 11-4 0 2 2 0 014 0zM7 10a2 2 0 11-4 0 2 2 0 014 0z" />
            </svg>
          </div>
          
          <h1 className="text-2xl font-bold mb-4">Стать партнером</h1>
          <p className="text-gray-600 mb-6">
            Эта страница находится в разработке. Скоро здесь появится форма для партнерского сотрудничества.
          </p>
          
          <Link 
            href="/" 
            className="inline-flex items-center px-4 py-2 bg-orange-500 text-white rounded-lg hover:bg-orange-600 transition-colors duration-300"
          >
            <svg className="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M10 19l-7-7m0 0l7-7m-7 7h18" />
            </svg>
            Вернуться на главную
          </Link>
        </div>
      </main>
      
      <Footer />
    </>
  );
}
================
File: frontend\src\app\(public)\registration\page.tsx
import React from 'react';
import Header from '@/components/Header';
import Footer from '@/components/Footer';
import Link from 'next/link';

export default function RegistrationPage() {
  return (
    <div className="min-h-screen flex flex-col bg-white">
      <Header />
      
      <main className="flex-grow flex flex-col justify-center items-center pt-24 pb-16 px-4">
        <div className="max-w-md w-full bg-white rounded-xl shadow-md overflow-hidden p-8 text-center">
          <div className="w-20 h-20 bg-orange-100 rounded-full flex items-center justify-center mx-auto mb-6">
            <svg className="w-12 h-12 text-orange-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M18 9v3m0 0v3m0-3h3m-3 0h-3m-2-5a4 4 0 11-8 0 4 4 0 018 0zM3 20a6 6 0 0112 0v1H3v-1z" />
            </svg>
          </div>
          
          <h1 className="text-2xl font-bold mb-4">Страница регистрации</h1>
          <p className="text-gray-600 mb-6">
            Эта страница находится в разработке. Скоро здесь появится форма регистрации.
          </p>
          
          <Link 
            href="/" 
            className="inline-flex items-center px-4 py-2 bg-orange-500 text-white rounded-lg hover:bg-orange-600 transition-colors duration-300"
          >
            <svg className="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M10 19l-7-7m0 0l7-7m-7 7h18" />
            </svg>
            Вернуться на главную
          </Link>
        </div>
      </main>
      
      <Footer />
    </div>
  );
}
================
File: frontend\src\app\event\[id]\page.tsx
// frontend/src/app/events/[id]/page.tsx
import Header from "@/components/Header";
import Footer from "@/components/Footer";
import EventRegistration from "@/components/EventRegistration";
import Media from "@/components/Media";
import { notFound } from "next/navigation";

interface EventData {
  id: number;
  title: string;
  description?: string;
  status: "draft" | "registration_open" | "registration_closed" | "completed";
  ticket_type?: { name: string; price: number; available_quantity: number };
}

async function fetchEvent(id: string): Promise<EventData> {
  const res = await fetch(`http://localhost:8001/events/${id}`, {
    cache: "no-store",
  });
  if (!res.ok) throw new Error("Event not found");
  return res.json();
}

export default async function EventPage({ params }: { params: { id: string } }) {
  let event: EventData;
  try {
    event = await fetchEvent(params.id);
  } catch (error) {
    console.error("Ошибка при загрузке мероприятия:", error);
    return notFound();
  }

  return (
    <div className="min-h-screen flex flex-col">
      <Header />
      <main className="flex-grow container mx-auto px-4 py-8">
        <h1 className="text-3xl font-bold mb-4">{event.title}</h1>
        <p className="text-gray-600 mb-6">{event.description || "Нет описания"}</p>

        {event.status === "registration_open" && (
          <div className="mb-6">
            <h2 className="text-xl font-semibold mb-2">Регистрация открыта</h2>
            <EventRegistration eventId={event.id} />
          </div>
        )}

        {event.status === "registration_closed" && (
          <p className="text-gray-500">Регистрация на мероприятие закрыта.</p>
        )}

        {event.status === "completed" && (
          <div className="mb-6">
            <h2 className="text-xl font-semibold mb-2">Мероприятие завершено</h2>
            <Media />
          </div>
        )}

        {event.status === "draft" && (
          <p className="text-gray-500">
            Мероприятие находится в черновике и недоступно для просмотра.
          </p>
        )}
      </main>
      <Footer />
    </div>
  );
}
================
File: frontend\src\components\AdminHeader.tsx
// frontend/src/components/AdminHeader.tsx
"use client";

import React, { useState, useEffect } from "react";
import Link from "next/link";
import { useRouter } from "next/navigation";
import { motion, AnimatePresence } from "framer-motion";
import Logo from "./Logo";
import { useAdminAuth } from "@/contexts/AdminAuthContext";
import { FaTachometerAlt, FaSignOutAlt, FaBars, FaTimes, FaUser } from "react-icons/fa";

interface NavItem {
  href: string;
  label: string;
  icon: React.ElementType;
}

const AdminHeader: React.FC = () => {
  const { isAdminAuth, logoutAdmin, adminData } = useAdminAuth();
  const [isScrolled, setIsScrolled] = useState(false);
  const [isMobileMenuOpen, setIsMobileMenuOpen] = useState(false);
  const router = useRouter();

  useEffect(() => {
    const handleScroll = () => setIsScrolled(window.scrollY > 20);
    window.addEventListener("scroll", handleScroll);
    return () => window.removeEventListener("scroll", handleScroll);
  }, []);

  const handleLogout = () => {
    logoutAdmin();
    router.push("/admin-login");
  };

  const toggleMobileMenu = () => setIsMobileMenuOpen((prev) => !prev);

  const adminNavItems: NavItem[] = [
    { href: "/admin-profile", label: "Профиль", icon: FaUser },
    { href: "/dashboard", label: "Панель управления", icon: FaTachometerAlt }
  ];

  const menuVariants = {
    closed: { opacity: 0, y: -20 },
    open: { opacity: 1, y: 0 },
  };

  return (
    <header
      className={`fixed top-0 left-0 right-0 z-30 transition-all duration-300 ${
        isScrolled ? "bg-white/95 backdrop-blur-sm shadow-lg py-3" : "bg-white/90 py-4"
      }`}
    >
      <div className="container mx-auto px-4 md:px-6 flex items-center justify-between">
        <Link href="/admin-profile" className="transition-transform duration-300 hover:scale-105 flex items-center">
          <Logo />
          <span className="ml-2 text-orange-500 font-semibold">Админ-панель</span>
        </Link>

        {/* Мобильное меню */}
        <div className="flex items-center md:hidden">
          {isAdminAuth && (
            <Link href="/admin-profile" className="mr-4 text-blue-500 hover:text-blue-600">
              <div className="w-8 h-8 bg-blue-100 rounded-full flex items-center justify-center">
                <FaUser className="h-4 w-4" />
              </div>
            </Link>
          )}
          <button onClick={toggleMobileMenu} className="text-gray-700 hover:text-blue-500">
            {isMobileMenuOpen ? <FaTimes className="h-6 w-6" /> : <FaBars className="h-6 w-6" />}
          </button>
          <AnimatePresence>
            {isMobileMenuOpen && (
              <motion.div
                className="fixed inset-0 bg-white z-50 flex flex-col items-center justify-center"
                initial={{ opacity: 0 }}
                animate={{ opacity: 1 }}
                exit={{ opacity: 0 }}
              >
                <button 
                  onClick={toggleMobileMenu}
                  className="absolute top-4 right-4 text-gray-500 hover:text-blue-500"
                >
                  <FaTimes className="h-8 w-8" />
                </button>
                <motion.ul
                  className="flex flex-col items-center space-y-6 text-xl"
                  variants={menuVariants}
                  initial="closed"
                  animate="open"
                  exit="closed"
                >
                  {adminNavItems.map((item, index) => (
                    <motion.li key={index} whileHover={{ scale: 1.05 }} whileTap={{ scale: 0.95 }}>
                      <Link 
                        href={item.href} 
                        className="text-gray-800 hover:text-blue-500 flex items-center"
                        onClick={() => setIsMobileMenuOpen(false)}
                      >
                        <item.icon className="mr-2" />
                        {item.label}
                      </Link>
                    </motion.li>
                  ))}
                  <motion.li whileHover={{ scale: 1.05 }} whileTap={{ scale: 0.95 }}>
                    <button
                      onClick={() => {
                        handleLogout();
                        setIsMobileMenuOpen(false);
                      }}
                      className="text-gray-800 hover:text-blue-500 flex items-center"
                    >
                      <FaSignOutAlt className="mr-2" />
                      Выйти
                    </button>
                  </motion.li>
                </motion.ul>
              </motion.div>
            )}
          </AnimatePresence>
        </div>

        {/* Десктопная навигация */}
        <div className="hidden md:flex items-center space-x-4">
          {isAdminAuth ? (
            <>
              <nav className="mr-4">
                <ul className="flex space-x-6">
                  {adminNavItems.map((item, index) => (
                    <li key={index}>
                      <Link 
                        href={item.href} 
                        className="text-gray-600 hover:text-blue-500 flex items-center"
                      >
                        <item.icon className="mr-2" />
                        {item.label}
                      </Link>
                    </li>
                  ))}
                </ul>
              </nav>
              
              {adminData && (
                <div className="flex items-center mr-4 text-gray-600">
                  <div className="w-8 h-8 bg-blue-100 rounded-full flex items-center justify-center mr-2">
                    <FaUser className="h-4 w-4 text-blue-500" />
                  </div>
                  <span className="text-sm font-medium truncate max-w-[120px]">{adminData.fio}</span>
                </div>
              )}
              
              <button 
                onClick={handleLogout} 
                className="px-4 py-2 bg-blue-500 text-white rounded-lg hover:bg-blue-600 transition-all duration-300 flex items-center"
              >
                <FaSignOutAlt className="mr-2" />
                Выйти
              </button>
            </>
          ) : (
            <Link
              href="/admin-login"
              className="px-4 py-2 bg-blue-500 text-white rounded-lg hover:bg-blue-600 transition-all duration-300"
            >
              Войти
            </Link>
          )}
        </div>
      </div>
    </header>
  );
};

export default AdminHeader;
================
File: frontend\src\components\EditEventForm.tsx
// frontend/src/components/EditEventForm.tsx
"use client";

import { useState, useEffect } from "react";
import { useAdminAuth } from "@/contexts/AdminAuthContext";
import InputField from "./common/InputField";
import { FaPencilAlt } from "react-icons/fa";

interface EventData {
  id: number;
  title: string;
  description?: string;
  status: string;
  start_date: string;
  end_date?: string;
  location?: string;
  image_url?: string;
  price: number;
  published: boolean;
  ticket_type?: { name: string; price: number; available_quantity: number; free_registration: boolean };
}

const EditEventForm = () => {
  const { isAdminAuth, adminData } = useAdminAuth();
  const [events, setEvents] = useState<EventData[]>([]);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    if (!isAdminAuth || !adminData) return;

    const fetchEvents = async () => {
      setLoading(true);
      try {
        const token = localStorage.getItem("admin_token");
        const response = await fetch("http://localhost:8001/events", {
          headers: {
            Authorization: `Bearer ${token}`,
            "Cache-Control": "no-store",
          },
        });
        if (response.ok) {
          const data = await response.json();
          setEvents(data);
        } else {
          setError("Не удалось загрузить мероприятия");
        }
      } catch (err) {
        setError(`Произошла ошибка при загрузке мероприятий: ${err instanceof Error ? err.message : "Неизвестная ошибка"}`);
      } finally {
        setLoading(false);
      }
    };

    fetchEvents();
  }, [isAdminAuth, adminData]);

  const updateEvent = async (eventId: number, updatedData: Partial<EventData>) => {
    setLoading(true);
    setError(null);

    try {
      const token = localStorage.getItem("admin_token");
      const response = await fetch(`http://localhost:8001/admin_edits/${eventId}`, {
        method: "PUT",
        headers: {
          "Content-Type": "application/json",
          Authorization: `Bearer ${token}`,
        },
        body: JSON.stringify(updatedData),
      });

      if (response.ok) {
        const updatedEvent = await response.json();
        setEvents((prev) =>
          prev.map((e) => (e.id === eventId ? updatedEvent : e))
        );
      } else {
        const errorData = await response.json();
        setError(errorData.detail || "Ошибка при обновлении мероприятия");
      }
    } catch (err) {
      setError(`Произошла ошибка при обновлении: ${err instanceof Error ? err.message : "Неизвестная ошибка"}`);
    } finally {
      setLoading(false);
    }
  };

  if (!isAdminAuth || !adminData) {
    return <p className="text-red-500">Доступ только для администраторов</p>;
  }

  return (
    <div>
      {loading && <p>Загрузка...</p>}
      {error && (
        <div className="text-red-500 bg-red-50 p-2 rounded-lg mb-4">{error}</div>
      )}
      <h1 className="text-2xl font-bold mb-4">Редактирование мероприятий</h1>
      {events.length === 0 ? (
        <p>Нет мероприятий для редактирования</p>
      ) : (
        events.map((event) => (
          <div key={event.id} className="card p-4 mb-4">
            <InputField
              type="text"
              value={event.title}
              onChange={(e) => updateEvent(event.id, { title: e.target.value })}
              placeholder="Название мероприятия"
              icon={FaPencilAlt}
              name="title"
            />
            <select
              value={event.status}
              onChange={(e) => updateEvent(event.id, { status: e.target.value })}
              className="form-input mt-2"
            >
              <option value="draft">Черновик</option>
              <option value="registration_open">Регистрация открыта</option>
              <option value="registration_closed">Регистрация закрыта</option>
              <option value="completed">Завершено</option>
            </select>
          </div>
        ))
      )}
    </div>
  );
};

export default EditEventForm;
================
File: frontend\src\components\EventRegistration.tsx
// frontend/src/components/EventRegistration.tsx
"use client";

import React, { useState } from "react";
import { useAuth } from "@/contexts/AuthContext";

interface EventRegistrationProps {
  eventId: number;
}

const EventRegistration: React.FC<EventRegistrationProps> = ({ eventId }) => {
  const { userData, isAuth } = useAuth();
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [success, setSuccess] = useState(false);

  const handleRegister = async () => {
    if (!isAuth || !userData) {
      setError("Пожалуйста, авторизуйтесь для регистрации на мероприятие.");
      return;
    }

    setLoading(true);
    setError(null);
    setSuccess(false);

    try {
      const token = localStorage.getItem("token");
      const response = await fetch("http://localhost:8000/register", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          Authorization: `Bearer ${token}`,
        },
        body: JSON.stringify({
          event_id: eventId,
          user_id: userData.id,
        }),
      });

      if (response.ok) {
        setSuccess(true);
      } else {
        const errorData = await response.json();
        setError(errorData.detail || "Ошибка при регистрации.");
      }
    } catch (err) {
      setError("Произошла ошибка при регистрации. Попробуйте позже.");
      console.error(err);
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="mt-4">
      {error && (
        <div className="text-red-500 bg-red-50 p-2 rounded-lg mb-4">{error}</div>
      )}
      {success ? (
        <div className="text-green-600 bg-green-50 p-2 rounded-lg">
          Вы успешно зарегистрированы на мероприятие!
        </div>
      ) : (
        <button
          onClick={handleRegister}
          disabled={loading}
          className={`btn btn-primary ${loading ? "opacity-50 cursor-not-allowed" : ""}`}
        >
          {loading ? "Регистрация..." : "Зарегистрироваться"}
        </button>
      )}
    </div>
  );
};

export default EventRegistration;
================
File: frontend\src\components\Events.tsx
"use client"

import React, { useState } from 'react';
import Image from 'next/image';

// Моковые данные для событий
const eventCategories = ["Все", "Концерты", "Выставки", "Мастер-классы", "Фестивали"];

const eventsList = [
  {
    id: 1,
    title: "Джазовый вечер в центре города",
    category: "Концерты",
    date: "15 Мая, 2025",
    time: "19:00",
    location: "Джаз-клуб 'Мелодия'",
    price: "1200 ₽",
    image: "https://images.unsplash.com/photo-1511735111819-9a3f7709049c?ixlib=rb-4.0.3&auto=format&fit=crop&w=600&q=80"
  },
  {
    id: 2,
    title: "Выставка современного искусства",
    category: "Выставки",
    date: "20 Мая, 2025",
    time: "10:00 - 20:00",
    location: "Галерея 'Арт-Москва'",
    price: "800 ₽",
    image: "https://images.unsplash.com/photo-1594122230689-45899d9e6f69?ixlib=rb-4.0.3&auto=format&fit=crop&w=600&q=80"
  },
  {
    id: 3,
    title: "Кулинарный мастер-класс: итальянская кухня",
    category: "Мастер-классы",
    date: "22 Мая, 2025",
    time: "14:00",
    location: "Кулинарная студия 'Гурман'",
    price: "3500 ₽",
    image: "https://images.unsplash.com/photo-1577219491135-ce391730fb2c?ixlib=rb-4.0.3&auto=format&fit=crop&w=600&q=80"
  },
  {
    id: 4,
    title: "Фестиваль уличной еды",
    category: "Фестивали",
    date: "28-30 Мая, 2025",
    time: "12:00 - 22:00",
    location: "Парк Горького",
    price: "Вход свободный",
    image: "https://images.unsplash.com/photo-1504674900247-0877df9cc836?ixlib=rb-4.0.3&auto=format&fit=crop&w=600&q=80"
  },
];

const Events = () => {
  const [activeCategory, setActiveCategory] = useState("Все");
  const [isHovered, setIsHovered] = useState<number | null>(null);

  const filteredEvents = activeCategory === "Все" 
    ? eventsList 
    : eventsList.filter(event => event.category === activeCategory);

  return (
    <section className="py-20 bg-white">
      <div className="container mx-auto px-4 md:px-6">
        <div className="text-center mb-10">
          <h2 className="text-3xl font-bold mb-3">Предстоящие <span className="text-blue-600">мероприятия</span></h2>
          <p className="text-gray-600 max-w-2xl mx-auto">
            Откройте для себя разнообразные мероприятия, которые помогут вам насладиться городской жизнью и расширить круг общения.
          </p>
        </div>
        
        {/* Категории событий */}
        <div className="flex flex-wrap justify-center gap-2 mb-10">
          {eventCategories.map((category) => (
            <button
              key={category}
              onClick={() => setActiveCategory(category)}
              className={`px-4 py-2 rounded-full transition-all duration-300 text-sm font-medium ${
                activeCategory === category
                  ? "bg-blue-600 text-white shadow-md"
                  : "bg-gray-100 text-gray-700 hover:bg-gray-200"
              }`}
            >
              {category}
            </button>
          ))}
        </div>
        
        {/* Список событий */}
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
          {filteredEvents.map((event) => (
            <div 
              key={event.id}
              className="bg-white rounded-xl overflow-hidden shadow-md hover:shadow-xl transition-all duration-500 transform hover:-translate-y-1"
              onMouseEnter={() => setIsHovered(event.id)}
              onMouseLeave={() => setIsHovered(null)}
            >
              <div className="relative overflow-hidden h-48">
                <div className="relative w-full h-full">
                  <Image 
                    src={event.image} 
                    alt={event.title}
                    fill
                    sizes="(max-width: 768px) 100vw, (max-width: 1200px) 50vw, 25vw"
                    className={`object-cover transition-transform duration-700 ease-in-out ${
                      isHovered === event.id ? "scale-110" : "scale-100"
                    }`}
                  />
                </div>
                <div className="absolute top-0 right-0 bg-blue-600 text-white text-xs font-bold px-3 py-1 m-2 rounded-full z-10">
                  {event.category}
                </div>
              </div>
              <div className="p-5">
                <div className="flex items-center mb-2 text-sm text-gray-500">
                  <svg className="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z" />
                  </svg>
                  {event.date} • {event.time}
                </div>
                <h3 className="text-lg font-bold mb-2 line-clamp-2">{event.title}</h3>
                <div className="flex items-center mb-3 text-sm text-gray-500">
                  <svg className="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z" />
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M15 11a3 3 0 11-6 0 3 3 0 016 0z" />
                  </svg>
                  {event.location}
                </div>
                <div className="flex justify-between items-center">
                  <div className="font-bold">{event.price}</div>
                  <button className="inline-flex items-center text-sm font-medium text-blue-600 hover:text-blue-800 transition-colors duration-300">
                    Подробнее
                    <svg className="w-4 h-4 ml-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M14 5l7 7m0 0l-7 7m7-7H3" />
                    </svg>
                  </button>
                </div>
              </div>
            </div>
          ))}
        </div>
        
        {/* Кнопка "Показать больше" */}
        <div className="text-center mt-12">
          <button className="inline-flex items-center px-6 py-3 bg-white border border-blue-600 text-blue-600 font-medium rounded-lg hover:bg-blue-50 transition-colors duration-300">
            Все мероприятия
            <svg className="w-5 h-5 ml-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M17 8l4 4m0 0l-4 4m4-4H3" />
            </svg>
          </button>
        </div>
      </div>
    </section>
  );
};

export default Events;
================
File: frontend\src\components\Footer.tsx
"use client";

import React from 'react';
import Link from 'next/link';

const Footer = () => {
  return (
    <footer className="bg-white pt-12 pb-8 border-t border-gray-100 shadow-inner">
      <div className="container mx-auto px-4 md:px-6">
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8 mb-8 justify-content-center">

          {/* Первая колонка - Быстрые ссылки */}
          <div className="flex flex-col items-center">
            <h3 className="text-lg font-bold mb-4">Быстрые ссылки</h3>
            <ul className="space-y-2">
              <li>
                <Link href="/" className="text-gray-600 hover:text-orange-500 transition-colors duration-300">
                  Главная
                </Link>
              </li>
              <li>
                <Link href="/events" className="text-gray-600 hover:text-orange-500 transition-colors duration-300">
                  Мероприятия
                </Link>
              </li>
              <li>
                <Link href="/media" className="text-gray-600 hover:text-orange-500 transition-colors duration-300">
                  Медиа
                </Link>
              </li>
              <li>
                <Link href="/partner" className="text-gray-600 hover:text-orange-500 transition-colors duration-300">
                  Стать партнером
                </Link>
              </li>
            </ul>
          </div>

          {/* Вторпя колонка - О нас */}
          <div className="flex flex-col items-center">
            <h3 className="text-lg font-bold mb-4">Moscow Mellows</h3>
            <p className="text-gray-600 mb-4 text-center">
              Vrindavan в центре Москвы.<br/>Присоединяйтесь к нам!
            </p>
            <div className="flex space-x-4">
              <a 
                href="https://instagram.com" 
                target="_blank" 
                rel="noopener noreferrer"
                className="text-gray-500 hover:text-pink-600 transition-colors duration-300"
                aria-label="Instagram"
              >
                <svg className="w-6 h-6" fill="currentColor" viewBox="0 0 24 24">
                  <path d="M12 2.163c3.204 0 3.584.012 4.85.07 3.252.148 4.771 1.691 4.919 4.919.058 1.265.069 1.645.069 4.849 0 3.205-.012 3.584-.069 4.849-.149 3.225-1.664 4.771-4.919 4.919-1.266.058-1.644.07-4.85.07-3.204 0-3.584-.012-4.849-.07-3.26-.149-4.771-1.699-4.919-4.92-.058-1.265-.07-1.644-.07-4.849 0-3.204.013-3.583.07-4.849.149-3.227 1.664-4.771 4.919-4.919 1.266-.057 1.645-.069 4.849-.069zM12 0C8.741 0 8.333.014 7.053.072 2.695.272.273 2.69.073 7.052.014 8.333 0 8.741 0 12c0 3.259.014 3.668.072 4.948.2 4.358 2.618 6.78 6.98 6.98C8.333 23.986 8.741 24 12 24c3.259 0 3.668-.014 4.948-.072 4.354-.2 6.782-2.618 6.979-6.98.059-1.28.073-1.689.073-4.948 0-3.259-.014-3.667-.072-4.947-.196-4.354-2.617-6.78-6.979-6.98C15.668.014 15.259 0 12 0zm0 5.838a6.162 6.162 0 100 12.324 6.162 6.162 0 000-12.324zM12 16a4 4 0 110-8 4 4 0 010 8zm6.406-11.845a1.44 1.44 0 100 2.881 1.44 1.44 0 000-2.881z"/>
                </svg>
              </a>
              <a 
                href="https://t.me" 
                target="_blank" 
                rel="noopener noreferrer"
                className="text-gray-500 hover:text-blue-500 transition-colors duration-300"
                aria-label="Telegram"
              >
                <svg className="w-6 h-6" fill="currentColor" viewBox="0 0 24 24">
                  <path d="M11.944 0A12 12 0 0 0 0 12a12 12 0 0 0 12 12 12 12 0 0 0 12-12A12 12 0 0 0 12 0a12 12 0 0 0-.056 0zm4.962 7.224c.1-.002.321.023.465.14a.506.506 0 0 1 .171.325c.016.093.036.306.02.472-.18 1.898-.96 6.502-1.36 8.627-.168.9-.499 1.201-.82 1.23-.696.065-1.225-.46-1.9-.902-1.056-.693-1.653-1.124-2.678-1.8-1.185-.78-.417-1.21.258-1.91.177-.184 3.247-2.977 3.307-3.23.007-.032.014-.15-.056-.212s-.174-.041-.249-.024c-.106.024-1.793 1.14-5.061 3.345-.48.33-.913.49-1.302.48-.428-.008-1.252-.241-1.865-.44-.752-.245-1.349-.374-1.297-.789.027-.216.325-.437.893-.663 3.498-1.524 5.83-2.529 6.998-3.014 3.332-1.386 4.025-1.627 4.476-1.635z"/>
                </svg>
              </a>
            </div>
          </div>
          
          {/* Третья колонка - Действия */}
          <div className="flex flex-col items-center">
            <h3 className="text-lg font-bold mb-4">Действия</h3>
            <div className="space-y-3">
              <Link 
                href="/registration" 
                className="block w-full px-4 py-2 text-center bg-orange-500 text-white font-medium rounded-lg hover:bg-orange-600 transition-colors duration-300"
              >
                Регистрация на мероприятие
              </Link>
              <Link 
                href="/events" 
                className="block w-full px-4 py-2 text-center bg-white border border-orange-500 text-orange-500 font-medium rounded-lg hover:bg-orange-50 transition-colors duration-300"
              >
                Наши мероприятия
              </Link>
            </div>
          </div>
        </div>
        
        {/* Нижняя часть футера с копирайтом */}
        <div className="pt-6 border-t border-gray-100">
          <div className="flex flex-col md:flex-row justify-between items-center">
            <p className="text-gray-600 text-sm mb-4 md:mb-0">
              © Moscow Mellows {new Date().getFullYear()}. Все права защищены.
            </p>
            <div className="flex space-x-4">
              <Link href="/privacy" className="text-sm text-gray-500 hover:text-orange-500 transition-colors duration-300">
                Политика конфиденциальности
              </Link>
              <Link href="/terms" className="text-sm text-gray-500 hover:text-orange-500 transition-colors duration-300">
                Условия использования
              </Link>
            </div>
          </div>
        </div>
      </div>
    </footer>
  );
};

export default Footer;
================
File: frontend\src\components\Header.tsx
// frontend/src/components/Header.tsx
"use client";

import React, { useState, useEffect, useRef } from "react";
import Link from "next/link";
import { useRouter } from "next/navigation";
import { motion, AnimatePresence } from "framer-motion";
import Logo from "./Logo";
import Registration from "./Registration";
import Login from "./Login";
import { useAuth } from "@/contexts/AuthContext";

interface NavItem {
  href?: string;
  label: string;
  onClick?: () => void;
}

const Header: React.FC = () => {
  const { isAuth, logout } = useAuth();
  const [isScrolled, setIsScrolled] = useState(false);
  const [isMobileMenuOpen, setIsMobileMenuOpen] = useState(false);
  const [isRegistrationOpen, setIsRegistrationOpen] = useState(false);
  const [isLoginOpen, setIsLoginOpen] = useState(false);
  const [isNotificationsOpen, setIsNotificationsOpen] = useState(false);
  const notificationRef = useRef<HTMLDivElement>(null);
  const notificationButtonRef = useRef<HTMLButtonElement>(null);
  const notificationTimeoutRef = useRef<NodeJS.Timeout | null>(null);
  
  const router = useRouter();

  useEffect(() => {
    const handleScroll = () => setIsScrolled(window.scrollY > 20);
    window.addEventListener("scroll", handleScroll);
    return () => window.removeEventListener("scroll", handleScroll);
  }, []);

  useEffect(() => {
    const handleClickOutside = (event: MouseEvent) => {
      if (
        isNotificationsOpen &&
        notificationRef.current &&
        notificationButtonRef.current &&
        !notificationRef.current.contains(event.target as Node) &&
        !notificationButtonRef.current.contains(event.target as Node)
      ) {
        setIsNotificationsOpen(false);
      }
    };

    document.addEventListener("mousedown", handleClickOutside);
    return () => document.removeEventListener("mousedown", handleClickOutside);
  }, [isNotificationsOpen]);

  const startNotificationCloseTimer = () => {
    if (notificationTimeoutRef.current) clearTimeout(notificationTimeoutRef.current);
    notificationTimeoutRef.current = setTimeout(() => setIsNotificationsOpen(false), 1000);
  };

  const stopNotificationCloseTimer = () => {
    if (notificationTimeoutRef.current) {
      clearTimeout(notificationTimeoutRef.current);
      notificationTimeoutRef.current = null;
    }
  };

  const handleLogout = () => {
    logout();
    router.push("/");
  };

  const toggleMobileMenu = () => setIsMobileMenuOpen((prev) => !prev);
  const toggleNotifications = () => setIsNotificationsOpen((prev) => !prev);

  const guestNavItems: NavItem[] = [
    { label: "Регистрация", onClick: () => setIsRegistrationOpen(true) },
    { label: "Войти", onClick: () => setIsLoginOpen(true) },
  ];

  const authNavItemsMobile: NavItem[] = [
    { href: "/profile", label: "Профиль" },
    { href: "/notifications", label: "Уведомления" },
    { href: "/partner", label: "Стать партнером" },
    { label: "Выход", onClick: handleLogout },
  ];

  const menuVariants = {
    closed: { opacity: 0, y: -20 },
    open: { opacity: 1, y: 0 },
  };

  const notificationVariants = {
    hidden: { opacity: 0, y: -10 },
    visible: { opacity: 1, y: 0 },
  };

  useEffect(() => {
    const handleAuthChange = () => {
      setIsLoginOpen(false);
      setIsRegistrationOpen(false);
    };
    
    window.addEventListener("auth-change", handleAuthChange);
    return () => window.removeEventListener("auth-change", handleAuthChange);
  }, []);

  return (
    <header
      className={`fixed top-0 left-0 right-0 z-30 transition-all duration-300 ${
        isScrolled ? "bg-white/95 backdrop-blur-sm shadow-lg py-3" : "bg-white/90 py-4"
      }`}
    >
      <div className="container mx-auto px-4 md:px-6 flex items-center justify-between">
        <Link href="/" className="transition-transform duration-300 hover:scale-105">
          <Logo />
        </Link>

        {/* Мобильное меню */}
        <div className="flex items-center md:hidden">
          {isAuth && (
            <Link href="/profile" className="mr-4 text-orange-500 hover:text-orange-600">
              <div className="w-8 h-8 bg-orange-100 rounded-full flex items-center justify-center">
                <svg className="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                  <path fillRule="evenodd" d="M10 9a3 3 0 100-6 3 3 0 000 6zm-7 9a7 7 0 1114 0H3z" clipRule="evenodd" />
                </svg>
              </div>
            </Link>
          )}
          <button onClick={toggleMobileMenu} className="text-gray-700 hover:text-orange-500">
            <svg className="h-6 w-6" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2">
              {isMobileMenuOpen ? <path d="M18 6L6 18M6 6l12 12" /> : <path d="M3 12h18M3 6h18M3 18h18" />}
            </svg>
          </button>
          <AnimatePresence>
            {isMobileMenuOpen && (
              <motion.div
                className="fixed inset-0 bg-white z-50 flex flex-col items-center justify-center"
                initial={{ opacity: 0 }}
                animate={{ opacity: 1 }}
                exit={{ opacity: 0 }}
              >
                <button 
                  onClick={toggleMobileMenu}
                  className="absolute top-4 right-4 text-gray-500 hover:text-orange-500"
                >
                  <svg className="h-8 w-8" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2">
                    <path d="M18 6L6 18M6 6l12 12" />
                  </svg>
                </button>
                <motion.ul
                  className="flex flex-col items-center space-y-6 text-xl"
                  variants={menuVariants}
                  initial="closed"
                  animate="open"
                  exit="closed"
                >
                  {(isAuth ? authNavItemsMobile : guestNavItems).map((item, index) => (
                    <motion.li key={index} whileHover={{ scale: 1.05 }} whileTap={{ scale: 0.95 }}>
                      {item.onClick ? (
                        <button onClick={item.onClick} className="text-gray-800 hover:text-orange-500">
                          {item.label}
                        </button>
                      ) : (
                        <Link 
                          href={item.href || "#"} 
                          className="text-gray-800 hover:text-orange-500"
                          onClick={() => setIsMobileMenuOpen(false)}
                        >
                          {item.label}
                        </Link>
                      )}
                    </motion.li>
                  ))}
                </motion.ul>
              </motion.div>
            )}
          </AnimatePresence>
        </div>

        {/* Десктопная навигация */}
        <div className="hidden md:flex items-center space-x-4">
          {isAuth ? (
            <>
              <Link href="/partner" className="text-orange-500 hover:text-orange-600 px-4 py-2 rounded-lg hover:bg-orange-50">
                Стать партнером
              </Link>
              <div className="relative">
                <button 
                  ref={notificationButtonRef}
                  onClick={toggleNotifications} 
                  className="text-orange-500 hover:text-orange-600"
                >
                  <div className="w-10 h-10 bg-orange-100 rounded-full flex items-center justify-center hover:bg-orange-200">
                    <svg className="h-6 w-6" viewBox="0 0 20 20" fill="currentColor">
                      <path d="M10 2a6 6 0 00-6 6v3.586l-.707.707A1 1 0 004 14h12a1 1 0 00.707-1.707L16 11.586V8a6 6 0 00-6-6zM10 18a3 3 0 01-3-3h6a3 3 0 01-3 3z" />
                    </svg>
                  </div>
                </button>
                <AnimatePresence>
                  {isNotificationsOpen && (
                    <motion.div
                      ref={notificationRef}
                      className="absolute right-0 top-full mt-2 w-64 bg-white rounded-md shadow-lg py-4 border border-gray-200 z-20"
                      initial="hidden"
                      animate="visible"
                      exit="hidden"
                      variants={notificationVariants}
                      onMouseEnter={stopNotificationCloseTimer}
                      onMouseLeave={startNotificationCloseTimer}
                    >
                      <div className="text-center text-gray-500 text-sm">Нет уведомлений</div>
                    </motion.div>
                  )}
                </AnimatePresence>
              </div>
              
              <Link href="/profile" className="text-orange-500 hover:text-orange-600">
                <div className="w-10 h-10 bg-orange-100 rounded-full flex items-center justify-center hover:bg-orange-200">
                  <svg className="h-6 w-6" viewBox="0 0 20 20" fill="currentColor">
                    <path fillRule="evenodd" d="M10 9a3 3 0 100-6 3 3 0 000 6zm-7 9a7 7 0 1114 0H3z" clipRule="evenodd" />
                  </svg>
                </div>
              </Link>
              
              <button 
                onClick={handleLogout} 
                className="text-orange-500 hover:text-orange-600 ml-2"
                title="Выход"
              >
                <svg className="h-6 w-6" viewBox="0 0 20 20" fill="currentColor">
                  <path fillRule="evenodd" d="M5 4a1 1 0 00-1 1v10a1 1 0 001 1h6a1 1 0 110 2H5a3 3 0 01-3-3V5a3 3 0 013-3h6a1 1 0 010 2H5zM14.293 6.293a1 1 0 011.414 0l3 3a1 1 0 010 1.414l-3 3a1 1 0 01-1.414-1.414L15.586 11H9a1 1 0 110-2h6.586l-1.293-1.293a1 1 0 010-1.414z" clipRule="evenodd" />
                </svg>
              </button>
            </>
          ) : (
            <div className="flex items-center space-x-4">
              <motion.button
                whileHover={{ scale: 1.03 }}
                whileTap={{ scale: 0.97 }}
                onClick={() => setIsRegistrationOpen(true)}
                className="px-4 py-2 border border-orange-500 text-orange-500 rounded-lg hover:bg-orange-50"
              >
                Регистрация
              </motion.button>
              <motion.button
                whileHover={{ scale: 1.03 }}
                whileTap={{ scale: 0.97 }}
                onClick={() => setIsLoginOpen(true)}
                className="px-4 py-2 bg-orange-500 text-white rounded-lg hover:bg-orange-600"
              >
                Войти
              </motion.button>
            </div>
          )}
        </div>
      </div>

      <Registration 
        isOpen={isRegistrationOpen} 
        onClose={() => setIsRegistrationOpen(false)} 
        setLoginOpen={setIsLoginOpen} 
      />
      <Login 
        isOpen={isLoginOpen} 
        onClose={() => setIsLoginOpen(false)} 
      />
    </header>
  );
};

export default Header;
================
File: frontend\src\components\Loading.tsx
// frontend/src/components/Loading.tsx
import React from "react";

const Loading = () => {
  return (
    <div className="fixed inset-0 bg-white bg-opacity-80 flex items-center justify-center z-20" style={{ overflow: 'hidden' }}>
      <div className="flex flex-col items-center">
        <div className="relative w-16 h-16">
          {/* Multiple circles with staggered animations */}
          <div className="absolute inset-0 rounded-full border-4 border-t-orange-500 border-r-transparent border-b-transparent border-l-transparent animate-spin"></div>
          <div className="absolute inset-1 rounded-full border-4 border-t-transparent border-r-orange-400 border-b-transparent border-l-transparent animate-spin" style={{ animationDuration: '1s', animationDirection: 'reverse' }}></div>
          <div className="absolute inset-2 rounded-full border-4 border-t-transparent border-r-transparent border-b-orange-300 border-l-transparent animate-spin" style={{ animationDuration: '1.5s' }}></div>
          <div className="absolute inset-3 rounded-full border-4 border-t-transparent border-r-transparent border-b-transparent border-l-orange-200 animate-spin" style={{ animationDuration: '2s', animationDirection: 'reverse' }}></div>
        </div>
        <span className="mt-4 text-orange-500 font-semibold">Loading...</span>
      </div>
    </div>
  );
};

export default Loading;
================
File: frontend\src\components\Login.tsx
"use client";

import React from "react";
import { FaEnvelope, FaLock } from "react-icons/fa";
import AuthModal, { ModalButton } from "./common/AuthModal";
import InputField from "./common/InputField";
import { useAdminAuthForm } from "@/hooks/useAdminAuthForm";

interface LoginProps {
  isOpen?: boolean; // Опционально для модального окна
  onClose?: () => void; // Опционально для модального окна
  isAdminLogin?: boolean; // Указывает, что это админская авторизация
}

const Login: React.FC<LoginProps> = ({ isOpen, onClose, isAdminLogin = false }) => {
  const endpoint = isAdminLogin ? "/admin/login" : "/auth/login";
  const redirectTo = isAdminLogin ? "/admin" : "/";
  
  const {
    formValues,
    error,
    isLoading,
    isSuccess,
    handleChange,
    handleSubmit,
  } = useAdminAuthForm({
    initialValues: { email: "", password: "" },
    endpoint,
    redirectTo,
    isLogin: true,
  });

  // Если используется как страница, а не модалка
  if (!isOpen || !onClose) {
    return (
      <div className="space-y-6">
        <form onSubmit={handleSubmit}>
          <InputField
            type="email"
            value={formValues.email}
            onChange={handleChange}
            placeholder="Введите email"
            icon={FaEnvelope}
            name="email"
            disabled={isSuccess}
          />
          <InputField
            type="password"
            value={formValues.password}
            onChange={handleChange}
            placeholder="Введите пароль"
            icon={FaLock}
            name="password"
            disabled={isSuccess}
          />
          {error && (
            <p className="text-red-500 text-sm mt-2">{error}</p>
          )}
          <button
            type="submit"
            disabled={isLoading || isSuccess}
            className="w-full mt-4 px-6 py-3 bg-orange-500 text-white rounded-lg hover:bg-orange-600 disabled:opacity-50 disabled:cursor-not-allowed transition-all duration-300"
          >
            {isLoading ? "Вход..." : isSuccess ? "Успешно!" : "Войти"}
          </button>
        </form>
      </div>
    );
  }

  // Если используется как модалка
  return (
    <AuthModal
      isOpen={isOpen}
      onClose={onClose}
      title="Вход"
      error={error}
      success={isSuccess ? "Вход выполнен успешно!" : undefined}
    >
      <form onSubmit={handleSubmit} className="space-y-6">
        <InputField
          type="email"
          value={formValues.email}
          onChange={handleChange}
          placeholder="Введите email"
          icon={FaEnvelope}
          name="email"
          disabled={isSuccess}
        />
        <InputField
          type="password"
          value={formValues.password}
          onChange={handleChange}
          placeholder="Введите пароль"
          icon={FaLock}
          name="password"
          disabled={isSuccess}
        />
        <div className="flex justify-end space-x-4">
          <ModalButton
            variant="secondary"
            onClick={onClose}
            disabled={isLoading || isSuccess}
          >
            Закрыть
          </ModalButton>
          <ModalButton
            type="submit"
            variant="primary"
            disabled={isLoading || isSuccess}
          >
            {isLoading ? "Вход..." : isSuccess ? "Успешно!" : "Войти"}
          </ModalButton>
        </div>
      </form>
    </AuthModal>
  );
};

export default Login;
================
File: frontend\src\components\Logo.tsx
import React from 'react';
import Image from 'next/image';

const Logo = () => {
  return (
    <div className="flex items-center">
      <div className="relative w-10 h-10 mr-2">
        <Image 
          src="/photo_2025-01-13_11-50-23.jpg" 
          alt="Moscow Mellows Logo" 
          fill
          className="object-cover rounded-full"
        />
      </div>
      <span className="ml-1 text-xl font-bold text-black">
        Moscow Mellows
      </span>
    </div>
  );
};

export default Logo;
================
File: frontend\src\components\Media.tsx
"use client"

import React, { useState } from 'react';
import Image from 'next/image';

// Моковые данные для галереи
const mediaItems = [
  {
    id: 1,
    type: 'image',
    url: 'https://images.unsplash.com/photo-1501281668745-f7f57925c3b4?ixlib=rb-4.0.3&auto=format&fit=crop&w=600&q=80',
    title: 'Летний музыкальный фестиваль 2024',
    category: 'Концерты'
  },
  {
    id: 2,
    type: 'image',
    url: 'https://images.unsplash.com/photo-1492684223066-81342ee5ff30?ixlib=rb-4.0.3&auto=format&fit=crop&w=600&q=80',
    title: 'Мастер-класс по живописи',
    category: 'Мастер-классы'
  },
  {
    id: 3,
    type: 'image',
    url: 'https://images.unsplash.com/photo-1531058020387-3be344556be6?ixlib=rb-4.0.3&auto=format&fit=crop&w=600&q=80',
    title: 'Театральная постановка "Вишневый сад"',
    category: 'Театр'
  },
  {
    id: 4,
    type: 'image',
    url: 'https://images.unsplash.com/photo-1470229722913-7c0e2dbbafd3?ixlib=rb-4.0.3&auto=format&fit=crop&w=600&q=80',
    title: 'Рок-концерт в клубе "Атмосфера"',
    category: 'Концерты'
  },
  {
    id: 5,
    type: 'image',
    url: 'https://images.unsplash.com/photo-1533174072545-7a4b6ad7a6a3?ixlib=rb-4.0.3&auto=format&fit=crop&w=600&q=80',
    title: 'Выставка современного искусства',
    category: 'Выставки'
  },
  {
    id: 6,
    type: 'image',
    url: 'https://images.unsplash.com/photo-1560439514-4e9645039924?ixlib=rb-4.0.3&auto=format&fit=crop&w=600&q=80',
    title: 'Фестиваль уличной еды',
    category: 'Фестивали'
  }
];

const Media = () => {
  const [selectedImage, setSelectedImage] = useState<number | null>(null);

  // Функция для открытия модального окна с изображением
  const openModal = (id: number) => {
    setSelectedImage(id);
    // Блокируем прокрутку body при открытии модального окна
    document.body.style.overflow = 'hidden';
  };

  // Функция для закрытия модального окна
  const closeModal = () => {
    setSelectedImage(null);
    // Разблокируем прокрутку body при закрытии модального окна
    document.body.style.overflow = 'auto';
  };

  // Найти выбранное изображение
  const selectedItem = selectedImage !== null ? mediaItems.find(item => item.id === selectedImage) : null;

  return (
    <section className="py-20 bg-gray-50">
      <div className="container mx-auto px-4 md:px-6">
        <div className="text-center mb-12">
          <h2 className="text-3xl font-bold mb-3">Медиа <span className="text-blue-600">галерея</span></h2>
          <p className="text-gray-600 max-w-2xl mx-auto">
            Взгляните на яркие моменты с наших прошедших мероприятий. Присоединяйтесь к нам, чтобы стать частью следующих событий!
          </p>
        </div>
        
        {/* Галерея изображений */}
        <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6">
          {mediaItems.map((item) => (
            <div 
              key={item.id}
              className="group relative overflow-hidden rounded-xl shadow-md hover:shadow-xl transition-all duration-300 transform hover:-translate-y-1 cursor-pointer"
              onClick={() => openModal(item.id)}
            >
              <div className="aspect-[4/3] overflow-hidden relative">
                <Image 
                  src={item.url} 
                  alt={item.title}
                  fill
                  sizes="(max-width: 768px) 100vw, (max-width: 1200px) 50vw, 33vw"
                  className="object-cover transition-transform duration-700 group-hover:scale-110"
                />
              </div>
              <div className="absolute inset-0 bg-gradient-to-t from-black/70 to-transparent opacity-0 group-hover:opacity-100 transition-opacity duration-300">
                <div className="absolute bottom-0 left-0 right-0 p-4 text-white">
                  <div className="text-xs font-medium mb-1 opacity-75">{item.category}</div>
                  <h3 className="font-bold">{item.title}</h3>
                </div>
              </div>
            </div>
          ))}
        </div>
        
        {/* Кнопка "Показать все" */}
        <div className="text-center mt-12">
          <button className="inline-flex items-center px-6 py-3 bg-blue-600 text-white font-medium rounded-lg hover:bg-blue-700 shadow-md hover:shadow-lg transition-all duration-300">
            Смотреть все медиа
            <svg className="w-5 h-5 ml-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M14 5l7 7m0 0l-7 7m7-7H3" />
            </svg>
          </button>
        </div>
        
        {/* Модальное окно */}
        {selectedImage !== null && (
          <div className="fixed inset-0 bg-black/80 z-50 flex items-center justify-center p-4" onClick={closeModal}>
            <div className="relative max-w-4xl w-full" onClick={(e) => e.stopPropagation()}>
              <button 
                onClick={closeModal}
                className="absolute top-4 right-4 text-white bg-black/50 rounded-full p-2 hover:bg-black/70 transition-colors duration-200 z-10"
                aria-label="Закрыть"
              >
                <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M6 18L18 6M6 6l12 12" />
                </svg>
              </button>
              {selectedItem && (
                <div className="bg-white rounded-xl overflow-hidden shadow-2xl">
                  <div className="relative w-full h-[80vh]">
                    <Image 
                      src={selectedItem.url} 
                      alt={selectedItem.title}
                      fill
                      sizes="100vw"
                      className="object-contain" 
                    />
                  </div>
                  <div className="p-4 bg-white">
                    <div className="text-sm text-blue-600 font-medium mb-1">{selectedItem.category}</div>
                    <h3 className="text-xl font-bold mb-1">{selectedItem.title}</h3>
                  </div>
                </div>
              )}
            </div>
          </div>
        )}
      </div>
    </section>
  );
};

export default Media;
================
File: frontend\src\components\PartnerButton.tsx
import React from 'react';
import Link from 'next/link';

interface PartnerButtonProps {
  onClick?: () => void;
}

const PartnerButton = ({ onClick }: PartnerButtonProps) => {
  return (
    <Link 
      href="/partner" 
      className="inline-flex items-center px-5 py-2.5 bg-orange-500 hover:bg-orange-600 text-white font-medium rounded-lg 
                shadow-md hover:shadow-lg transform hover:-translate-y-0.5 transition-all duration-300 ease-in-out"
      onClick={onClick}
    >
      Стать партнером
    </Link>
  );
};

export default PartnerButton;
================
File: frontend\src\components\Registration.tsx
// frontend/src/components/Registration.tsx
"use client";

import React, { Dispatch, SetStateAction } from "react";
import { FaUser, FaEnvelope, FaLock, FaTelegram, FaWhatsapp } from "react-icons/fa";
import { IconType } from "react-icons";
import AuthModal, { ModalButton } from "./common/AuthModal";
import InputField from "./common/InputField";
import { useAuthForm } from "@/hooks/useAuthForm";

interface RegistrationProps {
  isOpen: boolean;
  onClose: () => void;
  setLoginOpen: Dispatch<SetStateAction<boolean>>;
}

interface FieldConfig {
  name: string;
  type: string;
  placeholder: string;
  icon: IconType;
}

const Registration: React.FC<RegistrationProps> = ({ isOpen, onClose, setLoginOpen }) => {
  const fields: FieldConfig[] = [
    { name: "fio", type: "text", placeholder: "Введите ваше ФИО", icon: FaUser },
    { name: "email", type: "email", placeholder: "Введите email", icon: FaEnvelope },
    { name: "password", type: "password", placeholder: "Введите пароль", icon: FaLock },
    { name: "telegram", type: "text", placeholder: "Введите Telegram", icon: FaTelegram },
    { name: "whatsapp", type: "text", placeholder: "Введите WhatsApp", icon: FaWhatsapp },
  ];

  const initialValues = {
    fio: "",
    email: "",
    password: "",
    telegram: "",
    whatsapp: "",
  };

  const onSuccess = () => {
    onClose();
    setLoginOpen(true);
  };

  const {
    formValues,
    error,
    isLoading,
    handleChange,
    handleSubmit
  } = useAuthForm({
    initialValues,
    endpoint: "/auth/register",
    onSuccess
  });

  return (
    <AuthModal isOpen={isOpen} onClose={onClose} title="Регистрация" error={error}>
      <form onSubmit={handleSubmit} className="space-y-6">
        {fields.map((field) => (
          <InputField
            key={field.name}
            type={field.type}
            value={formValues[field.name]}
            onChange={handleChange}
            placeholder={field.placeholder}
            icon={field.icon}
            name={field.name}
          />
        ))}
        <div className="flex justify-end space-x-4">
          <ModalButton variant="secondary" onClick={onClose} disabled={isLoading}>
            Закрыть
          </ModalButton>
          <ModalButton type="submit" variant="primary" disabled={isLoading}>
            {isLoading ? "Регистрация..." : "Зарегистрироваться"}
          </ModalButton>
        </div>
      </form>
    </AuthModal>
  );
};

export default Registration;
================
File: frontend\src\components\common\AuthModal.tsx
// frontend/src/components/common/AuthModal.tsx
"use client";

import React, { ReactNode } from "react";
import { motion, AnimatePresence } from "framer-motion";

// Types for ModalButton props
interface ModalButtonProps {
  type?: "button" | "submit" | "reset";
  onClick?: () => void;
  variant?: string;
  disabled?: boolean;
  children: ReactNode;
}

// Button component with animations
export const ModalButton: React.FC<ModalButtonProps> = ({ 
  type = "button", 
  onClick, 
  variant = "primary", 
  disabled = false,
  children 
}) => (
  <motion.button
    whileHover={{ scale: disabled ? 1 : 1.01 }}
    whileTap={{ scale: disabled ? 1 : 0.99 }}
    type={type}
    onClick={onClick}
    disabled={disabled}
    className={`
      px-6 py-3 rounded-lg transition-all duration-300
      ${variant === "primary" 
        ? `bg-orange-500 text-white ${disabled ? 'opacity-50 cursor-not-allowed' : 'hover:bg-orange-600'}` 
        : `bg-gray-100 text-gray-700 ${disabled ? 'opacity-50 cursor-not-allowed' : 'hover:bg-gray-200'} border border-gray-200`}
    `}
  >
    {children}
  </motion.button>
);

// Types for AuthModal props
interface AuthModalProps {
  isOpen: boolean;
  onClose: () => void;
  title: string;
  error?: string;
  success?: string;
  children: ReactNode;
}

// Modal wrapper component
const AuthModal: React.FC<AuthModalProps> = ({ 
  isOpen, 
  onClose, 
  title, 
  error,
  success,
  children 
}) => {
  if (!isOpen) return null;

  return (
    <AnimatePresence>
      {isOpen && (
        <motion.div
          initial={{ opacity: 0, backdropFilter: "blur(0px)" }}
          animate={{ opacity: 1, backdropFilter: "blur(4px)" }}
          exit={{ opacity: 0, backdropFilter: "blur(0px)" }}
          transition={{ duration: 0.3, ease: "easeInOut" }}
          className="fixed inset-0 bg-white/75 flex items-center justify-center z-50"
          onClick={onClose}
        >
          <motion.div
            initial={{ scale: 0.95, opacity: 0, y: 20 }}
            animate={{ scale: 1, opacity: 1, y: 0 }}
            exit={{ scale: 0.95, opacity: 0, y: 20 }}
            transition={{ 
              type: "spring", 
              damping: 25, 
              stiffness: 300 
            }}
            className="bg-white p-8 rounded-2xl shadow-lg w-full max-w-md border border-gray-100"
            onClick={(e) => e.stopPropagation()}
          >
            <h2 className="text-2xl font-bold mb-6 text-gray-900 tracking-tight">{title}</h2>
            
            {error && (
              <motion.div
                initial={{ opacity: 0, height: 0 }}
                animate={{ opacity: 1, height: "auto" }}
                exit={{ opacity: 0, height: 0 }}
                className="overflow-hidden"
              >
                <div className="text-red-500 mb-6 bg-red-50 p-3 rounded-lg border-l-4 border-red-500 text-sm">
                  {error}
                </div>
              </motion.div>
            )}

            {success && (
              <motion.div
                initial={{ opacity: 0, height: 0 }}
                animate={{ opacity: 1, height: "auto" }}
                exit={{ opacity: 0, height: 0 }}
                className="overflow-hidden"
              >
                <div className="text-green-600 mb-6 bg-green-50 p-3 rounded-lg border-l-4 border-green-500 text-sm">
                  {success}
                </div>
              </motion.div>
            )}
            
            {children}
          </motion.div>
        </motion.div>
      )}
    </AnimatePresence>
  );
};

export default AuthModal;
================
File: frontend\src\components\common\InputField.tsx
// frontend/src/components/common/InputField.tsx
import React, { useState, ChangeEvent, FocusEvent } from "react"; // Добавляем FocusEvent
import { IconType } from "react-icons";

interface InputFieldProps {
  type: string;
  value: string;
  onChange: (e: ChangeEvent<HTMLInputElement>) => void;
  placeholder: string;
  icon: IconType;
  required?: boolean;
  name?: string;
  disabled?: boolean;
  onBlur?: (e: FocusEvent<HTMLInputElement>) => void; // Добавляем новый проп
}

const InputField: React.FC<InputFieldProps> = ({
  type,
  value,
  onChange,
  placeholder,
  icon: Icon,
  required = true,
  name,
  disabled = false,
  onBlur, // Добавляем в деструктуризацию
}) => {
  const [isFocused, setIsFocused] = useState(false);

  return (
    <div className="relative mb-5 h-[60px]">
      <div className="absolute inset-0">
        <input
          type={type}
          value={value}
          onChange={onChange}
          placeholder={placeholder}
          name={name}
          disabled={disabled}
          className={`
            w-full h-full p-4 pr-12
            bg-white text-gray-900 
            placeholder:text-gray-400 
            rounded-lg outline-none
            border
            ${disabled ? 'bg-gray-50 opacity-70 cursor-not-allowed' : ''}
          `}
          style={{
            borderColor: isFocused ? "#f97316" : "#e5e7eb",
            borderWidth: "1px",
            transition: "border-color 0.5s ease-out",
            // Box-shadow создает эффект увеличения нижней границы без изменения размеров элемента
            boxShadow: isFocused 
              ? "inset 0 -2px 0 #f97316" 
              : "inset 0 0 0 transparent",
            transitionProperty: "border-color, box-shadow",
            transitionDuration: "0.5s",
            transitionTimingFunction: "ease-out"
          }}
          required={required}
          onFocus={() => !disabled && setIsFocused(true)}
          onBlur={(e) => { // Обновляем обработчик
            setIsFocused(false);
            if (onBlur) onBlur(e); // Вызываем переданный onBlur, если он есть
          }}
        />
        
        {/* Иконка с плавной анимацией цвета */}
        <div className="absolute right-3 top-1/2 transform -translate-y-1/2 pointer-events-none">
          <Icon 
            className="transition-colors duration-500"
            style={{
              color: isFocused ? "#f97316" : (disabled ? "#d1d5db" : "#9ca3af") // orange-500 : gray-400 or gray-300 if disabled
            }}
            size={18}
          />
        </div>
      </div>
    </div>
  );
};

export default InputField;
================
File: frontend\src\contexts\AdminAuthContext.tsx
// frontend/src/contexts/AdminAuthContext.tsx
"use client";

import React, { createContext, useState, useEffect, useContext, useCallback, useRef } from "react";

interface AdminData {
  id: number;
  fio: string;
  email: string;
  avatar_url?: string;
}

interface AdminAuthContextType {
  isAdminAuth: boolean;
  adminData: AdminData | null;
  setIsAdminAuth: (auth: boolean) => void;
  checkAdminAuth: () => Promise<boolean>;
  isLoading: boolean;
  logoutAdmin: () => void;
}

const AdminAuthContext = createContext<AdminAuthContextType | undefined>(undefined);

// Функция для декодирования JWT без проверки подписи
function decodeJwt(token: string): { exp: number; sub: string } | null {
  try {
    const parts = token.split('.');
    if (parts.length !== 3) return null;
    
    const payload = JSON.parse(atob(parts[1].replace(/-/g, '+').replace(/_/g, '/')));
    return payload;
  } catch (err) {
    console.error('Ошибка при декодировании токена:', err);
    return null;
  }
}

// Проверяем, истек ли срок действия токена
function isTokenExpired(token: string): boolean {
  const decoded = decodeJwt(token);
  if (!decoded) return true;
  
  const currentTime = Math.floor(Date.now() / 1000);
  return decoded.exp < currentTime;
}

// Функции для хранения и получения данных администратора из кэша
const STORAGE_KEYS = {
  ADMIN_TOKEN: 'admin_token',
  ADMIN_DATA: 'admin_data'
};

const getAdminCache = (): AdminData | null => {
  if (typeof window === 'undefined') return null;
  const cached = localStorage.getItem(STORAGE_KEYS.ADMIN_DATA);
  return cached ? JSON.parse(cached) : null;
};

const setAdminCache = (data: AdminData | null) => {
  if (typeof window === 'undefined') return;
  if (data) {
    localStorage.setItem(STORAGE_KEYS.ADMIN_DATA, JSON.stringify(data));
  } else {
    localStorage.removeItem(STORAGE_KEYS.ADMIN_DATA);
  }
};

export const AdminAuthProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {
  const [isAdminAuth, setIsAdminAuth] = useState<boolean>(false);
  const [adminData, setAdminData] = useState<AdminData | null>(null);
  const [isLoading, setIsLoading] = useState<boolean>(true);
  const isInitialLoad = useRef(true);
  const fetchingAdminData = useRef(false);
  const checkAuthInProgress = useRef(false);

  // Функция для загрузки данных администратора с сервера
  const fetchAdminData = useCallback(async (): Promise<AdminData | null> => {
    if (fetchingAdminData.current) return null;
    fetchingAdminData.current = true;
  
    try {
      let token = localStorage.getItem(STORAGE_KEYS.ADMIN_TOKEN);
      if (!token) return null;
  
      // Проверяем формат токена
      if (token.startsWith('Bearer ')) {
        token = token.slice(7).trim();
      }
  
      const controller = new AbortController();
      const timeoutId = setTimeout(() => controller.abort(), 8000);
  
      const response = await fetch('/admin/me', {
        headers: {
          Authorization: `Bearer ${token}`,
          'Cache-Control': 'no-cache',
        },
        signal: controller.signal,
      });
  
      clearTimeout(timeoutId);
  
      if (response.ok) {
        const data = await response.json();
        setAdminCache(data);
        return data;
      }
      return null;
    } catch (error) {
      console.error('Ошибка загрузки данных администратора:', error);
      return null;
    } finally {
      fetchingAdminData.current = false;
    }
  }, []);

  // Функция для проверки авторизации администратора
  const checkAdminAuth = useCallback(async (): Promise<boolean> => {
    if (checkAuthInProgress.current) return isAdminAuth;
    
    checkAuthInProgress.current = true;
    
    try {
      setIsLoading(true);
      
      const token = localStorage.getItem(STORAGE_KEYS.ADMIN_TOKEN);
      if (!token) {
        setIsAdminAuth(false);
        setAdminData(null);
        setAdminCache(null);
        return false;
      }
      
      if (isTokenExpired(token)) {
        localStorage.removeItem(STORAGE_KEYS.ADMIN_TOKEN);
        setAdminCache(null);
        setIsAdminAuth(false);
        setAdminData(null);
        return false;
      }
      
      setIsAdminAuth(true);
      
      if (!adminData) {
        const cachedData = getAdminCache();
        if (cachedData) {
          setAdminData(cachedData);
        }
      }
      
      if (isInitialLoad.current) {
        isInitialLoad.current = false;
        
        fetchAdminData().then(data => {
          if (data) {
            setAdminData(data);
          }
        }).catch(console.error);
      }
      
      return true;
    } catch (error) {
      console.error("Ошибка проверки авторизации администратора:", error);
      return isAdminAuth;
    } finally {
      setIsLoading(false);
      checkAuthInProgress.current = false;
    }
  }, [fetchAdminData, isAdminAuth, adminData]);

  // Функция для выхода
  const logoutAdmin = useCallback(() => {
    localStorage.removeItem(STORAGE_KEYS.ADMIN_TOKEN);
    setAdminCache(null);
    setIsAdminAuth(false);
    setAdminData(null);
    window.dispatchEvent(new Event("admin-auth-change"));
  }, []);

  // Инициализация из кэша - только один раз при монтировании компонента
  useEffect(() => {
    const initAuth = async () => {
      const cachedAdmin = getAdminCache();
      const token = localStorage.getItem(STORAGE_KEYS.ADMIN_TOKEN);
      
      if (cachedAdmin && token && !isTokenExpired(token)) {
        setAdminData(cachedAdmin);
        setIsAdminAuth(true);
      } else {
        setIsAdminAuth(false);
        if (!token) {
          setAdminData(null);
        }
      }
      
      await checkAdminAuth();
      setIsLoading(false);
    };
    
    initAuth();
  // eslint-disable-next-line react-hooks/exhaustive-deps
  }, []);

  // Настройка обработчиков событий - отдельный useEffect
  useEffect(() => {
    const handleStorageChange = (e: StorageEvent) => {
      if (e.key === STORAGE_KEYS.ADMIN_TOKEN) {
        checkAdminAuth();
      }
    };
    
    const handleAuthChange = () => checkAdminAuth();
    
    window.addEventListener("storage", handleStorageChange);
    window.addEventListener("admin-auth-change", handleAuthChange);
    
    return () => {
      window.removeEventListener("storage", handleStorageChange);
      window.removeEventListener("admin-auth-change", handleAuthChange);
    };
  }, [checkAdminAuth]);

  const contextValue = {
    isAdminAuth, 
    adminData,
    setIsAdminAuth, 
    checkAdminAuth, 
    isLoading,
    logoutAdmin
  };

  return (
    <AdminAuthContext.Provider value={contextValue}>
      {children}
    </AdminAuthContext.Provider>
  );
};

export const useAdminAuth = () => {
  const context = useContext(AdminAuthContext);
  if (!context) {
    throw new Error("useAdminAuth must be used within an AdminAuthProvider");
  }
  return context;
};
================
File: frontend\src\contexts\AuthContext.tsx
// frontend/src/contexts/AuthContext.tsx
"use client";

import React, { createContext, useState, useEffect, useContext, useCallback, useRef } from "react";
import { useRouter } from "next/navigation";

interface UserData {
  id: number;
  fio: string;
  email: string;
  telegram: string;
  whatsapp: string;
  avatar_url?: string;
}

interface AuthContextType {
  isAuth: boolean;
  userData: UserData | null;
  setIsAuth: (auth: boolean) => void;
  checkAuth: () => Promise<boolean>;
  isLoading: boolean;
  logout: () => void;
}

const AuthContext = createContext<AuthContextType | undefined>(undefined);

// Функция для декодирования JWT без проверки подписи
function decodeJwt(token: string): { exp: number; sub: string } | null {
  try {
    const parts = token.split(".");
    if (parts.length !== 3) return null;

    const payload = JSON.parse(atob(parts[1].replace(/-/g, "+").replace(/_/g, "/")));
    return payload;
  } catch (err) {
    console.error("Ошибка при декодировании токена:", err);
    return null;
  }
}

// Проверяем, истек ли срок действия токена
function isTokenExpired(token: string): boolean {
  const decoded = decodeJwt(token);
  if (!decoded) return true;

  const currentTime = Math.floor(Date.now() / 1000);
  return decoded.exp < currentTime;
}

// Функции для хранения и получения данных пользователя из кэша
const STORAGE_KEYS = {
  TOKEN: "token",
  USER_DATA: "user_data",
};

const getUserCache = (): UserData | null => {
  if (typeof window === "undefined") return null;
  const cached = localStorage.getItem(STORAGE_KEYS.USER_DATA);
  return cached ? JSON.parse(cached) : null;
};

const setUserCache = (data: UserData | null) => {
  if (typeof window === "undefined") return;
  if (data) {
    localStorage.setItem(STORAGE_KEYS.USER_DATA, JSON.stringify(data));
  } else {
    localStorage.removeItem(STORAGE_KEYS.USER_DATA);
  }
};

export const AuthProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {
  const [isAuth, setIsAuth] = useState<boolean>(false);
  const [userData, setUserData] = useState<UserData | null>(null);
  const [isLoading, setIsLoading] = useState<boolean>(true);
  const isInitialLoad = useRef(true);
  const fetchingUserData = useRef(false);
  const checkAuthInProgress = useRef(false);
  const router = useRouter();

  // Функция для загрузки данных пользователя с сервера
  const fetchUserData = useCallback(async (): Promise<UserData | null> => {
    if (fetchingUserData.current) return null;

    fetchingUserData.current = true;

    try {
      let token = localStorage.getItem(STORAGE_KEYS.TOKEN);
      if (!token) return null;

      // Проверяем и извлекаем токен, если он в формате "Bearer "
      if (token.startsWith("Bearer ")) {
        token = token.slice(7).trim();
      }

      const controller = new AbortController();
      const timeoutId = setTimeout(() => controller.abort(), 8000);

      const response = await fetch("/auth/me", {
        headers: {
          Authorization: `Bearer ${token}`,
          "Cache-Control": "no-cache",
        },
        signal: controller.signal,
      });

      clearTimeout(timeoutId);

      if (response.ok) {
        const data = await response.json();
        setUserCache(data);
        return data;
      }

      return null;
    } catch (error) {
      console.error("Ошибка загрузки данных пользователя:", error);
      return null;
    } finally {
      fetchingUserData.current = false;
    }
  }, []);

  // Функция для проверки авторизации
  const checkAuth = useCallback(async (): Promise<boolean> => {
    if (checkAuthInProgress.current) return isAuth;

    checkAuthInProgress.current = true;

    try {
      setIsLoading(true);

      let token = localStorage.getItem(STORAGE_KEYS.TOKEN);
      if (!token) {
        setIsAuth(false);
        setUserData(null);
        setUserCache(null);
        return false;
      }

      // Проверяем формат токена
      if (token.startsWith("Bearer ")) {
        token = token.slice(7).trim();
      }

      if (isTokenExpired(token)) {
        localStorage.removeItem(STORAGE_KEYS.TOKEN);
        setUserCache(null);
        setIsAuth(false);
        setUserData(null);
        return false;
      }

      setIsAuth(true);

      if (!userData) {
        const cachedData = getUserCache();
        if (cachedData) {
          setUserData(cachedData);
        }
      }

      if (isInitialLoad.current) {
        isInitialLoad.current = false;

        const fetchedData = await fetchUserData();
        if (fetchedData) {
          setUserData(fetchedData);
        } else if (!getUserCache()) {
          // Если данные не удалось загрузить и кэш пуст, считаем пользователя неавторизованным
          setIsAuth(false);
          localStorage.removeItem(STORAGE_KEYS.TOKEN);
          return false;
        }
      }

      return true;
    } catch (error) {
      console.error("Ошибка проверки авторизации:", error);
      return isAuth;
    } finally {
      setIsLoading(false);
      checkAuthInProgress.current = false;
    }
  }, [fetchUserData, isAuth, userData]);

  // Функция для выхода
  const logout = useCallback(() => {
    localStorage.removeItem(STORAGE_KEYS.TOKEN);
    setUserCache(null);
    setIsAuth(false);
    setUserData(null);
    window.dispatchEvent(new Event("auth-change"));
    router.push("/"); // Перенаправляем на главную страницу после выхода
  }, [router]);

  // Инициализация из кэша при монтировании компонента
  useEffect(() => {
    const initAuth = async () => {
      const cachedUser = getUserCache();
      let token = localStorage.getItem(STORAGE_KEYS.TOKEN);

      if (token && token.startsWith("Bearer ")) {
        token = token.slice(7).trim();
      }

      if (cachedUser && token && !isTokenExpired(token)) {
        setUserData(cachedUser);
        setIsAuth(true);
      } else {
        setIsAuth(false);
        if (!token) {
          setUserData(null);
        }
      }

      await checkAuth();
      setIsLoading(false);
    };

    initAuth();
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, []);

  // Настройка обработчиков событий
  useEffect(() => {
    const handleStorageChange = (e: StorageEvent) => {
      if (e.key === STORAGE_KEYS.TOKEN) {
        checkAuth();
      }
    };

    const handleAuthChange = () => checkAuth();

    window.addEventListener("storage", handleStorageChange);
    window.addEventListener("auth-change", handleAuthChange);

    return () => {
      window.removeEventListener("storage", handleStorageChange);
      window.removeEventListener("auth-change", handleAuthChange);
    };
  }, [checkAuth]);

  const contextValue = {
    isAuth,
    userData,
    setIsAuth,
    checkAuth,
    isLoading,
    logout,
  };

  return (
    <AuthContext.Provider value={contextValue}>
      {children}
    </AuthContext.Provider>
  );
};

export const useAuth = () => {
  const context = useContext(AuthContext);
  if (!context) {
    throw new Error("useAuth must be used within an AuthProvider");
  }
  return context;
};
================
File: frontend\src\hooks\useAdminAuthForm.ts
// frontend/src/hooks/useAdminAuthForm.ts
import { useState, FormEvent, ChangeEvent } from 'react';
import { useAdminAuth } from '@/contexts/AdminAuthContext';
import { useRouter } from 'next/navigation';

interface AdminAuthFormValues {
  email: string;
  password: string;
  fio?: string; // Опционально для регистрации
}

interface UseAdminAuthFormProps {
  initialValues: AdminAuthFormValues;
  endpoint: string;
  onSuccess?: () => void;
  redirectTo?: string;
  isLogin?: boolean;
}

export const useAdminAuthForm = ({
  initialValues,
  endpoint,
  onSuccess,
  redirectTo,
  isLogin = false
}: UseAdminAuthFormProps) => {
  const router = useRouter();
  const { setIsAdminAuth, checkAdminAuth } = useAdminAuth();
  const [formValues, setFormValues] = useState<AdminAuthFormValues>(initialValues);
  const [error, setError] = useState<string>('');
  const [isLoading, setIsLoading] = useState<boolean>(false);
  const [isSuccess, setIsSuccess] = useState<boolean>(false);

  const handleChange = (e: ChangeEvent<HTMLInputElement>) => {
    const { name, value } = e.target;
    setFormValues((prev: AdminAuthFormValues) => ({ ...prev, [name]: value }));
  };

  const handleSubmit = async (e: FormEvent<HTMLFormElement>) => {
    e.preventDefault();
    setError('');
    setIsLoading(true);
    setIsSuccess(false);

    try {
      const response = await fetch(endpoint, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Cache-Control': 'no-cache',
        },
        body: JSON.stringify(formValues),
      });

      if (response.ok) {
        const data = await response.json();

        if (isLogin) {
          if (!data.access_token) {
            throw new Error('Токен не получен от сервера');
          }
          localStorage.setItem('admin_token', data.access_token);
          setIsAdminAuth(true);
          setIsSuccess(true);

          const isAuthenticated = await checkAdminAuth();
          if (!isAuthenticated) {
            throw new Error('Ошибка синхронизации состояния авторизации');
          }

          window.dispatchEvent(new Event('admin-auth-change'));

          if (redirectTo) {
            setTimeout(() => {
              router.push(redirectTo);
            }, 1500);
          }
        } else {
          setFormValues(initialValues);
          if (onSuccess) onSuccess();
        }
      } else {
        const errorText = await response.text();
        let errorMessage = 'Ошибка запроса';
        try {
          const errorData = JSON.parse(errorText);
          errorMessage = errorData.detail || errorMessage;
        } catch {
          console.error('Не удалось разобрать JSON ошибки:', errorText);
        }
        setError(errorMessage);
      }
    } catch (error) {
      setError(`Произошла ошибка: ${error instanceof Error ? error.message : 'Неизвестная ошибка'}`);
      console.error('Form submission error:', error);
    } finally {
      setIsLoading(false);
    }
  };

  return {
    formValues,
    error,
    isLoading,
    isSuccess,
    handleChange,
    handleSubmit,
  };
};
================
File: frontend\src\hooks\useAuthForm.tsx
// src/hooks/useAuthForm.ts
import { useState, FormEvent, ChangeEvent } from 'react';
import { useAuth } from '@/contexts/AuthContext';
import { useRouter } from 'next/navigation';

type AuthFormValues = Record<string, string>;

interface UseAuthFormProps {
  initialValues: AuthFormValues;
  endpoint: string;
  onSuccess?: () => void;
  redirectTo?: string;
  isLogin?: boolean;
}

export const useAuthForm = ({
  initialValues,
  endpoint,
  onSuccess,
  redirectTo,
  isLogin = false
}: UseAuthFormProps) => {
  const router = useRouter();
  const { setIsAuth, checkAuth } = useAuth();
  const [formValues, setFormValues] = useState<AuthFormValues>(initialValues);
  const [error, setError] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const [isSuccess, setIsSuccess] = useState(false);

  const handleChange = (e: ChangeEvent<HTMLInputElement>) => {
    const { name, value } = e.target;
    setFormValues(prev => ({ ...prev, [name]: value }));
  };

  const handleSubmit = async (e: FormEvent<HTMLFormElement>) => {
    e.preventDefault();
    setError('');
    setIsLoading(true);
    setIsSuccess(false);

    try {
      const response = await fetch(endpoint, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(formValues),
      });

      if (response.ok) {
        const data = await response.json();
        
        if (isLogin && data.access_token) {
          localStorage.setItem('token', data.access_token);
          setIsAuth(true);
          setIsSuccess(true);
          await checkAuth();
          window.dispatchEvent(new Event('auth-change'));
          
          if (redirectTo) {
            setTimeout(() => {
              router.push(redirectTo);
            }, 1000);
          }
        } else {
          // Для регистрации или других типов форм
          setFormValues(initialValues);
          if (onSuccess) onSuccess();
        }
      } else {
        const errorText = await response.text();
        let errorMessage = 'Ошибка запроса';
        try {
          const errorData = JSON.parse(errorText);
          errorMessage = errorData.detail || errorMessage;
        } catch {
          console.error('Не удалось разобрать JSON ошибки:', errorText);
        }
        setError(errorMessage);
      }
    } catch (error) {
      setError(`Произошла ошибка: ${error instanceof Error ? error.message : 'Неизвестная ошибка'}`);
      console.error('Form submission error:', error);
    } finally {
      setIsLoading(false);
    }
  };

  return {
    formValues,
    error,
    isLoading,
    isSuccess,
    handleChange,
    handleSubmit
  };
};
================
File: frontend\src\types\user.ts
// src/types/user.ts
export interface UserResponse {
    id: number;
    fio: string;
    email: string;
    telegram: string;
    whatsapp: string;
    avatar_url?: string; // Опционально, так как в схеме nullable
  }
================
File: servers\server_admin.py
from fastapi import FastAPI
from fastapi.middleware.cors import CORSMiddleware
from backend.api.event_routers import router as event_router
from backend.api.admin_auth_routers import router as admin_auth_router
from backend.api.admin_edit_routers import router as admin_edit_routers 
from backend.config.auth import get_user_or_ip_key
from backend.config.rate_limiter import limiter
from slowapi import _rate_limit_exceeded_handler
from slowapi.errors import RateLimitExceeded
import uvicorn

app = FastAPI(
    title="Event Management API",
    docs_url="/docs",
    redoc_url="/redoc"
)

# Настройка CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=["http://localhost:3000"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Настройка rate limiting
app.state.limiter = limiter
app.state.limiter.key_func = get_user_or_ip_key
app.add_exception_handler(RateLimitExceeded, _rate_limit_exceeded_handler)

# Подключение роутеров
app.include_router(event_router, prefix="/events", tags=["Events"])
app.include_router(admin_auth_router, prefix="/admin", tags=["Admin Authentication"])
app.include_router(admin_edit_routers, prefix="/admin_edits", tags=["Admin Edits"])

if __name__ == "__main__":
    uvicorn.run(
        "servers.server_admin:app",
        host="0.0.0.0",
        port=8001,  # Используем другой порт, чтобы не конфликтовать с server_user.py
        reload=True,
        log_level="info"
    )
================
File: servers\server_user.py
from fastapi import FastAPI
from fastapi.middleware.cors import CORSMiddleware
from backend.api.user_auth_routers import router as user_auth_router
from backend.config.auth import get_user_or_ip_key
from backend.config.logging_config import logger
from backend.config.rate_limiter import limiter
from slowapi import _rate_limit_exceeded_handler
from slowapi.errors import RateLimitExceeded
import uvicorn



app = FastAPI(
    title="User Authentication API",
    docs_url="/docs",
    redoc_url="/redoc"
)

app.add_middleware(
    CORSMiddleware,
    allow_origins=["http://localhost:3000"], # Адрес фронтенда
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Привязываем Limiter к приложению с кастомной функцией ключа
app.state.limiter = limiter
app.state.limiter.key_func = get_user_or_ip_key
app.add_exception_handler(RateLimitExceeded, _rate_limit_exceeded_handler)

# Подключение роутеров
app.include_router(user_auth_router, prefix="/auth", tags=["Authentication"])

if __name__ == "__main__":
    uvicorn.run(
        "servers.server_user:app",  # Исправлен путь к модулю
        host="0.0.0.0",
        port=8000,
        reload=True,
        log_level="info"
    )
================
