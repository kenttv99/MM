---
description: 
globs: 
alwaysApply: true
---



## Directory Tree with File Descriptions

When solving problems, one must always consider all the components that are involved in forming the state control and loading logic. 

```
frontend/src/
├── types/                   # Type definitions for the application
│   ├── api.ts               # API-related interfaces and types (ApiResponse, FetchOptionsType, etc.)
│   ├── events.ts            # Event-related interfaces (EventData, TicketType, EventResponse, etc.)
│   ├── index.ts             # Aggregation of component-specific interfaces and types
│   └── user.ts              # User-related interfaces (UserResponse, etc.)
│
├── utils/                   # Utility functions and services
│   ├── api.ts               # Core API communication layer with caching, queueing, and loading stage integration
│   ├── logger.ts            # Centralized logging system with levels, module configs, and performance tracking
│   ├── timerManager.ts      # Timer management to prevent memory leaks and track timeouts/intervals
│   ├── eventService.ts      # Event-related operations and API interactions
│   └── userService.ts       # User-related operations and API interactions
│
└── contexts/                # React Context providers for global state
    ├── AdminAuthContext.tsx # Authentication state and functions for admin users
    ├── AuthContext.tsx      # Authentication state for regular users (login/logout, tokens, etc.)
    ├── LoadingContextLegacy.tsx # Compatibility layer for legacy loading system
    ├── index.ts             # Exports all context providers and hooks
    └── loading/             # Modular loading state management system
        ├── index.ts         # Exports for loading contexts and utilities
        ├── types.ts         # Type definitions specific to loading system
        ├── LoadingStageContext.tsx    # Manages application loading stages and transitions
        ├── LoadingFlagsContext.tsx    # Handles loading flags (isStaticLoading, isDynamicLoading)
        ├── LoadingProgressContext.tsx # Tracks numerical loading progress
        ├── LoadingErrorContext.tsx    # Manages loading-related errors
        ├── LoadingProvider.tsx        # Combined provider for all loading contexts
        └── README.md                  # Documentation for the loading system
```

## Key Components and Responsibilities

### Types Directory
The `types` directory provides TypeScript interfaces and type definitions used throughout the application:

- **api.ts**: Defines core API-related interfaces including response types, request options, and cancellable promises.
- **events.ts**: Contains interfaces for event data, ticket types, and form handling for creating/updating events.
- **user.ts**: Defines user-related interfaces for user profile data.
- **index.ts**: Aggregates component-specific interfaces for props, state, and form handling across the application.

### Utils Directory
The `utils` directory contains utility modules with functions used across the application:

- **api.ts**: Implements the API communication layer with advanced features like request caching, deduplication, loading stage management, request queueing, and error handling.
- **logger.ts**: Provides a sophisticated logging system with different log levels, module-specific configurations, context tracking, and performance metrics.
- **timerManager.ts**: Manages application timers with tracking to prevent memory leaks, providing functions to create and clear timeouts/intervals safely.
- **eventService.ts**: Handles event-related operations such as creating, updating, and fetching events, as well as registration management.
- **userService.ts**: Manages user-related operations including profile updates, authentication, and preference settings.

### Contexts Directory
The `contexts` directory contains React Context providers for global state management:

- **AdminAuthContext.tsx**: Provides authentication state specifically for admin users.
- **AuthContext.tsx**: Manages authentication for regular users, including login/logout, token handling, and user data.
- **LoadingContextLegacy.tsx**: Compatibility layer for components still using the legacy loading system.
- **loading/**: A modular approach to loading state management:
  - **LoadingStageContext.tsx**: Manages application loading stages with controlled transitions.
  - **LoadingFlagsContext.tsx**: Handles visual loading indicators and loading state flags.
  - **LoadingProgressContext.tsx**: Tracks numerical progress for loading operations.
  - **LoadingErrorContext.tsx**: Manages loading-related error states.
  - **LoadingProvider.tsx**: Combines all specialized contexts into a unified provider.

## Architecture Insights

1. **Modular Loading System**: The application uses a modular approach to loading state management, allowing for precise control over different aspects of the loading process.

2. **Advanced API Handling**: The API utility includes sophisticated features for request management, ensuring optimal performance and user experience.

3. **Comprehensive Logging**: A robust logging system enables better debugging and monitoring of application behavior.

4. **Type Safety**: Extensive TypeScript interfaces ensure type safety throughout the application.

5. **Timer Management**: Careful tracking of timers prevents memory leaks in the long-running single-page application.

6. **Authentication Separation**: Separate context providers for regular and admin authentication allow for different authentication flows and access controls.