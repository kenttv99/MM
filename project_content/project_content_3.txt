File: frontend\src\components\Header.tsx
// frontend/src/components/Header.tsx
"use client";

import React, { useState, useEffect, useRef } from "react";
import Link from "next/link";
import { useRouter } from "next/navigation";
import { motion, AnimatePresence } from "framer-motion";
import Logo from "./Logo";
import Registration from "./Registration";
import Login from "./Login";
import { useAuth } from "@/contexts/AuthContext";

interface NavItem {
  href?: string;
  label: string;
  onClick?: () => void;
}

const Header: React.FC = () => {
  const { isAuth, logout } = useAuth();
  const [isScrolled, setIsScrolled] = useState(false);
  const [isMobileMenuOpen, setIsMobileMenuOpen] = useState(false);
  const [isRegistrationOpen, setIsRegistrationOpen] = useState(false);
  const [isLoginOpen, setIsLoginOpen] = useState(false);
  const [isNotificationsOpen, setIsNotificationsOpen] = useState(false);
  const notificationRef = useRef<HTMLDivElement>(null);
  const notificationButtonRef = useRef<HTMLButtonElement>(null);
  const notificationTimeoutRef = useRef<NodeJS.Timeout | null>(null);
  
  const router = useRouter();

  useEffect(() => {
    const handleScroll = () => setIsScrolled(window.scrollY > 20);
    window.addEventListener("scroll", handleScroll);
    return () => window.removeEventListener("scroll", handleScroll);
  }, []);

  useEffect(() => {
    const handleClickOutside = (event: MouseEvent) => {
      if (
        isNotificationsOpen &&
        notificationRef.current &&
        notificationButtonRef.current &&
        !notificationRef.current.contains(event.target as Node) &&
        !notificationButtonRef.current.contains(event.target as Node)
      ) {
        setIsNotificationsOpen(false);
      }
    };

    document.addEventListener("mousedown", handleClickOutside);
    return () => document.removeEventListener("mousedown", handleClickOutside);
  }, [isNotificationsOpen]);

  const startNotificationCloseTimer = () => {
    if (notificationTimeoutRef.current) clearTimeout(notificationTimeoutRef.current);
    notificationTimeoutRef.current = setTimeout(() => setIsNotificationsOpen(false), 1000);
  };

  const stopNotificationCloseTimer = () => {
    if (notificationTimeoutRef.current) {
      clearTimeout(notificationTimeoutRef.current);
      notificationTimeoutRef.current = null;
    }
  };

  const handleLogout = () => {
    logout();
    setIsNotificationsOpen(false); // Закрываем уведомления
    setIsMobileMenuOpen(false); // Закрываем мобильное меню
    router.push("/");
  };

  const toggleMobileMenu = () => setIsMobileMenuOpen((prev) => !prev);
  const toggleNotifications = () => setIsNotificationsOpen((prev) => !prev);

  const guestNavItems: NavItem[] = [
    { label: "Регистрация", onClick: () => setIsRegistrationOpen(true) },
    { label: "Войти", onClick: () => setIsLoginOpen(true) },
  ];

  const authNavItemsMobile: NavItem[] = [
    { href: "/profile", label: "Профиль" },
    { href: "/notifications", label: "Уведомления" },
    { href: "/partner", label: "Стать партнером" },
    { label: "Выход", onClick: handleLogout },
  ];

  const menuVariants = {
    closed: { opacity: 0, y: -20 },
    open: { opacity: 1, y: 0 },
  };

  const notificationVariants = {
    hidden: { opacity: 0, y: -10 },
    visible: { opacity: 1, y: 0 },
  };

  useEffect(() => {
    const handleAuthChange = () => {
      setIsLoginOpen(false);
      setIsRegistrationOpen(false);
    };
    
    window.addEventListener("auth-change", handleAuthChange);
    return () => window.removeEventListener("auth-change", handleAuthChange);
  }, []);

  return (
    <header
      className={`fixed top-0 left-0 right-0 z-30 transition-all duration-300 ${
        isScrolled ? "bg-white/95 backdrop-blur-sm shadow-lg py-3" : "bg-white/90 py-4"
      }`}
    >
      <div className="container mx-auto px-4 md:px-6 flex items-center justify-between">
        <Link href="/" className="transition-transform duration-300 hover:scale-105">
          <Logo />
        </Link>

        {/* Мобильное меню */}
        <div className="flex items-center md:hidden">
          {isAuth && (
            <Link href="/profile" className="mr-4 text-orange-500 hover:text-orange-600">
              <div className="w-8 h-8 bg-orange-100 rounded-full flex items-center justify-center">
                <svg className="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                  <path fillRule="evenodd" d="M10 9a3 3 0 100-6 3 3 0 000 6zm-7 9a7 7 0 1114 0H3z" clipRule="evenodd" />
                </svg>
              </div>
            </Link>
          )}
          <button onClick={toggleMobileMenu} className="text-gray-700 hover:text-orange-500">
            <svg className="h-6 w-6" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2">
              {isMobileMenuOpen ? <path d="M18 6L6 18M6 6l12 12" /> : <path d="M3 12h18M3 6h18M3 18h18" />}
            </svg>
          </button>
          <AnimatePresence>
            {isMobileMenuOpen && (
              <motion.div
                className="fixed inset-0 bg-white z-50 flex flex-col items-center justify-center"
                initial={{ opacity: 0 }}
                animate={{ opacity: 1 }}
                exit={{ opacity: 0 }}
              >
                <button 
                  onClick={toggleMobileMenu}
                  className="absolute top-4 right-4 text-gray-500 hover:text-orange-500"
                >
                  <svg className="h-8 w-8" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2">
                    <path d="M18 6L6 18M6 6l12 12" />
                  </svg>
                </button>
                <motion.ul
                  className="flex flex-col items-center space-y-6 text-xl"
                  variants={menuVariants}
                  initial="closed"
                  animate="open"
                  exit="closed"
                >
                  {(isAuth ? authNavItemsMobile : guestNavItems).map((item, index) => (
                    <motion.li key={index} whileHover={{ scale: 1.05 }} whileTap={{ scale: 0.95 }}>
                      {item.onClick ? (
                        <button onClick={item.onClick} className="text-gray-800 hover:text-orange-500">
                          {item.label}
                        </button>
                      ) : (
                        <Link 
                          href={item.href || "#"} 
                          className="text-gray-800 hover:text-orange-500"
                          onClick={() => setIsMobileMenuOpen(false)}
                        >
                          {item.label}
                        </Link>
                      )}
                    </motion.li>
                  ))}
                </motion.ul>
              </motion.div>
            )}
          </AnimatePresence>
        </div>

        {/* Десктопная навигация */}
        <div className="hidden md:flex items-center space-x-4">
          {isAuth ? (
            <>
              <Link href="/partner" className="text-orange-500 hover:text-orange-600 px-4 py-2 rounded-lg hover:bg-orange-50">
                Стать партнером
              </Link>
              <div className="relative">
                <button 
                  ref={notificationButtonRef}
                  onClick={toggleNotifications} 
                  className="text-orange-500 hover:text-orange-600"
                >
                  <div className="w-10 h-10 bg-orange-100 rounded-full flex items-center justify-center hover:bg-orange-200">
                    <svg className="h-6 w-6" viewBox="0 0 20 20" fill="currentColor">
                      <path d="M10 2a6 6 0 00-6 6v3.586l-.707.707A1 1 0 004 14h12a1 1 0 00.707-1.707L16 11.586V8a6 6 0 00-6-6zM10 18a3 3 0 01-3-3h6a3 3 0 01-3 3z" />
                    </svg>
                  </div>
                </button>
                <AnimatePresence>
                  {isNotificationsOpen && (
                    <motion.div
                      ref={notificationRef}
                      className="absolute right-0 top-full mt-2 w-64 bg-white rounded-md shadow-lg py-4 border border-gray-200 z-20"
                      initial="hidden"
                      animate="visible"
                      exit="hidden"
                      variants={notificationVariants}
                      onMouseEnter={stopNotificationCloseTimer}
                      onMouseLeave={startNotificationCloseTimer}
                    >
                      <div className="text-center text-gray-500 text-sm">Нет уведомлений</div>
                    </motion.div>
                  )}
                </AnimatePresence>
              </div>
              
              <Link href="/profile" className="text-orange-500 hover:text-orange-600">
                <div className="w-10 h-10 bg-orange-100 rounded-full flex items-center justify-center hover:bg-orange-200">
                  <svg className="h-6 w-6" viewBox="0 0 20 20" fill="currentColor">
                    <path fillRule="evenodd" d="M10 9a3 3 0 100-6 3 3 0 000 6zm-7 9a7 7 0 1114 0H3z" clipRule="evenodd" />
                  </svg>
                </div>
              </Link>
              
              <button 
                onClick={handleLogout} 
                className="text-orange-500 hover:text-orange-600 ml-2"
                title="Выход"
              >
                <svg className="h-6 w-6" viewBox="0 0 20 20" fill="currentColor">
                  <path fillRule="evenodd" d="M5 4a1 1 0 00-1 1v10a1 1 0 001 1h6a1 1 0 110 2H5a3 3 0 01-3-3V5a3 3 0 013-3h6a1 1 0 010 2H5zM14.293 6.293a1 1 0 011.414 0l3 3a1 1 0 010 1.414l-3 3a1 1 0 01-1.414-1.414L15.586 11H9a1 1 0 110-2h6.586l-1.293-1.293a1 1 0 010-1.414z" clipRule="evenodd" />
                </svg>
              </button>
            </>
          ) : (
            <div className="flex items-center space-x-4">
              <motion.button
                whileHover={{ scale: 1.03 }}
                whileTap={{ scale: 0.97 }}
                onClick={() => setIsRegistrationOpen(true)}
                className="px-4 py-2 border border-orange-500 text-orange-500 rounded-lg hover:bg-orange-50"
              >
                Регистрация
              </motion.button>
              <motion.button
                whileHover={{ scale: 1.03 }}
                whileTap={{ scale: 0.97 }}
                onClick={() => setIsLoginOpen(true)}
                className="px-4 py-2 bg-orange-500 text-white rounded-lg hover:bg-orange-600"
              >
                Войти
              </motion.button>
            </div>
          )}
        </div>
      </div>

      <Registration 
        isOpen={isRegistrationOpen} 
        onClose={() => setIsRegistrationOpen(false)} 
        setLoginOpen={setIsLoginOpen} 
      />
      <Login 
        isOpen={isLoginOpen} 
        onClose={() => setIsLoginOpen(false)} 
      />
    </header>
  );
};

export default Header;
================
File: frontend\src\components\Loading.tsx
// frontend/src/components/Loading.tsx
import React from "react";

const Loading = () => {
  return (
    <div className="fixed inset-0 bg-white bg-opacity-80 flex items-center justify-center z-20" style={{ overflow: 'hidden' }}>
      <div className="flex flex-col items-center">
        <div className="relative w-16 h-16">
          {/* Multiple circles with staggered animations */}
          <div className="absolute inset-0 rounded-full border-4 border-t-orange-500 border-r-transparent border-b-transparent border-l-transparent animate-spin"></div>
          <div className="absolute inset-1 rounded-full border-4 border-t-transparent border-r-orange-400 border-b-transparent border-l-transparent animate-spin" style={{ animationDuration: '1s', animationDirection: 'reverse' }}></div>
          <div className="absolute inset-2 rounded-full border-4 border-t-transparent border-r-transparent border-b-orange-300 border-l-transparent animate-spin" style={{ animationDuration: '1.5s' }}></div>
          <div className="absolute inset-3 rounded-full border-4 border-t-transparent border-r-transparent border-b-transparent border-l-orange-200 animate-spin" style={{ animationDuration: '2s', animationDirection: 'reverse' }}></div>
        </div>
        <span className="mt-4 text-orange-500 font-semibold">Loading...</span>
      </div>
    </div>
  );
};

export default Loading;
================
File: frontend\src\components\Login.tsx
"use client";

import React from "react";
import { FaEnvelope, FaLock } from "react-icons/fa";
import AuthModal, { ModalButton } from "./common/AuthModal";
import InputField from "./common/InputField";
import { useAuthForm } from "@/hooks/useAuthForm";

interface LoginProps {
  isOpen?: boolean; // Опционально для модального окна
  onClose?: () => void; // Опционально для модального окна
  isAdminLogin?: boolean; // Указывает, что это админская авторизация
}

const Login: React.FC<LoginProps> = ({ isOpen, onClose, isAdminLogin = false }) => {
  const endpoint = isAdminLogin ? "/admin/login" : "/auth/login";
  const redirectTo = isAdminLogin ? "/admin" : "/";
  
  const {
    formValues,
    error,
    isLoading,
    isSuccess,
    handleChange,
    handleSubmit,
  } = useAuthForm({
    initialValues: { email: "", password: "" },
    endpoint,
    redirectTo,
    isLogin: true,
  });

  // Если используется как страница, а не модалка
  if (!isOpen || !onClose) {
    return (
      <div className="space-y-6">
        <form onSubmit={handleSubmit}>
          <InputField
            type="email"
            value={formValues.email}
            onChange={handleChange}
            placeholder="Введите email"
            icon={FaEnvelope}
            name="email"
            disabled={isSuccess}
          />
          <InputField
            type="password"
            value={formValues.password}
            onChange={handleChange}
            placeholder="Введите пароль"
            icon={FaLock}
            name="password"
            disabled={isSuccess}
          />
          {error && (
            <p className="text-red-500 text-sm mt-2">{error}</p>
          )}
          <button
            type="submit"
            disabled={isLoading || isSuccess}
            className="w-full mt-4 px-6 py-3 bg-orange-500 text-white rounded-lg hover:bg-orange-600 disabled:opacity-50 disabled:cursor-not-allowed transition-all duration-300"
          >
            {isLoading ? "Вход..." : isSuccess ? "Успешно!" : "Войти"}
          </button>
        </form>
      </div>
    );
  }

  // Если используется как модалка
  return (
    <AuthModal
      isOpen={isOpen}
      onClose={onClose}
      title="Вход"
      error={error}
      success={isSuccess ? "Вход выполнен успешно!" : undefined}
    >
      <form onSubmit={handleSubmit} className="space-y-6">
        <InputField
          type="email"
          value={formValues.email}
          onChange={handleChange}
          placeholder="Введите email"
          icon={FaEnvelope}
          name="email"
          disabled={isSuccess}
        />
        <InputField
          type="password"
          value={formValues.password}
          onChange={handleChange}
          placeholder="Введите пароль"
          icon={FaLock}
          name="password"
          disabled={isSuccess}
        />
        <div className="flex justify-end space-x-4">
          <ModalButton
            variant="secondary"
            onClick={onClose}
            disabled={isLoading || isSuccess}
          >
            Закрыть
          </ModalButton>
          <ModalButton
            type="submit"
            variant="primary"
            disabled={isLoading || isSuccess}
          >
            {isLoading ? "Вход..." : isSuccess ? "Успешно!" : "Войти"}
          </ModalButton>
        </div>
      </form>
    </AuthModal>
  );
};

export default Login;
================
File: frontend\src\components\Logo.tsx
import React from 'react';
import Image from 'next/image';

const Logo = () => {
  return (
    <div className="flex items-center">
      <div className="relative w-10 h-10 mr-2">
        <Image 
          src="/photo_2025-01-13_11-50-23.jpg" 
          alt="Moscow Mellows Logo" 
          fill
          className="object-cover rounded-full"
        />
      </div>
      <span className="ml-1 text-xl font-bold text-black">
        Moscow Mellows
      </span>
    </div>
  );
};

export default Logo;
================
File: frontend\src\components\Media.tsx
"use client"

import React, { useState } from 'react';
import Image from 'next/image';

// Моковые данные для галереи
const mediaItems = [
  {
    id: 1,
    type: 'image',
    url: 'https://images.unsplash.com/photo-1501281668745-f7f57925c3b4?ixlib=rb-4.0.3&auto=format&fit=crop&w=600&q=80',
    title: 'Летний музыкальный фестиваль 2024',
    category: 'Концерты'
  },
  {
    id: 2,
    type: 'image',
    url: 'https://images.unsplash.com/photo-1492684223066-81342ee5ff30?ixlib=rb-4.0.3&auto=format&fit=crop&w=600&q=80',
    title: 'Мастер-класс по живописи',
    category: 'Мастер-классы'
  },
  {
    id: 3,
    type: 'image',
    url: 'https://images.unsplash.com/photo-1531058020387-3be344556be6?ixlib=rb-4.0.3&auto=format&fit=crop&w=600&q=80',
    title: 'Театральная постановка "Вишневый сад"',
    category: 'Театр'
  },
  {
    id: 4,
    type: 'image',
    url: 'https://images.unsplash.com/photo-1470229722913-7c0e2dbbafd3?ixlib=rb-4.0.3&auto=format&fit=crop&w=600&q=80',
    title: 'Рок-концерт в клубе "Атмосфера"',
    category: 'Концерты'
  },
  {
    id: 5,
    type: 'image',
    url: 'https://images.unsplash.com/photo-1533174072545-7a4b6ad7a6a3?ixlib=rb-4.0.3&auto=format&fit=crop&w=600&q=80',
    title: 'Выставка современного искусства',
    category: 'Выставки'
  },
  {
    id: 6,
    type: 'image',
    url: 'https://images.unsplash.com/photo-1560439514-4e9645039924?ixlib=rb-4.0.3&auto=format&fit=crop&w=600&q=80',
    title: 'Фестиваль уличной еды',
    category: 'Фестивали'
  }
];

const Media = () => {
  const [selectedImage, setSelectedImage] = useState<number | null>(null);

  // Функция для открытия модального окна с изображением
  const openModal = (id: number) => {
    setSelectedImage(id);
    // Блокируем прокрутку body при открытии модального окна
    document.body.style.overflow = 'hidden';
  };

  // Функция для закрытия модального окна
  const closeModal = () => {
    setSelectedImage(null);
    // Разблокируем прокрутку body при закрытии модального окна
    document.body.style.overflow = 'auto';
  };

  // Найти выбранное изображение
  const selectedItem = selectedImage !== null ? mediaItems.find(item => item.id === selectedImage) : null;

  return (
    <section className="py-20 bg-gray-50">
      <div className="container mx-auto px-4 md:px-6">
        <div className="text-center mb-12">
          <h2 className="text-3xl font-bold mb-3">Медиа <span className="text-blue-600">галерея</span></h2>
          <p className="text-gray-600 max-w-2xl mx-auto">
            Взгляните на яркие моменты с наших прошедших мероприятий. Присоединяйтесь к нам, чтобы стать частью следующих событий!
          </p>
        </div>
        
        {/* Галерея изображений */}
        <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6">
          {mediaItems.map((item) => (
            <div 
              key={item.id}
              className="group relative overflow-hidden rounded-xl shadow-md hover:shadow-xl transition-all duration-300 transform hover:-translate-y-1 cursor-pointer"
              onClick={() => openModal(item.id)}
            >
              <div className="aspect-[4/3] overflow-hidden relative">
                <Image 
                  src={item.url} 
                  alt={item.title}
                  fill
                  sizes="(max-width: 768px) 100vw, (max-width: 1200px) 50vw, 33vw"
                  className="object-cover transition-transform duration-700 group-hover:scale-110"
                />
              </div>
              <div className="absolute inset-0 bg-gradient-to-t from-black/70 to-transparent opacity-0 group-hover:opacity-100 transition-opacity duration-300">
                <div className="absolute bottom-0 left-0 right-0 p-4 text-white">
                  <div className="text-xs font-medium mb-1 opacity-75">{item.category}</div>
                  <h3 className="font-bold">{item.title}</h3>
                </div>
              </div>
            </div>
          ))}
        </div>
        
        {/* Кнопка "Показать все" */}
        <div className="text-center mt-12">
          <button className="inline-flex items-center px-6 py-3 bg-blue-600 text-white font-medium rounded-lg hover:bg-blue-700 shadow-md hover:shadow-lg transition-all duration-300">
            Смотреть все медиа
            <svg className="w-5 h-5 ml-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M14 5l7 7m0 0l-7 7m7-7H3" />
            </svg>
          </button>
        </div>
        
        {/* Модальное окно */}
        {selectedImage !== null && (
          <div className="fixed inset-0 bg-black/80 z-50 flex items-center justify-center p-4" onClick={closeModal}>
            <div className="relative max-w-4xl w-full" onClick={(e) => e.stopPropagation()}>
              <button 
                onClick={closeModal}
                className="absolute top-4 right-4 text-white bg-black/50 rounded-full p-2 hover:bg-black/70 transition-colors duration-200 z-10"
                aria-label="Закрыть"
              >
                <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M6 18L18 6M6 6l12 12" />
                </svg>
              </button>
              {selectedItem && (
                <div className="bg-white rounded-xl overflow-hidden shadow-2xl">
                  <div className="relative w-full h-[80vh]">
                    <Image 
                      src={selectedItem.url} 
                      alt={selectedItem.title}
                      fill
                      sizes="100vw"
                      className="object-contain" 
                    />
                  </div>
                  <div className="p-4 bg-white">
                    <div className="text-sm text-blue-600 font-medium mb-1">{selectedItem.category}</div>
                    <h3 className="text-xl font-bold mb-1">{selectedItem.title}</h3>
                  </div>
                </div>
              )}
            </div>
          </div>
        )}
      </div>
    </section>
  );
};

export default Media;
================
File: frontend\src\components\PartnerButton.tsx
import React from 'react';
import Link from 'next/link';

interface PartnerButtonProps {
  onClick?: () => void;
}

const PartnerButton = ({ onClick }: PartnerButtonProps) => {
  return (
    <Link 
      href="/partner" 
      className="inline-flex items-center px-5 py-2.5 bg-orange-500 hover:bg-orange-600 text-white font-medium rounded-lg 
                shadow-md hover:shadow-lg transform hover:-translate-y-0.5 transition-all duration-300 ease-in-out"
      onClick={onClick}
    >
      Стать партнером
    </Link>
  );
};

export default PartnerButton;
================
File: frontend\src\components\Registration.tsx
// frontend/src/components/Registration.tsx
"use client";

import React, { Dispatch, SetStateAction } from "react";
import { FaUser, FaEnvelope, FaLock, FaTelegram, FaWhatsapp } from "react-icons/fa";
import { IconType } from "react-icons";
import AuthModal, { ModalButton } from "./common/AuthModal";
import InputField from "./common/InputField";
import { useAuthForm } from "@/hooks/useAuthForm";

interface RegistrationProps {
  isOpen: boolean;
  onClose: () => void;
  setLoginOpen: Dispatch<SetStateAction<boolean>>;
}

interface FieldConfig {
  name: string;
  type: string;
  placeholder: string;
  icon: IconType;
}

const Registration: React.FC<RegistrationProps> = ({ isOpen, onClose, setLoginOpen }) => {
  const fields: FieldConfig[] = [
    { name: "fio", type: "text", placeholder: "Введите ваше ФИО", icon: FaUser },
    { name: "email", type: "email", placeholder: "Введите email", icon: FaEnvelope },
    { name: "password", type: "password", placeholder: "Введите пароль", icon: FaLock },
    { name: "telegram", type: "text", placeholder: "Введите Telegram", icon: FaTelegram },
    { name: "whatsapp", type: "text", placeholder: "Введите WhatsApp", icon: FaWhatsapp },
  ];

  const initialValues = {
    fio: "",
    email: "",
    password: "",
    telegram: "",
    whatsapp: "",
  };

  const onSuccess = () => {
    onClose();
    setLoginOpen(true);
  };

  const {
    formValues,
    error,
    isLoading,
    handleChange,
    handleSubmit
  } = useAuthForm({
    initialValues,
    endpoint: "/auth/register",
    onSuccess
  });

  return (
    <AuthModal isOpen={isOpen} onClose={onClose} title="Регистрация" error={error}>
      <form onSubmit={handleSubmit} className="space-y-6">
        {fields.map((field) => (
          <InputField
            key={field.name}
            type={field.type}
            value={formValues[field.name]}
            onChange={handleChange}
            placeholder={field.placeholder}
            icon={field.icon}
            name={field.name}
          />
        ))}
        <div className="flex justify-end space-x-4">
          <ModalButton variant="secondary" onClick={onClose} disabled={isLoading}>
            Закрыть
          </ModalButton>
          <ModalButton type="submit" variant="primary" disabled={isLoading}>
            {isLoading ? "Регистрация..." : "Зарегистрироваться"}
          </ModalButton>
        </div>
      </form>
    </AuthModal>
  );
};

export default Registration;
================
File: frontend\src\components\common\AuthModal.tsx
// frontend/src/components/common/AuthModal.tsx
"use client";

import React, { ReactNode } from "react";
import { motion, AnimatePresence } from "framer-motion";

// Types for ModalButton props
interface ModalButtonProps {
  type?: "button" | "submit" | "reset";
  onClick?: () => void;
  variant?: string;
  disabled?: boolean;
  children: ReactNode;
}

// Button component with animations
export const ModalButton: React.FC<ModalButtonProps> = ({ 
  type = "button", 
  onClick, 
  variant = "primary", 
  disabled = false,
  children 
}) => (
  <motion.button
    whileHover={{ scale: disabled ? 1 : 1.01 }}
    whileTap={{ scale: disabled ? 1 : 0.99 }}
    type={type}
    onClick={onClick}
    disabled={disabled}
    className={`
      px-6 py-3 rounded-lg transition-all duration-300
      ${variant === "primary" 
        ? `bg-orange-500 text-white ${disabled ? 'opacity-50 cursor-not-allowed' : 'hover:bg-orange-600'}` 
        : `bg-gray-100 text-gray-700 ${disabled ? 'opacity-50 cursor-not-allowed' : 'hover:bg-gray-200'} border border-gray-200`}
    `}
  >
    {children}
  </motion.button>
);

// Types for AuthModal props
interface AuthModalProps {
  isOpen: boolean;
  onClose: () => void;
  title: string;
  error?: string;
  success?: string;
  children: ReactNode;
}

// Modal wrapper component
const AuthModal: React.FC<AuthModalProps> = ({ 
  isOpen, 
  onClose, 
  title, 
  error,
  success,
  children 
}) => {
  if (!isOpen) return null;

  return (
    <AnimatePresence>
      {isOpen && (
        <motion.div
          initial={{ opacity: 0, backdropFilter: "blur(0px)" }}
          animate={{ opacity: 1, backdropFilter: "blur(4px)" }}
          exit={{ opacity: 0, backdropFilter: "blur(0px)" }}
          transition={{ duration: 0.3, ease: "easeInOut" }}
          className="fixed inset-0 bg-white/75 flex items-center justify-center z-50"
          onClick={onClose}
        >
          <motion.div
            initial={{ scale: 0.95, opacity: 0, y: 20 }}
            animate={{ scale: 1, opacity: 1, y: 0 }}
            exit={{ scale: 0.95, opacity: 0, y: 20 }}
            transition={{ 
              type: "spring", 
              damping: 25, 
              stiffness: 300 
            }}
            className="bg-white p-8 rounded-2xl shadow-lg w-full max-w-md border border-gray-100"
            onClick={(e) => e.stopPropagation()}
          >
            <h2 className="text-2xl font-bold mb-6 text-gray-900 tracking-tight">{title}</h2>
            
            {error && (
              <motion.div
                initial={{ opacity: 0, height: 0 }}
                animate={{ opacity: 1, height: "auto" }}
                exit={{ opacity: 0, height: 0 }}
                className="overflow-hidden"
              >
                <div className="text-red-500 mb-6 bg-red-50 p-3 rounded-lg border-l-4 border-red-500 text-sm">
                  {error}
                </div>
              </motion.div>
            )}

            {success && (
              <motion.div
                initial={{ opacity: 0, height: 0 }}
                animate={{ opacity: 1, height: "auto" }}
                exit={{ opacity: 0, height: 0 }}
                className="overflow-hidden"
              >
                <div className="text-green-600 mb-6 bg-green-50 p-3 rounded-lg border-l-4 border-green-500 text-sm">
                  {success}
                </div>
              </motion.div>
            )}
            
            {children}
          </motion.div>
        </motion.div>
      )}
    </AnimatePresence>
  );
};

export default AuthModal;
================
File: frontend\src\components\common\InputField.tsx
// frontend/src/components/common/InputField.tsx
import React, { useState, ChangeEvent, FocusEvent } from "react"; // Добавляем FocusEvent
import { IconType } from "react-icons";

interface InputFieldProps {
  type: string;
  value: string;
  onChange: (e: ChangeEvent<HTMLInputElement>) => void;
  placeholder: string;
  icon: IconType;
  required?: boolean;
  name?: string;
  disabled?: boolean;
  onBlur?: (e: FocusEvent<HTMLInputElement>) => void; // Добавляем новый проп
}

const InputField: React.FC<InputFieldProps> = ({
  type,
  value,
  onChange,
  placeholder,
  icon: Icon,
  required = true,
  name,
  disabled = false,
  onBlur, // Добавляем в деструктуризацию
}) => {
  const [isFocused, setIsFocused] = useState(false);

  return (
    <div className="relative mb-5 h-[60px]">
      <div className="absolute inset-0">
        <input
          type={type}
          value={value}
          onChange={onChange}
          placeholder={placeholder}
          name={name}
          disabled={disabled}
          className={`
            w-full h-full p-4 pr-12
            bg-white text-gray-900 
            placeholder:text-gray-400 
            rounded-lg outline-none
            border
            ${disabled ? 'bg-gray-50 opacity-70 cursor-not-allowed' : ''}
          `}
          style={{
            borderColor: isFocused ? "#f97316" : "#e5e7eb",
            borderWidth: "1px",
            transition: "border-color 0.5s ease-out",
            // Box-shadow создает эффект увеличения нижней границы без изменения размеров элемента
            boxShadow: isFocused 
              ? "inset 0 -2px 0 #f97316" 
              : "inset 0 0 0 transparent",
            transitionProperty: "border-color, box-shadow",
            transitionDuration: "0.5s",
            transitionTimingFunction: "ease-out"
          }}
          required={required}
          onFocus={() => !disabled && setIsFocused(true)}
          onBlur={(e) => { // Обновляем обработчик
            setIsFocused(false);
            if (onBlur) onBlur(e); // Вызываем переданный onBlur, если он есть
          }}
        />
        
        {/* Иконка с плавной анимацией цвета */}
        <div className="absolute right-3 top-1/2 transform -translate-y-1/2 pointer-events-none">
          <Icon 
            className="transition-colors duration-500"
            style={{
              color: isFocused ? "#f97316" : (disabled ? "#d1d5db" : "#9ca3af") // orange-500 : gray-400 or gray-300 if disabled
            }}
            size={18}
          />
        </div>
      </div>
    </div>
  );
};

export default InputField;
================
File: frontend\src\contexts\AdminAuthContext.tsx
// frontend/src/contexts/AdminAuthContext.tsx
"use client";

import React, { createContext, useState, useEffect, useContext, useCallback } from "react";
import { useRouter } from "next/navigation";

interface AdminData {
  id: number;
  fio: string;
  email: string;
  avatar_url?: string;
}

interface AdminAuthContextType {
  isAdminAuth: boolean;
  adminData: AdminData | null;
  isLoading: boolean;
  checkAuth: () => Promise<void>;
  logoutAdmin: () => void;
}

export const AdminAuthContext = createContext<AdminAuthContextType | undefined>(undefined);

const STORAGE_KEYS = {
  ADMIN_TOKEN: 'admin_token',
  ADMIN_DATA: 'admin_data'
};

const setAdminCache = (data: AdminData | null) => {
  if (typeof window === 'undefined') return;
  if (data) {
    localStorage.setItem(STORAGE_KEYS.ADMIN_DATA, JSON.stringify(data));
  } else {
    localStorage.removeItem(STORAGE_KEYS.ADMIN_DATA);
  }
};

export const AdminAuthProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {
  const [isAdminAuth, setIsAdminAuth] = useState<boolean>(false);
  const [adminData, setAdminData] = useState<AdminData | null>(null);
  const [isLoading, setIsLoading] = useState<boolean>(true);
  const [hasCheckedAuth, setHasCheckedAuth] = useState(false);
  const router = useRouter();

  const fetchAdminData = useCallback(async (token: string): Promise<AdminData | null> => {
    try {
      const response = await fetch('/admin/me', {
        headers: {
          Authorization: `Bearer ${token}`,
          'Cache-Control': 'no-cache',
        },
      });
      if (response.ok) {
        const data = await response.json();
        setAdminCache(data);
        return data;
      }
      return null;
    } catch (error) {
      console.error('Ошибка загрузки данных админа:', error);
      return null;
    }
  }, []);

  const checkAuth = useCallback(async () => {
    if (hasCheckedAuth) return;
    setHasCheckedAuth(true);
    setIsLoading(true);

    const token = localStorage.getItem(STORAGE_KEYS.ADMIN_TOKEN);
    if (!token) {
      setIsAdminAuth(false);
      setAdminData(null);
      setIsLoading(false);
      return;
    }

    const data = await fetchAdminData(token);
    if (data) {
      setAdminData(data);
      setIsAdminAuth(true);
    } else {
      localStorage.removeItem(STORAGE_KEYS.ADMIN_TOKEN);
      setAdminCache(null);
      setIsAdminAuth(false);
      setAdminData(null);
    }
    setIsLoading(false);
  }, [fetchAdminData, hasCheckedAuth]);

  const logoutAdmin = useCallback(() => {
    localStorage.removeItem(STORAGE_KEYS.ADMIN_TOKEN);
    setAdminCache(null);
    setIsAdminAuth(false);
    setAdminData(null);
    router.push("/admin-login");
  }, [router]);

  useEffect(() => {
    checkAuth();
  }, [checkAuth]);

  const contextValue = {
    isAdminAuth,
    adminData,
    isLoading,
    checkAuth,
    logoutAdmin,
  };

  return (
    <AdminAuthContext.Provider value={contextValue}>
      {children}
    </AdminAuthContext.Provider>
  );
};

export const useAdminAuth = () => {
  const context = useContext(AdminAuthContext);
  if (!context) {
    throw new Error("useAdminAuth must be used within an AdminAuthProvider");
  }
  return context;
};
================
File: frontend\src\contexts\AuthContext.tsx
// frontend/src/contexts/AuthContext.tsx
"use client";

import React, { createContext, useState, useEffect, useContext, useCallback, useRef } from "react";
import { useRouter } from "next/navigation";

interface UserData {
  id: number;
  fio: string;
  email: string;
  telegram: string;
  whatsapp: string;
  avatar_url?: string;
}

interface AuthContextType {
  isAuth: boolean;
  userData: UserData | null;
  setIsAuth: (auth: boolean) => void;
  checkAuth: () => Promise<boolean>;
  isLoading: boolean;
  logout: () => void;
}

const AuthContext = createContext<AuthContextType | undefined>(undefined);

// Функция для декодирования JWT без проверки подписи
function decodeJwt(token: string): { exp: number; sub: string } | null {
  try {
    const parts = token.split(".");
    if (parts.length !== 3) return null;

    const payload = JSON.parse(atob(parts[1].replace(/-/g, "+").replace(/_/g, "/")));
    return payload;
  } catch (err) {
    console.error("Ошибка при декодировании токена:", err);
    return null;
  }
}

// Проверяем, истек ли срок действия токена
function isTokenExpired(token: string): boolean {
  const decoded = decodeJwt(token);
  if (!decoded) return true;

  const currentTime = Math.floor(Date.now() / 1000);
  return decoded.exp < currentTime;
}

// Функции для хранения и получения данных пользователя из кэша
const STORAGE_KEYS = {
  TOKEN: "token",
  USER_DATA: "user_data",
};

const getUserCache = (): UserData | null => {
  if (typeof window === "undefined") return null;
  const cached = localStorage.getItem(STORAGE_KEYS.USER_DATA);
  return cached ? JSON.parse(cached) : null;
};

const setUserCache = (data: UserData | null) => {
  if (typeof window === "undefined") return;
  if (data) {
    localStorage.setItem(STORAGE_KEYS.USER_DATA, JSON.stringify(data));
  } else {
    localStorage.removeItem(STORAGE_KEYS.USER_DATA);
  }
};

export const AuthProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {
  const [isAuth, setIsAuth] = useState<boolean>(false);
  const [userData, setUserData] = useState<UserData | null>(null);
  const [isLoading, setIsLoading] = useState<boolean>(true);
  const isInitialLoad = useRef(true);
  const fetchingUserData = useRef(false);
  const checkAuthInProgress = useRef(false);
  const router = useRouter();

  // Функция для загрузки данных пользователя с сервера
  const fetchUserData = useCallback(async (): Promise<UserData | null> => {
    if (fetchingUserData.current) return null;

    fetchingUserData.current = true;

    try {
      let token = localStorage.getItem(STORAGE_KEYS.TOKEN);
      if (!token) return null;

      // Проверяем и извлекаем токен, если он в формате "Bearer "
      if (token.startsWith("Bearer ")) {
        token = token.slice(7).trim();
      }

      const controller = new AbortController();
      const timeoutId = setTimeout(() => controller.abort(), 8000);

      const response = await fetch("/auth/me", {
        headers: {
          Authorization: `Bearer ${token}`,
          "Cache-Control": "no-cache",
        },
        signal: controller.signal,
      });

      clearTimeout(timeoutId);

      if (response.ok) {
        const data = await response.json();
        setUserCache(data);
        return data;
      }

      return null;
    } catch (error) {
      console.error("Ошибка загрузки данных пользователя:", error);
      return null;
    } finally {
      fetchingUserData.current = false;
    }
  }, []);

  // Функция для проверки авторизации
  const checkAuth = useCallback(async (): Promise<boolean> => {
    if (checkAuthInProgress.current) return isAuth;

    checkAuthInProgress.current = true;

    try {
      setIsLoading(true);

      let token = localStorage.getItem(STORAGE_KEYS.TOKEN);
      if (!token) {
        setIsAuth(false);
        setUserData(null);
        setUserCache(null);
        return false;
      }

      // Проверяем формат токена
      if (token.startsWith("Bearer ")) {
        token = token.slice(7).trim();
      }

      if (isTokenExpired(token)) {
        localStorage.removeItem(STORAGE_KEYS.TOKEN);
        setUserCache(null);
        setIsAuth(false);
        setUserData(null);
        return false;
      }

      setIsAuth(true);

      if (!userData) {
        const cachedData = getUserCache();
        if (cachedData) {
          setUserData(cachedData);
        }
      }

      if (isInitialLoad.current) {
        isInitialLoad.current = false;

        const fetchedData = await fetchUserData();
        if (fetchedData) {
          setUserData(fetchedData);
        } else if (!getUserCache()) {
          // Если данные не удалось загрузить и кэш пуст, считаем пользователя неавторизованным
          setIsAuth(false);
          localStorage.removeItem(STORAGE_KEYS.TOKEN);
          return false;
        }
      }

      return true;
    } catch (error) {
      console.error("Ошибка проверки авторизации:", error);
      return isAuth;
    } finally {
      setIsLoading(false);
      checkAuthInProgress.current = false;
    }
  }, [fetchUserData, isAuth, userData]);

  // Функция для выхода
  const logout = useCallback(() => {
    localStorage.removeItem(STORAGE_KEYS.TOKEN);
    setUserCache(null);
    setIsAuth(false);
    setUserData(null);
    window.dispatchEvent(new Event("auth-change"));
    router.push("/"); // Перенаправляем на главную страницу после выхода
  }, [router]);

  // Инициализация из кэша при монтировании компонента
  useEffect(() => {
    const initAuth = async () => {
      const cachedUser = getUserCache();
      let token = localStorage.getItem(STORAGE_KEYS.TOKEN);

      if (token && token.startsWith("Bearer ")) {
        token = token.slice(7).trim();
      }

      if (cachedUser && token && !isTokenExpired(token)) {
        setUserData(cachedUser);
        setIsAuth(true);
      } else {
        setIsAuth(false);
        if (!token) {
          setUserData(null);
        }
      }

      await checkAuth();
      setIsLoading(false);
    };

    initAuth();
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, []);

  // Настройка обработчиков событий
  useEffect(() => {
    const handleStorageChange = (e: StorageEvent) => {
      if (e.key === STORAGE_KEYS.TOKEN) {
        checkAuth();
      }
    };

    const handleAuthChange = () => checkAuth();

    window.addEventListener("storage", handleStorageChange);
    window.addEventListener("auth-change", handleAuthChange);

    return () => {
      window.removeEventListener("storage", handleStorageChange);
      window.removeEventListener("auth-change", handleAuthChange);
    };
  }, [checkAuth]);

  const contextValue = {
    isAuth,
    userData,
    setIsAuth,
    checkAuth,
    isLoading,
    logout,
  };

  return (
    <AuthContext.Provider value={contextValue}>
      {children}
    </AuthContext.Provider>
  );
};

export const useAuth = () => {
  const context = useContext(AuthContext);
  if (!context) {
    throw new Error("useAuth must be used within an AuthProvider");
  }
  return context;
};
================
File: frontend\src\hooks\useAdminAuthForm.ts
// frontend/src/hooks/useAdminAuthForm.ts
import { useState, useCallback } from "react";
import { useRouter } from "next/navigation";
import { useAdminAuth } from "@/contexts/AdminAuthContext";

interface FormValues {
  email: string;
  password: string;
}

interface AuthFormOptions {
  initialValues: FormValues;
  endpoint: string;
  redirectTo: string;
}

export const useAdminAuthForm = ({ initialValues, endpoint, redirectTo }: AuthFormOptions) => {
  const [formValues, setFormValues] = useState<FormValues>(initialValues);
  const [error, setError] = useState("");
  const [isLoading, setIsLoading] = useState(false);
  const [isSuccess, setIsSuccess] = useState(false);
  const router = useRouter();
  const { checkAuth } = useAdminAuth();

  const handleChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {
    const { name, value } = e.target;
    setFormValues((prev) => ({ ...prev, [name]: value }));
  }, []);

  const handleSubmit = useCallback(
    async (e: React.FormEvent<HTMLFormElement>) => {
      e.preventDefault();
      setError("");
      setIsLoading(true);

      try {
        const response = await fetch(endpoint, {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify(formValues),
        });

        if (!response.ok) {
          const errorData = await response.json();
          throw new Error(errorData.detail || "Ошибка авторизации");
        }

        const data = await response.json();
        localStorage.setItem("admin_token", data.access_token);
        setIsSuccess(true);

        // Обновляем состояние авторизации в контексте
        await checkAuth();

        setTimeout(() => {
          router.push(redirectTo);
        }, 1500);
      } catch (err) {
        setError(err instanceof Error ? err.message : "Произошла ошибка");
      } finally {
        setIsLoading(false);
      }
    },
    [formValues, endpoint, redirectTo, router, checkAuth]
  );

  return {
    formValues,
    error,
    isLoading,
    isSuccess,
    handleChange,
    handleSubmit,
  };
};
================
File: frontend\src\hooks\useAuthForm.tsx
// src/hooks/useAuthForm.ts
import { useState, FormEvent, ChangeEvent } from 'react';
import { useAuth } from '@/contexts/AuthContext';
import { useRouter } from 'next/navigation';

type AuthFormValues = Record<string, string>;

interface UseAuthFormProps {
  initialValues: AuthFormValues;
  endpoint: string;
  onSuccess?: () => void;
  redirectTo?: string;
  isLogin?: boolean;
}

export const useAuthForm = ({
  initialValues,
  endpoint,
  onSuccess,
  redirectTo,
  isLogin = false
}: UseAuthFormProps) => {
  const router = useRouter();
  const { setIsAuth, checkAuth } = useAuth();
  const [formValues, setFormValues] = useState<AuthFormValues>(initialValues);
  const [error, setError] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const [isSuccess, setIsSuccess] = useState(false);

  const handleChange = (e: ChangeEvent<HTMLInputElement>) => {
    const { name, value } = e.target;
    setFormValues(prev => ({ ...prev, [name]: value }));
  };

  const handleSubmit = async (e: FormEvent<HTMLFormElement>) => {
    e.preventDefault();
    setError('');
    setIsLoading(true);
    setIsSuccess(false);

    try {
      const response = await fetch(endpoint, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(formValues),
      });

      if (response.ok) {
        const data = await response.json();
        
        if (isLogin && data.access_token) {
          localStorage.setItem('token', data.access_token);
          setIsAuth(true);
          setIsSuccess(true);
          await checkAuth();
          window.dispatchEvent(new Event('auth-change'));
          
          if (redirectTo) {
            setTimeout(() => {
              router.push(redirectTo);
            }, 1000);
          }
        } else {
          // Для регистрации или других типов форм
          setFormValues(initialValues);
          if (onSuccess) onSuccess();
        }
      } else {
        const errorText = await response.text();
        let errorMessage = 'Ошибка запроса';
        try {
          const errorData = JSON.parse(errorText);
          errorMessage = errorData.detail || errorMessage;
        } catch {
          console.error('Не удалось разобрать JSON ошибки:', errorText);
        }
        setError(errorMessage);
      }
    } catch (error) {
      setError(`Произошла ошибка: ${error instanceof Error ? error.message : 'Неизвестная ошибка'}`);
      console.error('Form submission error:', error);
    } finally {
      setIsLoading(false);
    }
  };

  return {
    formValues,
    error,
    isLoading,
    isSuccess,
    handleChange,
    handleSubmit
  };
};
================
File: frontend\src\types\user.ts
// src/types/user.ts
export interface UserResponse {
    id: number;
    fio: string;
    email: string;
    telegram: string;
    whatsapp: string;
    avatar_url?: string; // Опционально, так как в схеме nullable
  }
================
File: servers\server_admin.py
from fastapi import FastAPI
from fastapi.middleware.cors import CORSMiddleware
from backend.api.event_routers import router as event_router
from backend.api.admin_auth_routers import router as admin_auth_router
from backend.api.admin_edit_routers import router as admin_edit_routers 
from backend.config.auth import get_user_or_ip_key
from backend.config.rate_limiter import limiter
from slowapi import _rate_limit_exceeded_handler
from slowapi.errors import RateLimitExceeded
import uvicorn

app = FastAPI(
    title="Event Management API",
    docs_url="/docs",
    redoc_url="/redoc"
)

# Настройка CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=["http://localhost:3000"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Настройка rate limiting
app.state.limiter = limiter
app.state.limiter.key_func = get_user_or_ip_key
app.add_exception_handler(RateLimitExceeded, _rate_limit_exceeded_handler)

# Подключение роутеров
app.include_router(event_router, prefix="/events", tags=["Events"])
app.include_router(admin_auth_router, prefix="/admin", tags=["Admin Authentication"])
app.include_router(admin_edit_routers, prefix="/admin_edits", tags=["Admin Edits"])

if __name__ == "__main__":
    uvicorn.run(
        "servers.server_admin:app",
        host="0.0.0.0",
        port=8001,  # Используем другой порт, чтобы не конфликтовать с server_user.py
        reload=True,
        log_level="info"
    )
================
File: servers\server_user.py
from fastapi import FastAPI
from fastapi.middleware.cors import CORSMiddleware
from backend.api.user_auth_routers import router as user_auth_router
from backend.config.auth import get_user_or_ip_key
from backend.config.logging_config import logger
from backend.config.rate_limiter import limiter
from slowapi import _rate_limit_exceeded_handler
from slowapi.errors import RateLimitExceeded
import uvicorn



app = FastAPI(
    title="User Authentication API",
    docs_url="/docs",
    redoc_url="/redoc"
)

app.add_middleware(
    CORSMiddleware,
    allow_origins=["http://localhost:3000"], # Адрес фронтенда
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Привязываем Limiter к приложению с кастомной функцией ключа
app.state.limiter = limiter
app.state.limiter.key_func = get_user_or_ip_key
app.add_exception_handler(RateLimitExceeded, _rate_limit_exceeded_handler)

# Подключение роутеров
app.include_router(user_auth_router, prefix="/auth", tags=["Authentication"])

if __name__ == "__main__":
    uvicorn.run(
        "servers.server_user:app",  # Исправлен путь к модулю
        host="0.0.0.0",
        port=8000,
        reload=True,
        log_level="info"
    )
================
