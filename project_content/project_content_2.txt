File: frontend\src\app\(admin)\dashboard\page.tsx
// frontend/src/app/(admin)/dashboard/page.tsx
"use client";
import { useState, ChangeEvent, useEffect, useCallback, useRef } from "react";
import { useRouter } from "next/navigation";
import InputField from "@/components/common/InputField";
import { FaSearch, FaUsers, FaCalendarAlt, FaPlus } from "react-icons/fa";
import AdminHeader from "@/components/AdminHeader";
import { useAdminAuth } from "@/contexts/AdminAuthContext";

interface User {
  id: number;
  fio: string;
  email: string;
}

interface Event {
  id: number;
  title: string;
  start_date: string;
  location?: string;
  published: boolean;
}

export default function DashboardPage() {
  const [userSearch, setUserSearch] = useState("");
  const [eventSearch, setEventSearch] = useState("");
  const [users, setUsers] = useState<User[]>([]);
  const [events, setEvents] = useState<Event[]>([]);
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const hasFetchedEvents = useRef(false);

  const router = useRouter();
  const { isAdminAuth, isLoading: authLoading, checkAuth } = useAdminAuth();

  useEffect(() => {
    checkAuth();
  }, [checkAuth]);

  useEffect(() => {
    if (!authLoading && !isAdminAuth) {
      router.push("/admin-login");
    }
  }, [isAdminAuth, authLoading, router]);

  const fetchEvents = useCallback(async () => {
    setIsLoading(true);
    setError(null);
    try {
      const token = localStorage.getItem("admin_token");
      if (!token) {
        setError("Отсутствует токен авторизации");
        return;
      }
      const url = eventSearch.trim()
        ? `/admin_edits/events?search=${encodeURIComponent(eventSearch)}`
        : "/admin_edits/events";
      const response = await fetch(url, {
        headers: {
          Authorization: `Bearer ${token}`,
          "Accept": "application/json",
        },
      });
      if (!response.ok) {
        const errorText = await response.text();
        setError(`Ошибка API: ${response.status} ${response.statusText} - ${errorText}`);
        setEvents([]);
        return;
      }
      const data = await response.json();
      setEvents(Array.isArray(data) ? data : []);
    } catch {
      setError("Не удалось загрузить мероприятия");
      setEvents([]);
    } finally {
      setIsLoading(false);
    }
  }, [eventSearch]);

  useEffect(() => {
    if (!authLoading && isAdminAuth && !hasFetchedEvents.current) {
      hasFetchedEvents.current = true;
      fetchEvents();
    }
  }, [isAdminAuth, authLoading, fetchEvents]);

  const handleUserSearch = async () => {
    if (!userSearch.trim()) return;
    setIsLoading(true);
    setError(null);
    try {
      const token = localStorage.getItem("admin_token");
      if (!token) {
        setError("Отсутствует токен авторизации");
        return;
      }
      const response = await fetch(`/admin_edits/users?search=${encodeURIComponent(userSearch)}`, {
        headers: {
          Authorization: `Bearer ${token}`,
          "Accept": "application/json",
        },
      });
      if (!response.ok) {
        setError(`Ошибка API: ${response.status} ${response.statusText}`);
        setUsers([]);
      } else {
        const data = await response.json();
        setUsers(Array.isArray(data) ? data : []);
      }
    } catch {
      setError("Не удалось выполнить поиск пользователей");
      setUsers([]);
    } finally {
      setIsLoading(false);
    }
  };

  const handleEventSearch = () => {
    hasFetchedEvents.current = false;
    fetchEvents();
  };

  if (authLoading) {
    return (
      <div className="flex items-center justify-center min-h-screen">
        <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-500"></div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gray-50">
      <AdminHeader />
      <main className="container mx-auto px-4 pt-24 pb-12">
        <div className="max-w-6xl mx-auto">
          <div className="flex justify-between items-center mb-8">
            <h1 className="text-3xl font-bold">Панель управления</h1>
            <button
              onClick={() => router.push("/edit-events?new=true")}
              className="bg-blue-500 text-white px-4 py-2 rounded-lg flex items-center hover:bg-blue-600 transition-colors"
            >
              <FaPlus className="mr-2" />
              Новое мероприятие
            </button>
          </div>
          {error && (
            <div className="mb-6 bg-red-50 text-red-700 p-4 rounded-lg border-l-4 border-red-500">
              {error}
            </div>
          )}
          <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
            <div className="bg-white p-6 rounded-lg shadow-md">
              <div className="flex items-center mb-6">
                <FaUsers className="text-blue-500 text-xl mr-2" />
                <h2 className="text-xl font-semibold">Пользователи</h2>
              </div>
              <div className="mb-6">
                <InputField
                  type="text"
                  value={userSearch}
                  onChange={(e: ChangeEvent<HTMLInputElement>) => setUserSearch(e.target.value)}
                  placeholder="Поиск пользователей..."
                  icon={FaSearch}
                  onBlur={handleUserSearch}
                />
              </div>
              {isLoading && users.length === 0 ? (
                <div className="text-center py-4">
                  <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-500 mx-auto"></div>
                </div>
              ) : users.length > 0 ? (
                <div className="overflow-x-auto">
                  <table className="min-w-full divide-y divide-gray-200">
                    <thead>
                      <tr>
                        <th className="px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">ID</th>
                        <th className="px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">ФИО</th>
                        <th className="px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Email</th>
                      </tr>
                    </thead>
                    <tbody className="divide-y divide-gray-200">
                      {users.map((user) => (
                        <tr key={user.id} className="hover:bg-gray-50">
                          <td className="px-4 py-2 whitespace-nowrap text-sm text-gray-900">{user.id}</td>
                          <td className="px-4 py-2 whitespace-nowrap text-sm text-gray-900">{user.fio}</td>
                          <td className="px-4 py-2 whitespace-nowrap text-sm text-gray-900">{user.email}</td>
                        </tr>
                      ))}
                    </tbody>
                  </table>
                </div>
              ) : (
                <p className="text-gray-500 text-center py-4">
                  {userSearch.trim() ? "Пользователи не найдены" : "Введите запрос для поиска пользователей"}
                </p>
              )}
            </div>
            <div className="bg-white p-6 rounded-lg shadow-md">
              <div className="flex items-center mb-6">
                <FaCalendarAlt className="text-blue-500 text-xl mr-2" />
                <h2 className="text-xl font-semibold">Мероприятия</h2>
              </div>
              <div className="mb-6">
                <InputField
                  type="text"
                  value={eventSearch}
                  onChange={(e: ChangeEvent<HTMLInputElement>) => setEventSearch(e.target.value)}
                  placeholder="Поиск мероприятий..."
                  icon={FaSearch}
                  onBlur={handleEventSearch}
                />
              </div>
              {isLoading && events.length === 0 ? (
                <div className="text-center py-4">
                  <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-500 mx-auto"></div>
                </div>
              ) : events.length > 0 ? (
                <div className="overflow-x-auto">
                  <table className="min-w-full divide-y divide-gray-200">
                    <thead>
                      <tr>
                        <th className="px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">ID</th>
                        <th className="px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Название</th>
                        <th className="px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Статус</th>
                        <th className="px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Действия</th>
                      </tr>
                    </thead>
                    <tbody className="divide-y divide-gray-200">
                      {events.map((event) => (
                        <tr key={event.id} className="hover:bg-gray-50">
                          <td className="px-4 py-2 whitespace-nowrap text-sm text-gray-900">{event.id || "N/A"}</td>
                          <td className="px-4 py-2 whitespace-nowrap text-sm text-gray-900">{event.title}</td>
                          <td className="px-4 py-2 whitespace-nowrap text-sm">
                            {event.published ? (
                              <span className="px-2 py-1 text-xs rounded-full bg-green-100 text-green-700">Опубликовано</span>
                            ) : (
                              <span className="px-2 py-1 text-xs rounded-full bg-yellow-100 text-yellow-700">Черновик</span>
                            )}
                          </td>
                          <td className="px-4 py-2 whitespace-nowrap text-sm">
                            <button
                              onClick={() => router.push(`/edit-events?event_id=${event.id}`)}
                              className="text-blue-500 hover:text-blue-700"
                            >
                              Редактировать
                            </button>
                          </td>
                        </tr>
                      ))}
                    </tbody>
                  </table>
                </div>
              ) : (
                <p className="text-gray-500 text-center py-4">
                  {eventSearch.trim() ? "Мероприятия не найдены" : "Нет доступных мероприятий"}
                </p>
              )}
            </div>
          </div>
        </div>
      </main>
    </div>
  );
}
================
File: frontend\src\app\(admin)\edit-events\page.tsx
// frontend/src/app/(admin)/edit-events/page.tsx
"use client";
import { useState, useEffect, ChangeEvent, FormEvent, useCallback, useMemo } from "react";
import { useRouter, useSearchParams } from "next/navigation";
import InputField from "@/components/common/InputField";
import { ModalButton } from "@/components/common/AuthModal";
import { FaPen, FaCalendar, FaMapMarkerAlt, FaDollarSign, FaImage, FaCheck } from "react-icons/fa";
import AdminHeader from "@/components/AdminHeader";
import { useAdminAuth } from "@/contexts/AdminAuthContext";

interface ValidationError {
  loc: (string | number)[];
  msg: string;
  type: string;
}

interface EventData {
  id?: number;
  title: string;
  description: string;
  start_date: string;
  end_date?: string;
  location?: string;
  image_url?: string;
  price: number;
  published: boolean;
  created_at?: string;
  updated_at?: string;
}

export default function EditEventPage() {
  const initialEventState = useMemo<EventData>(() => ({
    title: "",
    description: "",
    start_date: new Date().toISOString().split('T')[0],
    price: 0,
    published: false,
  }), []);

  const [event, setEvent] = useState<EventData>(initialEventState);
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState("");
  const [success, setSuccess] = useState("");
  const [isCreating, setIsCreating] = useState(false);

  const router = useRouter();
  const searchParams = useSearchParams();
  const eventId = searchParams.get("event_id");
  const isNew = searchParams.get("new") === "true";
  const { isAdminAuth, isLoading: authLoading, checkAuth } = useAdminAuth();

  useEffect(() => {
    checkAuth();
  }, [checkAuth]);

  const fetchEvent = useCallback(async (id: string) => {
    setIsLoading(true);
    try {
      const token = localStorage.getItem("admin_token");
      if (!token) {
        setError("Отсутствует токен авторизации");
        setTimeout(() => {
          router.push("/admin-login");
        }, 2000);
        return;
      }
      const response = await fetch(`/events/${id}`, {
        headers: {
          Authorization: `Bearer ${token}`,
          "Accept": "application/json",
          "Cache-Control": "no-cache",
        },
      });
      const contentType = response.headers.get("content-type");
      if (!contentType || !contentType.includes("application/json")) {
        setError(`Получен неверный формат ответа: ${contentType || "неизвестный тип"}`);
        setTimeout(() => {
          router.push("/dashboard");
        }, 3000);
        return;
      }
      if (!response.ok) {
        setError(`Ошибка API: ${response.status} ${response.statusText}`);
        setTimeout(() => {
          router.push("/dashboard");
        }, 3000);
        return;
      }
      const data = await response.json();
      if (data.start_date) {
        data.start_date = new Date(data.start_date).toISOString().split('T')[0];
      }
      if (data.end_date) {
        data.end_date = new Date(data.end_date).toISOString().split('T')[0];
      }
      setEvent(data);
      setIsCreating(false);
    } catch (err) {
      setError(err instanceof Error ? err.message : "Произошла ошибка при загрузке данных");
      setTimeout(() => {
        router.push("/dashboard");
      }, 3000);
    } finally {
      setIsLoading(false);
    }
  }, [router]);

  useEffect(() => {
    if (!authLoading) {
      if (!eventId && !isNew) {
        router.push("/dashboard");
        return;
      }
      if (!isAdminAuth) {
        router.push("/admin-login");
        return;
      }
      if (isNew) {
        setIsCreating(true);
        setEvent(initialEventState);
        return;
      }
      if (eventId) {
        fetchEvent(eventId);
      }
    }
  }, [eventId, isNew, isAdminAuth, authLoading, router, fetchEvent, initialEventState]);

  const handleChange = (e: ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {
    const { name, value, type } = e.target as HTMLInputElement;
    if (type === 'checkbox') {
      const target = e.target as HTMLInputElement;
      setEvent({ ...event, [name]: target.checked });
    } else if (type === 'number') {
      setEvent({ ...event, [name]: parseFloat(value) });
    } else {
      setEvent({ ...event, [name]: value });
    }
  };

  const handleSubmit = async (e: FormEvent<HTMLFormElement>) => {
    e.preventDefault();
    setError("");
    setSuccess("");
    setIsLoading(true);
    const token = localStorage.getItem("admin_token");
    if (!token) {
      setError("Не авторизован");
      setIsLoading(false);
      return;
    }
    const startDate = new Date(event.start_date);
    const endDate = event.end_date ? new Date(event.end_date) : null;
    const eventData = {
      ...event,
      start_date: startDate.toISOString(),
      end_date: endDate ? endDate.toISOString() : null,
      created_at: new Date().toISOString(),
      updated_at: new Date().toISOString(),
    };
    try {
      const url = isCreating ? `/admin_edits` : `/admin_edits/${eventId}`;
      const method = isCreating ? "POST" : "PUT";
      const response = await fetch(url, {
        method,
        headers: {
          "Content-Type": "application/json",
          Authorization: `Bearer ${token}`,
        },
        body: JSON.stringify(eventData),
      });
      if (!response.ok) {
        const errorData = await response.json();
        let errorMessage = "Ошибка сохранения мероприятия";
        if (errorData.detail) {
          if (typeof errorData.detail === "string") {
            errorMessage = errorData.detail;
          } else if (Array.isArray(errorData.detail)) {
            errorMessage = errorData.detail.map((err: ValidationError) => {
              if (err.msg && err.loc) {
                return `${err.loc.join(".")}: ${err.msg}`;
              }
              return JSON.stringify(err);
            }).join("; ");
          } else {
            errorMessage = JSON.stringify(errorData.detail);
          }
        }
        throw new Error(errorMessage);
      }
      setSuccess(isCreating ? "Мероприятие успешно создано" : "Мероприятие успешно обновлено");
      if (isCreating) {
        const data = await response.json();
        setTimeout(() => {
          router.push(`/edit-events?event_id=${data.id}`);
        }, 1500);
      }
    } catch (err) {
      setError(err instanceof Error ? err.message : "Произошла ошибка");
    } finally {
      setIsLoading(false);
    }
  };

  if (authLoading || (isLoading && !isNew && !eventId)) {
    return (
      <div className="min-h-screen flex items-center justify-center">
        <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-500"></div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gray-50">
      <AdminHeader />
      <main className="container mx-auto px-4 pt-24 pb-12">
        <div className="max-w-3xl mx-auto">
          <h1 className="text-3xl font-bold mb-8">
            {isCreating ? "Создание нового мероприятия" : "Редактирование мероприятия"}
          </h1>
          <div className="bg-white p-6 rounded-lg shadow-md">
            {error && (
              <div className="mb-6 bg-red-50 p-4 rounded-lg border-l-4 border-red-500 text-red-700">
                {error}
              </div>
            )}
            {success && (
              <div className="mb-6 bg-green-50 p-4 rounded-lg border-l-4 border-green-500 text-green-700">
                {success}
              </div>
            )}
            <form onSubmit={handleSubmit}>
              <div className="mb-6">
                <label className="block text-gray-700 mb-2 font-medium">Название мероприятия</label>
                <InputField
                  type="text"
                  value={event.title}
                  onChange={handleChange}
                  placeholder="Введите название"
                  icon={FaPen}
                  name="title"
                  required
                />
              </div>
              <div className="mb-6">
                <label className="block text-gray-700 mb-2 font-medium">Описание</label>
                <textarea
                  value={event.description}
                  onChange={handleChange}
                  placeholder="Введите описание мероприятия"
                  name="description"
                  className="w-full p-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                  rows={5}
                />
              </div>
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6 mb-6">
                <div>
                  <label className="block text-gray-700 mb-2 font-medium">Дата начала</label>
                  <InputField
                    type="date"
                    value={event.start_date}
                    onChange={handleChange}
                    placeholder="Дата начала"
                    icon={FaCalendar}
                    name="start_date"
                    required
                  />
                </div>
                <div>
                  <label className="block text-gray-700 mb-2 font-medium">Дата окончания</label>
                  <InputField
                    type="date"
                    value={event.end_date || ""}
                    onChange={handleChange}
                    placeholder="Дата окончания"
                    icon={FaCalendar}
                    name="end_date"
                  />
                </div>
              </div>
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6 mb-6">
                <div>
                  <label className="block text-gray-700 mb-2 font-medium">Местоположение</label>
                  <InputField
                    type="text"
                    value={event.location || ""}
                    onChange={handleChange}
                    placeholder="Место проведения"
                    icon={FaMapMarkerAlt}
                    name="location"
                  />
                </div>
                <div>
                  <label className="block text-gray-700 mb-2 font-medium">Цена</label>
                  <InputField
                    type="number"
                    value={event.price.toString()}
                    onChange={handleChange}
                    placeholder="Стоимость"
                    icon={FaDollarSign}
                    name="price"
                    required
                  />
                </div>
              </div>
              <div className="mb-6">
                <label className="block text-gray-700 mb-2 font-medium">URL изображения</label>
                <InputField
                  type="text"
                  value={event.image_url || ""}
                  onChange={handleChange}
                  placeholder="URL изображения для мероприятия"
                  icon={FaImage}
                  name="image_url"
                />
              </div>
              <div className="mb-6 flex items-center">
                <input
                  type="checkbox"
                  id="published"
                  name="published"
                  checked={event.published}
                  onChange={handleChange}
                  className="w-4 h-4 text-blue-600 bg-gray-100 border-gray-300 rounded focus:ring-blue-500"
                />
                <label htmlFor="published" className="ml-2 text-gray-700">
                  Опубликовать мероприятие
                </label>
              </div>
              <div className="flex justify-between">
                <button
                  type="button"
                  onClick={() => router.push("/dashboard")}
                  className="px-4 py-2 border border-gray-300 text-gray-700 rounded-lg hover:bg-gray-50"
                >
                  Отмена
                </button>
                <ModalButton
                  type="submit"
                  disabled={isLoading}
                >
                  {isLoading ? "Сохранение..." : (
                    <>
                      <FaCheck className="mr-2" />
                      {isCreating ? "Создать мероприятие" : "Сохранить изменения"}
                    </>
                  )}
                </ModalButton>
              </div>
            </form>
          </div>
        </div>
      </main>
    </div>
  );
}
================
File: frontend\src\app\(auth)\layout.tsx
// frontend/src/app/(auth)/layout.tsx
"use client";

import Header from "@/components/Header";

export default function AuthLayout({
  children,
}: {
  children: React.ReactNode;
}) {
  return (
    <>
      <Header />
      <main className="min-h-screen pt-16">
        {children}
      </main>
    </>
  );
}
================
File: frontend\src\app\(auth)\profile\page.tsx
// frontend/src/app/(auth)/profile/page.tsx
"use client";

import React, { useEffect, useState } from "react";
import { useRouter } from "next/navigation";
import Loading from "@/components/Loading";
import { useAuth } from "@/contexts/AuthContext";

const Profile = () => {
  const { isAuth, isLoading, userData, checkAuth } = useAuth();
  const [loadingTimeout, setLoadingTimeout] = useState(false);
  const router = useRouter();

  useEffect(() => {
    if (!isLoading && !isAuth) router.push("/");
    if (isAuth) checkAuth().catch(console.error);
    
    // Устанавливаем таймаут для показа сообщения о долгой загрузке
    const timer = setTimeout(() => {
      if (isLoading || !userData) setLoadingTimeout(true);
    }, 5000);

    return () => clearTimeout(timer);
  }, [isAuth, isLoading, userData, router, checkAuth]);

  if (isLoading && !loadingTimeout) {
    return (
      <div className="min-h-screen">
        <Loading />
      </div>
    );
  }
  
  if (!userData) {
    return (
      <div className="container mx-auto px-4 py-10 mt-16">
        {!loadingTimeout && <Loading />}
        {loadingTimeout && (
          <div className="text-center mt-8 p-6 bg-orange-50 rounded-lg border border-orange-200 shadow-md z-50 relative">
            <p className="text-orange-700 font-medium mb-2 text-lg">Загрузка данных занимает больше времени, чем обычно.</p>
            <p className="text-gray-600 mb-6">Возможно, есть проблемы с соединением или сервером.</p>
            <div className="flex justify-center space-x-4">
              <button 
                onClick={() => {
                  setLoadingTimeout(false);
                  checkAuth();
                }}
                className="px-6 py-2 bg-orange-500 text-white rounded-lg hover:bg-orange-600 transition-colors"
              >
                Попробовать снова
              </button>
              <button 
                onClick={() => router.push("/")}
                className="px-6 py-2 border border-orange-500 text-orange-500 rounded-lg hover:bg-orange-50 transition-colors"
              >
                Вернуться на главную
              </button>
            </div>
          </div>
        )}
      </div>
    );
  }

  return (
    <div className="container mx-auto px-4 py-10 mt-16">
      <h1 className="text-3xl font-bold mb-6">Личный кабинет</h1>
      <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
        <div className="md:col-span-2 bg-white p-6 rounded-lg shadow">
          <div className="flex items-center space-x-4 mb-4">
            <div className="w-20 h-20 bg-orange-100 rounded-full flex items-center justify-center text-orange-500 text-2xl font-bold">
              {userData.fio ? userData.fio.charAt(0).toUpperCase() : userData.email.charAt(0).toUpperCase()}
            </div>
            <div>
              <h2 className="text-xl font-semibold">{userData.fio || "Не указано"}</h2>
              <p className="text-gray-600">{userData.email || "Не указан"}</p>
            </div>
          </div>
          <div className="space-y-2">
            <p><strong>Telegram:</strong> {userData.telegram || "Не указан"}</p>
            <p><strong>WhatsApp:</strong> {userData.whatsapp || "Не указан"}</p>
          </div>
        </div>
        <div className="bg-white p-6 rounded-lg shadow">
          <h3 className="text-lg font-semibold mb-4">Мероприятия</h3>
          <p className="text-gray-500">У вас пока нет зарегистрированных мероприятий.</p>
        </div>
      </div>
    </div>
  );
};

export default Profile;
================
File: frontend\src\app\(public)\layout.tsx
// frontend/src/app/(public)/layout.tsx
"use client";

import Header from "@/components/Header";

export default function PublicLayout({
  children,
}: {
  children: React.ReactNode;
}) {
  // Make sure there are no conditions preventing Header from rendering
  return (
    <>
      <Header />
      <main className="min-h-screen pt-16">
        {children}
      </main>
    </>
  );
}
================
File: frontend\src\app\(public)\page.tsx
// // frontend/src/app/(public)/page.tsx
// import React from 'react';
// import Link from 'next/link';
// import Header from '@/components/Header';
// import Footer from '@/components/Footer';

// export default function PublicHomePage() {
//   return (
//     <>
//       <Header />
      
//       {/* Главный контент с отступом для фиксированного хедера */}
//       <main className="flex-grow flex flex-col justify-center items-center pt-24 pb-16 px-4 min-h-[calc(100vh-120px)]">
//         <h1 className="text-4xl font-bold text-center mb-12">Добро пожаловать в Moscow Mellows</h1>
        
//         <div className="grid grid-cols-1 md:grid-cols-3 gap-8 max-w-6xl w-full">
//           {/* Карточка регистрации */}
//           <Link href="/registration" className="group">
//             <div className="bg-white rounded-xl p-6 shadow-md hover:shadow-xl transition-all duration-300 transform group-hover:-translate-y-1 h-full flex flex-col">
//               <div className="w-14 h-14 bg-orange-100 rounded-full flex items-center justify-center mb-5">
//                 <svg className="w-8 h-8 text-orange-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
//                   <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M18 9v3m0 0v3m0-3h3m-3 0h-3m-2-5a4 4 0 11-8 0 4 4 0 018 0zM3 20a6 6 0 0112 0v1H3v-1z" />
//                 </svg>
//               </div>
//               <h3 className="text-xl font-bold mb-4">Регистрация</h3>
//               <p className="text-gray-700 flex-grow">
//                 Зарегистрируйтесь на нашей платформе, чтобы получить доступ ко всем возможностям и событиям.
//               </p>
//               <div className="mt-4 text-orange-500 group-hover:text-orange-600 flex items-center">
//                 Зарегистрироваться
//                 <svg className="w-5 h-5 ml-2 transform group-hover:translate-x-1 transition-transform duration-300" fill="none" stroke="currentColor" viewBox="0 0 24 24">
//                   <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M14 5l7 7m0 0l-7 7m7-7H3" />
//                 </svg>
//               </div>
//             </div>
//           </Link>
          
//           {/* Карточка мероприятий */}
//           <Link href="/events" className="group">
//             <div className="bg-white rounded-xl p-6 shadow-md hover:shadow-xl transition-all duration-300 transform group-hover:-translate-y-1 h-full flex flex-col">
//               <div className="w-14 h-14 bg-orange-100 rounded-full flex items-center justify-center mb-5">
//                 <svg className="w-8 h-8 text-orange-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
//                   <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z" />
//                 </svg>
//               </div>
//               <h3 className="text-xl font-bold mb-4">Мероприятия</h3>
//               <p className="text-gray-700 flex-grow">
//                 Просмотрите список предстоящих мероприятий и выберите те, которые вам интересны.
//               </p>
//               <div className="mt-4 text-orange-500 group-hover:text-orange-600 flex items-center">
//                 Смотреть мероприятия
//                 <svg className="w-5 h-5 ml-2 transform group-hover:translate-x-1 transition-transform duration-300" fill="none" stroke="currentColor" viewBox="0 0 24 24">
//                   <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M14 5l7 7m0 0l-7 7m7-7H3" />
//                 </svg>
//               </div>
//             </div>
//           </Link>
          
//           {/* Карточка медиа */}
//           <Link href="/media" className="group">
//             <div className="bg-white rounded-xl p-6 shadow-md hover:shadow-xl transition-all duration-300 transform group-hover:-translate-y-1 h-full flex flex-col">
//               <div className="w-14 h-14 bg-orange-100 rounded-full flex items-center justify-center mb-5">
//                 <svg className="w-8 h-8 text-orange-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
//                   <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M15 10l4.553-2.276A1 1 0 0121 8.618v6.764a1 1 0 01-1.447.894L15 14M5 18h8a2 2 0 002-2V8a2 2 0 00-2-2H5a2 2 0 00-2 2v8a2 2 0 002 2z" />
//                 </svg>
//               </div>
//               <h3 className="text-xl font-bold mb-4">Медиа</h3>
//               <p className="text-gray-700 flex-grow">
//                 Ознакомьтесь с фото и видео материалами с прошедших мероприятий.
//               </p>
//               <div className="mt-4 text-orange-500 group-hover:text-orange-600 flex items-center">
//                 Смотреть медиа
//                 <svg className="w-5 h-5 ml-2 transform group-hover:translate-x-1 transition-transform duration-300" fill="none" stroke="currentColor" viewBox="0 0 24 24">
//                   <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M14 5l7 7m0 0l-7 7m7-7H3" />
//                 </svg>
//               </div>
//             </div>
//           </Link>
//         </div>
//       </main>
      
//       <Footer />
//     </>
//   );
// }
================
File: frontend\src\app\(public)\events\page.tsx
// frontend/src/app/(public)/events/page.tsx
import React from 'react';
import Footer from '@/components/Footer';
import Link from 'next/link';

export default function EventsPage() {
  return (
    <>
      <main className="flex-grow flex flex-col justify-center items-center pt-24 pb-16 px-4 min-h-[calc(100vh-120px)]">
        <div className="max-w-md w-full bg-white rounded-xl shadow-md overflow-hidden p-8 text-center">
          <div className="w-20 h-20 bg-orange-100 rounded-full flex items-center justify-center mx-auto mb-6">
            <svg className="w-12 h-12 text-orange-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z" />
            </svg>
          </div>
          
          <h1 className="text-2xl font-bold mb-4">Страница мероприятий</h1>
          <p className="text-gray-600 mb-6">
            Эта страница находится в разработке. Скоро здесь появится список доступных мероприятий.
          </p>
          
          <Link 
            href="/" 
            className="inline-flex items-center px-4 py-2 bg-orange-500 text-white rounded-lg hover:bg-orange-600 transition-colors duration-300"
          >
            <svg className="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M10 19l-7-7m0 0l7-7m-7 7h18" />
            </svg>
            Вернуться на главную
          </Link>
        </div>
      </main>
      
      <Footer />
    </>
  );
}
================
File: frontend\src\app\(public)\login\page.tsx
import React from 'react';
import Header from '@/components/Header';
import Footer from '@/components/Footer';

export default function LoginPage() {
  return (
    <>
      <Header />
      <main className="min-h-screen flex items-center justify-center bg-gray-50">
        <div className="bg-white p-8 rounded-lg shadow-md max-w-md w-full">
          <h1 className="text-2xl font-bold text-center mb-6">Вход в систему</h1>
          
          <form className="space-y-4">
            <div>
              <label htmlFor="email" className="block text-sm font-medium text-gray-700 mb-1">
                Email
              </label>
              <input
                type="email"
                id="email"
                name="email"
                className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-blue-500 focus:border-blue-500"
                placeholder="Введите ваш email"
                required
              />
            </div>
            
            <div>
              <label htmlFor="password" className="block text-sm font-medium text-gray-700 mb-1">
                Пароль
              </label>
              <input
                type="password"
                id="password"
                name="password"
                className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-blue-500 focus:border-blue-500"
                placeholder="Введите ваш пароль"
                required
              />
            </div>
            
            <button
              type="submit"
              className="w-full bg-blue-600 text-white py-2 px-4 rounded-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-opacity-50 transition-colors"
            >
              Войти
            </button>
          </form>
        </div>
      </main>
      <Footer />
    </>
  );
}
================
File: frontend\src\app\(public)\media\page.tsx
// frontend/src/app/(public)/media/page.tsx
import React from 'react';
import Header from '@/components/Header';
import Footer from '@/components/Footer';
import Link from 'next/link';

export default function MediaPage() {
  return (
    <>
      <Header />
      
      <main className="flex-grow flex flex-col justify-center items-center pt-24 pb-16 px-4 min-h-[calc(100vh-120px)]">
        <div className="max-w-md w-full bg-white rounded-xl shadow-md overflow-hidden p-8 text-center">
          <div className="w-20 h-20 bg-orange-100 rounded-full flex items-center justify-center mx-auto mb-6">
            <svg className="w-12 h-12 text-orange-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M15 10l4.553-2.276A1 1 0 0121 8.618v6.764a1 1 0 01-1.447.894L15 14M5 18h8a2 2 0 002-2V8a2 2 0 00-2-2H5a2 2 0 00-2 2v8a2 2 0 002 2z" />
            </svg>
          </div>
          
          <h1 className="text-2xl font-bold mb-4">Страница медиа</h1>
          <p className="text-gray-600 mb-6">
            Эта страница находится в разработке. Скоро здесь появится фото и видео галерея с мероприятий.
          </p>
          
          <Link 
            href="/" 
            className="inline-flex items-center px-4 py-2 bg-orange-500 text-white rounded-lg hover:bg-orange-600 transition-colors duration-300"
          >
            <svg className="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M10 19l-7-7m0 0l7-7m-7 7h18" />
            </svg>
            Вернуться на главную
          </Link>
        </div>
      </main>
      
      <Footer />
    </>
  );
}
================
File: frontend\src\app\(public)\partner\page.tsx
// frontend/src/app/(public)/partner/page.tsx
import React from 'react';
import Header from '@/components/Header';
import Footer from '@/components/Footer';
import Link from 'next/link';

export default function PartnerPage() {
  return (
    <>
      <Header />
      
      <main className="flex-grow flex flex-col justify-center items-center pt-24 pb-16 px-4 min-h-[calc(100vh-120px)]">
        <div className="max-w-md w-full bg-white rounded-xl shadow-md overflow-hidden p-8 text-center">
          <div className="w-20 h-20 bg-orange-100 rounded-full flex items-center justify-center mx-auto mb-6">
            <svg className="w-12 h-12 text-orange-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M17 20h5v-2a3 3 0 00-5.356-1.857M17 20H7m10 0v-2c0-.656-.126-1.283-.356-1.857M7 20H2v-2a3 3 0 015.356-1.857M7 20v-2c0-.656.126-1.283.356-1.857m0 0a5.002 5.002 0 019.288 0M15 7a3 3 0 11-6 0 3 3 0 016 0zm6 3a2 2 0 11-4 0 2 2 0 014 0zM7 10a2 2 0 11-4 0 2 2 0 014 0z" />
            </svg>
          </div>
          
          <h1 className="text-2xl font-bold mb-4">Стать партнером</h1>
          <p className="text-gray-600 mb-6">
            Эта страница находится в разработке. Скоро здесь появится форма для партнерского сотрудничества.
          </p>
          
          <Link 
            href="/" 
            className="inline-flex items-center px-4 py-2 bg-orange-500 text-white rounded-lg hover:bg-orange-600 transition-colors duration-300"
          >
            <svg className="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M10 19l-7-7m0 0l7-7m-7 7h18" />
            </svg>
            Вернуться на главную
          </Link>
        </div>
      </main>
      
      <Footer />
    </>
  );
}
================
File: frontend\src\app\(public)\registration\page.tsx
import React from 'react';
import Header from '@/components/Header';
import Footer from '@/components/Footer';
import Link from 'next/link';

export default function RegistrationPage() {
  return (
    <div className="min-h-screen flex flex-col bg-white">
      <Header />
      
      <main className="flex-grow flex flex-col justify-center items-center pt-24 pb-16 px-4">
        <div className="max-w-md w-full bg-white rounded-xl shadow-md overflow-hidden p-8 text-center">
          <div className="w-20 h-20 bg-orange-100 rounded-full flex items-center justify-center mx-auto mb-6">
            <svg className="w-12 h-12 text-orange-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M18 9v3m0 0v3m0-3h3m-3 0h-3m-2-5a4 4 0 11-8 0 4 4 0 018 0zM3 20a6 6 0 0112 0v1H3v-1z" />
            </svg>
          </div>
          
          <h1 className="text-2xl font-bold mb-4">Страница регистрации</h1>
          <p className="text-gray-600 mb-6">
            Эта страница находится в разработке. Скоро здесь появится форма регистрации.
          </p>
          
          <Link 
            href="/" 
            className="inline-flex items-center px-4 py-2 bg-orange-500 text-white rounded-lg hover:bg-orange-600 transition-colors duration-300"
          >
            <svg className="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M10 19l-7-7m0 0l7-7m-7 7h18" />
            </svg>
            Вернуться на главную
          </Link>
        </div>
      </main>
      
      <Footer />
    </div>
  );
}
================
File: frontend\src\app\event\[id]\page.tsx
// frontend/src/app/event/[id]/page.tsx
import Header from "@/components/Header";
import Footer from "@/components/Footer";
import EventRegistration from "@/components/EventRegistration";
import Media from "@/components/Media";
import { notFound } from "next/navigation";

interface EventData {
  id: number;
  title: string;
  description?: string;
  status: "draft" | "registration_open" | "registration_closed" | "completed";
  ticket_type?: { name: string; price: number; available_quantity: number };
}

interface PageProps {
  params: { id: string };
}

async function fetchEvent(id: string): Promise<EventData> {
  const res = await fetch(`http://your-api-url/events/${id}`, {
    cache: "no-store",
  });
  if (!res.ok) {
    throw new Error("Event not found");
  }
  return res.json();
}

export default async function EventPage({ params }: PageProps) {
  let event: EventData;
  try {
    event = await fetchEvent(params.id);
  } catch (error) {
    console.error("Ошибка при загрузке мероприятия:", error);
    return notFound();
  }

  return (
    <div className="min-h-screen flex flex-col">
      <Header />
      <main className="flex-grow container mx-auto px-4 py-8">
        <h1 className="text-3xl font-bold mb-4">{event.title}</h1>
        <p className="text-gray-600 mb-6">{event.description || "Нет описания"}</p>

        {event.status === "registration_open" && (
          <div className="mb-6">
            <h2 className="text-xl font-semibold mb-2">Регистрация открыта</h2>
            <EventRegistration eventId={event.id} />
          </div>
        )}

        {event.status === "registration_closed" && (
          <p className="text-gray-500">Регистрация на мероприятие закрыта.</p>
        )}

        {event.status === "completed" && (
          <div className="mb-6">
            <h2 className="text-xl font-semibold mb-2">Мероприятие завершено</h2>
            <Media />
          </div>
        )}

        {event.status === "draft" && (
          <p className="text-gray-500">
            Мероприятие находится в черновике и недоступно для просмотра.
          </p>
        )}
      </main>
      <Footer />
    </div>
  );
}
================
File: frontend\src\components\AdminHeader.tsx
// frontend/src/components/AdminHeader.tsx
"use client";

import React, { useState, useEffect, useContext } from "react";
import Link from "next/link";
import { useRouter } from "next/navigation";
import { motion, AnimatePresence } from "framer-motion";
import Logo from "./Logo";
import { AdminAuthContext } from "@/contexts/AdminAuthContext";
import { FaTachometerAlt, FaSignOutAlt, FaBars, FaTimes, FaUser } from "react-icons/fa";

interface NavItem {
  href: string;
  label: string;
  icon: React.ElementType;
}

const AdminHeader: React.FC = () => {
  // Безопасно получаем контекст админа
  const adminAuthContext = useContext(AdminAuthContext);
  const isAdminAuth = adminAuthContext?.isAdminAuth || false;
  const adminData = adminAuthContext?.adminData || null;
  const logoutAdmin = adminAuthContext?.logoutAdmin || (() => {
    localStorage.removeItem('admin_token');
    window.location.href = '/admin-login';
  });

  const [isScrolled, setIsScrolled] = useState(false);
  const [isMobileMenuOpen, setIsMobileMenuOpen] = useState(false);
  const router = useRouter();

  useEffect(() => {
    const handleScroll = () => setIsScrolled(window.scrollY > 20);
    window.addEventListener("scroll", handleScroll);
    return () => window.removeEventListener("scroll", handleScroll);
  }, []);

  const handleLogout = () => {
    logoutAdmin();
    router.push("/admin-login");
  };

  const toggleMobileMenu = () => setIsMobileMenuOpen((prev) => !prev);

  const adminNavItems: NavItem[] = [
    { href: "/admin-profile", label: "Профиль", icon: FaUser },
    { href: "/dashboard", label: "Панель управления", icon: FaTachometerAlt }
  ];

  const menuVariants = {
    closed: { opacity: 0, y: -20 },
    open: { opacity: 1, y: 0 },
  };

  return (
    <header
      className={`fixed top-0 left-0 right-0 z-30 transition-all duration-300 ${
        isScrolled ? "bg-white/95 backdrop-blur-sm shadow-lg py-3" : "bg-white/90 py-4"
      }`}
    >
      <div className="container mx-auto px-4 md:px-6 flex items-center justify-between">
        <Link href="/admin-profile" className="transition-transform duration-300 hover:scale-105 flex items-center">
          <Logo />
          <span className="ml-2 text-orange-500 font-semibold">Админ-панель</span>
        </Link>

        {/* Мобильное меню */}
        <div className="flex items-center md:hidden">
          {isAdminAuth && (
            <Link href="/admin-profile" className="mr-4 text-blue-500 hover:text-blue-600">
              <div className="w-8 h-8 bg-blue-100 rounded-full flex items-center justify-center">
                <FaUser className="h-4 w-4" />
              </div>
            </Link>
          )}
          <button onClick={toggleMobileMenu} className="text-gray-700 hover:text-blue-500">
            {isMobileMenuOpen ? <FaTimes className="h-6 w-6" /> : <FaBars className="h-6 w-6" />}
          </button>
          <AnimatePresence>
            {isMobileMenuOpen && (
              <motion.div
                className="fixed inset-0 bg-white z-50 flex flex-col items-center justify-center"
                initial={{ opacity: 0 }}
                animate={{ opacity: 1 }}
                exit={{ opacity: 0 }}
              >
                <button 
                  onClick={toggleMobileMenu}
                  className="absolute top-4 right-4 text-gray-500 hover:text-blue-500"
                >
                  <FaTimes className="h-8 w-8" />
                </button>
                <motion.ul
                  className="flex flex-col items-center space-y-6 text-xl"
                  variants={menuVariants}
                  initial="closed"
                  animate="open"
                  exit="closed"
                >
                  {adminNavItems.map((item, index) => (
                    <motion.li key={index} whileHover={{ scale: 1.05 }} whileTap={{ scale: 0.95 }}>
                      <Link 
                        href={item.href} 
                        className="text-gray-800 hover:text-blue-500 flex items-center"
                        onClick={() => setIsMobileMenuOpen(false)}
                      >
                        <item.icon className="mr-2" />
                        {item.label}
                      </Link>
                    </motion.li>
                  ))}
                  <motion.li whileHover={{ scale: 1.05 }} whileTap={{ scale: 0.95 }}>
                    <button
                      onClick={() => {
                        handleLogout();
                        setIsMobileMenuOpen(false);
                      }}
                      className="text-gray-800 hover:text-blue-500 flex items-center"
                    >
                      <FaSignOutAlt className="mr-2" />
                      Выйти
                    </button>
                  </motion.li>
                </motion.ul>
              </motion.div>
            )}
          </AnimatePresence>
        </div>

        {/* Десктопная навигация */}
        <div className="hidden md:flex items-center space-x-4">
          {isAdminAuth ? (
            <>
              <nav className="mr-4">
                <ul className="flex space-x-6">
                  {adminNavItems.map((item, index) => (
                    <li key={index}>
                      <Link 
                        href={item.href} 
                        className="text-gray-600 hover:text-blue-500 flex items-center"
                      >
                        <item.icon className="mr-2" />
                        {item.label}
                      </Link>
                    </li>
                  ))}
                </ul>
              </nav>
              
              {adminData && (
                <div className="flex items-center mr-4 text-gray-600">
                  <div className="w-8 h-8 bg-blue-100 rounded-full flex items-center justify-center mr-2">
                    <FaUser className="h-4 w-4 text-blue-500" />
                  </div>
                  <span className="text-sm font-medium truncate max-w-[120px]">{adminData.fio}</span>
                </div>
              )}
              
              <button 
                onClick={handleLogout} 
                className="px-4 py-2 bg-blue-500 text-white rounded-lg hover:bg-blue-600 transition-all duration-300 flex items-center"
              >
                <FaSignOutAlt className="mr-2" />
                Выйти
              </button>
            </>
          ) : (
            <Link
              href="/admin-login"
              className="px-4 py-2 bg-blue-500 text-white rounded-lg hover:bg-blue-600 transition-all duration-300"
            >
              Войти
            </Link>
          )}
        </div>
      </div>
    </header>
  );
};

export default AdminHeader;
================
File: frontend\src\components\EditEventForm.tsx
// frontend/src/components/EditEventForm.tsx
"use client";

import { useState, useEffect } from "react";
import { useAdminAuth } from "@/contexts/AdminAuthContext";
import InputField from "./common/InputField";
import { FaPencilAlt } from "react-icons/fa";

interface EventData {
  id: number;
  title: string;
  description?: string;
  status: string;
  start_date: string;
  end_date?: string;
  location?: string;
  image_url?: string;
  price: number;
  published: boolean;
  ticket_type?: { name: string; price: number; available_quantity: number; free_registration: boolean };
}

const EditEventForm = () => {
  const { isAdminAuth, adminData } = useAdminAuth();
  const [events, setEvents] = useState<EventData[]>([]);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    if (!isAdminAuth || !adminData) return;

    const fetchEvents = async () => {
      setLoading(true);
      try {
        const token = localStorage.getItem("admin_token");
        const response = await fetch("/events", {
          headers: {
            Authorization: `Bearer ${token}`,
            "Cache-Control": "no-store",
          },
        });
        if (response.ok) {
          const data = await response.json();
          setEvents(data);
        } else {
          setError("Не удалось загрузить мероприятия");
        }
      } catch (err) {
        setError(`Произошла ошибка при загрузке мероприятий: ${err instanceof Error ? err.message : "Неизвестная ошибка"}`);
      } finally {
        setLoading(false);
      }
    };

    fetchEvents();
  }, [isAdminAuth, adminData]);

  const updateEvent = async (eventId: number, updatedData: Partial<EventData>) => {
    setLoading(true);
    setError(null);

    try {
      const token = localStorage.getItem("admin_token");
      const response = await fetch(`admin_edits/${eventId}`, {
        method: "PUT",
        headers: {
          "Content-Type": "application/json",
          Authorization: `Bearer ${token}`,
        },
        body: JSON.stringify(updatedData),
      });

      if (response.ok) {
        const updatedEvent = await response.json();
        setEvents((prev) =>
          prev.map((e) => (e.id === eventId ? updatedEvent : e))
        );
      } else {
        const errorData = await response.json();
        setError(errorData.detail || "Ошибка при обновлении мероприятия");
      }
    } catch (err) {
      setError(`Произошла ошибка при обновлении: ${err instanceof Error ? err.message : "Неизвестная ошибка"}`);
    } finally {
      setLoading(false);
    }
  };

  if (!isAdminAuth || !adminData) {
    return <p className="text-red-500">Доступ только для администраторов</p>;
  }

  return (
    <div>
      {loading && <p>Загрузка...</p>}
      {error && (
        <div className="text-red-500 bg-red-50 p-2 rounded-lg mb-4">{error}</div>
      )}
      <h1 className="text-2xl font-bold mb-4">Редактирование мероприятий</h1>
      {events.length === 0 ? (
        <p>Нет мероприятий для редактирования</p>
      ) : (
        events.map((event) => (
          <div key={event.id} className="card p-4 mb-4">
            <InputField
              type="text"
              value={event.title}
              onChange={(e) => updateEvent(event.id, { title: e.target.value })}
              placeholder="Название мероприятия"
              icon={FaPencilAlt}
              name="title"
            />
            <select
              value={event.status}
              onChange={(e) => updateEvent(event.id, { status: e.target.value })}
              className="form-input mt-2"
            >
              <option value="draft">Черновик</option>
              <option value="registration_open">Регистрация открыта</option>
              <option value="registration_closed">Регистрация закрыта</option>
              <option value="completed">Завершено</option>
            </select>
          </div>
        ))
      )}
    </div>
  );
};

export default EditEventForm;
================
File: frontend\src\components\EventRegistration.tsx
// frontend/src/components/EventRegistration.tsx
"use client";

import React, { useState } from "react";
import { useAuth } from "@/contexts/AuthContext";

interface EventRegistrationProps {
  eventId: number;
}

const EventRegistration: React.FC<EventRegistrationProps> = ({ eventId }) => {
  const { userData, isAuth } = useAuth();
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [success, setSuccess] = useState(false);

  const handleRegister = async () => {
    if (!isAuth || !userData) {
      setError("Пожалуйста, авторизуйтесь для регистрации на мероприятие.");
      return;
    }

    setLoading(true);
    setError(null);
    setSuccess(false);

    try {
      const token = localStorage.getItem("token");
      const response = await fetch("/register", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          Authorization: `Bearer ${token}`,
        },
        body: JSON.stringify({
          event_id: eventId,
          user_id: userData.id,
        }),
      });

      if (response.ok) {
        setSuccess(true);
      } else {
        const errorData = await response.json();
        setError(errorData.detail || "Ошибка при регистрации.");
      }
    } catch (err) {
      setError("Произошла ошибка при регистрации. Попробуйте позже.");
      console.error(err);
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="mt-4">
      {error && (
        <div className="text-red-500 bg-red-50 p-2 rounded-lg mb-4">{error}</div>
      )}
      {success ? (
        <div className="text-green-600 bg-green-50 p-2 rounded-lg">
          Вы успешно зарегистрированы на мероприятие!
        </div>
      ) : (
        <button
          onClick={handleRegister}
          disabled={loading}
          className={`btn btn-primary ${loading ? "opacity-50 cursor-not-allowed" : ""}`}
        >
          {loading ? "Регистрация..." : "Зарегистрироваться"}
        </button>
      )}
    </div>
  );
};

export default EventRegistration;
================
File: frontend\src\components\Events.tsx
"use client"

import React, { useState } from 'react';
import Image from 'next/image';

// Моковые данные для событий
const eventCategories = ["Все", "Концерты", "Выставки", "Мастер-классы", "Фестивали"];

const eventsList = [
  {
    id: 1,
    title: "Джазовый вечер в центре города",
    category: "Концерты",
    date: "15 Мая, 2025",
    time: "19:00",
    location: "Джаз-клуб 'Мелодия'",
    price: "1200 ₽",
    image: "https://images.unsplash.com/photo-1511735111819-9a3f7709049c?ixlib=rb-4.0.3&auto=format&fit=crop&w=600&q=80"
  },
  {
    id: 2,
    title: "Выставка современного искусства",
    category: "Выставки",
    date: "20 Мая, 2025",
    time: "10:00 - 20:00",
    location: "Галерея 'Арт-Москва'",
    price: "800 ₽",
    image: "https://images.unsplash.com/photo-1594122230689-45899d9e6f69?ixlib=rb-4.0.3&auto=format&fit=crop&w=600&q=80"
  },
  {
    id: 3,
    title: "Кулинарный мастер-класс: итальянская кухня",
    category: "Мастер-классы",
    date: "22 Мая, 2025",
    time: "14:00",
    location: "Кулинарная студия 'Гурман'",
    price: "3500 ₽",
    image: "https://images.unsplash.com/photo-1577219491135-ce391730fb2c?ixlib=rb-4.0.3&auto=format&fit=crop&w=600&q=80"
  },
  {
    id: 4,
    title: "Фестиваль уличной еды",
    category: "Фестивали",
    date: "28-30 Мая, 2025",
    time: "12:00 - 22:00",
    location: "Парк Горького",
    price: "Вход свободный",
    image: "https://images.unsplash.com/photo-1504674900247-0877df9cc836?ixlib=rb-4.0.3&auto=format&fit=crop&w=600&q=80"
  },
];

const Events = () => {
  const [activeCategory, setActiveCategory] = useState("Все");
  const [isHovered, setIsHovered] = useState<number | null>(null);

  const filteredEvents = activeCategory === "Все" 
    ? eventsList 
    : eventsList.filter(event => event.category === activeCategory);

  return (
    <section className="py-20 bg-white">
      <div className="container mx-auto px-4 md:px-6">
        <div className="text-center mb-10">
          <h2 className="text-3xl font-bold mb-3">Предстоящие <span className="text-blue-600">мероприятия</span></h2>
          <p className="text-gray-600 max-w-2xl mx-auto">
            Откройте для себя разнообразные мероприятия, которые помогут вам насладиться городской жизнью и расширить круг общения.
          </p>
        </div>
        
        {/* Категории событий */}
        <div className="flex flex-wrap justify-center gap-2 mb-10">
          {eventCategories.map((category) => (
            <button
              key={category}
              onClick={() => setActiveCategory(category)}
              className={`px-4 py-2 rounded-full transition-all duration-300 text-sm font-medium ${
                activeCategory === category
                  ? "bg-blue-600 text-white shadow-md"
                  : "bg-gray-100 text-gray-700 hover:bg-gray-200"
              }`}
            >
              {category}
            </button>
          ))}
        </div>
        
        {/* Список событий */}
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
          {filteredEvents.map((event) => (
            <div 
              key={event.id}
              className="bg-white rounded-xl overflow-hidden shadow-md hover:shadow-xl transition-all duration-500 transform hover:-translate-y-1"
              onMouseEnter={() => setIsHovered(event.id)}
              onMouseLeave={() => setIsHovered(null)}
            >
              <div className="relative overflow-hidden h-48">
                <div className="relative w-full h-full">
                  <Image 
                    src={event.image} 
                    alt={event.title}
                    fill
                    sizes="(max-width: 768px) 100vw, (max-width: 1200px) 50vw, 25vw"
                    className={`object-cover transition-transform duration-700 ease-in-out ${
                      isHovered === event.id ? "scale-110" : "scale-100"
                    }`}
                  />
                </div>
                <div className="absolute top-0 right-0 bg-blue-600 text-white text-xs font-bold px-3 py-1 m-2 rounded-full z-10">
                  {event.category}
                </div>
              </div>
              <div className="p-5">
                <div className="flex items-center mb-2 text-sm text-gray-500">
                  <svg className="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z" />
                  </svg>
                  {event.date} • {event.time}
                </div>
                <h3 className="text-lg font-bold mb-2 line-clamp-2">{event.title}</h3>
                <div className="flex items-center mb-3 text-sm text-gray-500">
                  <svg className="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z" />
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M15 11a3 3 0 11-6 0 3 3 0 016 0z" />
                  </svg>
                  {event.location}
                </div>
                <div className="flex justify-between items-center">
                  <div className="font-bold">{event.price}</div>
                  <button className="inline-flex items-center text-sm font-medium text-blue-600 hover:text-blue-800 transition-colors duration-300">
                    Подробнее
                    <svg className="w-4 h-4 ml-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M14 5l7 7m0 0l-7 7m7-7H3" />
                    </svg>
                  </button>
                </div>
              </div>
            </div>
          ))}
        </div>
        
        {/* Кнопка "Показать больше" */}
        <div className="text-center mt-12">
          <button className="inline-flex items-center px-6 py-3 bg-white border border-blue-600 text-blue-600 font-medium rounded-lg hover:bg-blue-50 transition-colors duration-300">
            Все мероприятия
            <svg className="w-5 h-5 ml-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M17 8l4 4m0 0l-4 4m4-4H3" />
            </svg>
          </button>
        </div>
      </div>
    </section>
  );
};

export default Events;
================
File: frontend\src\components\Footer.tsx
"use client";

import React from 'react';
import Link from 'next/link';

const Footer = () => {
  return (
    <footer className="bg-white pt-12 pb-8 border-t border-gray-100 shadow-inner">
      <div className="container mx-auto px-4 md:px-6">
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8 mb-8 justify-content-center">

          {/* Первая колонка - Быстрые ссылки */}
          <div className="flex flex-col items-center">
            <h3 className="text-lg font-bold mb-4">Быстрые ссылки</h3>
            <ul className="space-y-2">
              <li>
                <Link href="/" className="text-gray-600 hover:text-orange-500 transition-colors duration-300">
                  Главная
                </Link>
              </li>
              <li>
                <Link href="/events" className="text-gray-600 hover:text-orange-500 transition-colors duration-300">
                  Мероприятия
                </Link>
              </li>
              <li>
                <Link href="/media" className="text-gray-600 hover:text-orange-500 transition-colors duration-300">
                  Медиа
                </Link>
              </li>
              <li>
                <Link href="/partner" className="text-gray-600 hover:text-orange-500 transition-colors duration-300">
                  Стать партнером
                </Link>
              </li>
            </ul>
          </div>

          {/* Вторпя колонка - О нас */}
          <div className="flex flex-col items-center">
            <h3 className="text-lg font-bold mb-4">Moscow Mellows</h3>
            <p className="text-gray-600 mb-4 text-center">
              Vrindavan в центре Москвы.<br/>Присоединяйтесь к нам!
            </p>
            <div className="flex space-x-4">
              <a 
                href="https://instagram.com" 
                target="_blank" 
                rel="noopener noreferrer"
                className="text-gray-500 hover:text-pink-600 transition-colors duration-300"
                aria-label="Instagram"
              >
                <svg className="w-6 h-6" fill="currentColor" viewBox="0 0 24 24">
                  <path d="M12 2.163c3.204 0 3.584.012 4.85.07 3.252.148 4.771 1.691 4.919 4.919.058 1.265.069 1.645.069 4.849 0 3.205-.012 3.584-.069 4.849-.149 3.225-1.664 4.771-4.919 4.919-1.266.058-1.644.07-4.85.07-3.204 0-3.584-.012-4.849-.07-3.26-.149-4.771-1.699-4.919-4.92-.058-1.265-.07-1.644-.07-4.849 0-3.204.013-3.583.07-4.849.149-3.227 1.664-4.771 4.919-4.919 1.266-.057 1.645-.069 4.849-.069zM12 0C8.741 0 8.333.014 7.053.072 2.695.272.273 2.69.073 7.052.014 8.333 0 8.741 0 12c0 3.259.014 3.668.072 4.948.2 4.358 2.618 6.78 6.98 6.98C8.333 23.986 8.741 24 12 24c3.259 0 3.668-.014 4.948-.072 4.354-.2 6.782-2.618 6.979-6.98.059-1.28.073-1.689.073-4.948 0-3.259-.014-3.667-.072-4.947-.196-4.354-2.617-6.78-6.979-6.98C15.668.014 15.259 0 12 0zm0 5.838a6.162 6.162 0 100 12.324 6.162 6.162 0 000-12.324zM12 16a4 4 0 110-8 4 4 0 010 8zm6.406-11.845a1.44 1.44 0 100 2.881 1.44 1.44 0 000-2.881z"/>
                </svg>
              </a>
              <a 
                href="https://t.me" 
                target="_blank" 
                rel="noopener noreferrer"
                className="text-gray-500 hover:text-blue-500 transition-colors duration-300"
                aria-label="Telegram"
              >
                <svg className="w-6 h-6" fill="currentColor" viewBox="0 0 24 24">
                  <path d="M11.944 0A12 12 0 0 0 0 12a12 12 0 0 0 12 12 12 12 0 0 0 12-12A12 12 0 0 0 12 0a12 12 0 0 0-.056 0zm4.962 7.224c.1-.002.321.023.465.14a.506.506 0 0 1 .171.325c.016.093.036.306.02.472-.18 1.898-.96 6.502-1.36 8.627-.168.9-.499 1.201-.82 1.23-.696.065-1.225-.46-1.9-.902-1.056-.693-1.653-1.124-2.678-1.8-1.185-.78-.417-1.21.258-1.91.177-.184 3.247-2.977 3.307-3.23.007-.032.014-.15-.056-.212s-.174-.041-.249-.024c-.106.024-1.793 1.14-5.061 3.345-.48.33-.913.49-1.302.48-.428-.008-1.252-.241-1.865-.44-.752-.245-1.349-.374-1.297-.789.027-.216.325-.437.893-.663 3.498-1.524 5.83-2.529 6.998-3.014 3.332-1.386 4.025-1.627 4.476-1.635z"/>
                </svg>
              </a>
            </div>
          </div>
          
          {/* Третья колонка - Действия */}
          <div className="flex flex-col items-center">
            <h3 className="text-lg font-bold mb-4">Действия</h3>
            <div className="space-y-3">
              <Link 
                href="/registration" 
                className="block w-full px-4 py-2 text-center bg-orange-500 text-white font-medium rounded-lg hover:bg-orange-600 transition-colors duration-300"
              >
                Регистрация на мероприятие
              </Link>
              <Link 
                href="/events" 
                className="block w-full px-4 py-2 text-center bg-white border border-orange-500 text-orange-500 font-medium rounded-lg hover:bg-orange-50 transition-colors duration-300"
              >
                Наши мероприятия
              </Link>
            </div>
          </div>
        </div>
        
        {/* Нижняя часть футера с копирайтом */}
        <div className="pt-6 border-t border-gray-100">
          <div className="flex flex-col md:flex-row justify-between items-center">
            <p className="text-gray-600 text-sm mb-4 md:mb-0">
              © Moscow Mellows {new Date().getFullYear()}. Все права защищены.
            </p>
            <div className="flex space-x-4">
              <Link href="/privacy" className="text-sm text-gray-500 hover:text-orange-500 transition-colors duration-300">
                Политика конфиденциальности
              </Link>
              <Link href="/terms" className="text-sm text-gray-500 hover:text-orange-500 transition-colors duration-300">
                Условия использования
              </Link>
            </div>
          </div>
        </div>
      </div>
    </footer>
  );
};

export default Footer;
================
File: frontend\src\components\Header.tsx
// frontend/src/components/Header.tsx
"use client";

import React, { useState, useEffect, useRef } from "react";
import Link from "next/link";
import { useRouter } from "next/navigation";
import { motion, AnimatePresence } from "framer-motion";
import Logo from "./Logo";
import Registration from "./Registration";
import Login from "./Login";
import { useAuth } from "@/contexts/AuthContext";

interface NavItem {
  href?: string;
  label: string;
  onClick?: () => void;
}

const Header: React.FC = () => {
  const { isAuth, logout } = useAuth();
  const [isScrolled, setIsScrolled] = useState(false);
  const [isMobileMenuOpen, setIsMobileMenuOpen] = useState(false);
  const [isRegistrationOpen, setIsRegistrationOpen] = useState(false);
  const [isLoginOpen, setIsLoginOpen] = useState(false);
  const [isNotificationsOpen, setIsNotificationsOpen] = useState(false);
  const notificationRef = useRef<HTMLDivElement>(null);
  const notificationButtonRef = useRef<HTMLButtonElement>(null);
  const notificationTimeoutRef = useRef<NodeJS.Timeout | null>(null);
  
  const router = useRouter();

  useEffect(() => {
    const handleScroll = () => setIsScrolled(window.scrollY > 20);
    window.addEventListener("scroll", handleScroll);
    return () => window.removeEventListener("scroll", handleScroll);
  }, []);

  useEffect(() => {
    const handleClickOutside = (event: MouseEvent) => {
      if (
        isNotificationsOpen &&
        notificationRef.current &&
        notificationButtonRef.current &&
        !notificationRef.current.contains(event.target as Node) &&
        !notificationButtonRef.current.contains(event.target as Node)
      ) {
        setIsNotificationsOpen(false);
      }
    };

    document.addEventListener("mousedown", handleClickOutside);
    return () => document.removeEventListener("mousedown", handleClickOutside);
  }, [isNotificationsOpen]);

  const startNotificationCloseTimer = () => {
    if (notificationTimeoutRef.current) clearTimeout(notificationTimeoutRef.current);
    notificationTimeoutRef.current = setTimeout(() => setIsNotificationsOpen(false), 1000);
  };

  const stopNotificationCloseTimer = () => {
    if (notificationTimeoutRef.current) {
      clearTimeout(notificationTimeoutRef.current);
      notificationTimeoutRef.current = null;
    }
  };

  const handleLogout = () => {
    logout();
    setIsNotificationsOpen(false); // Закрываем уведомления
    setIsMobileMenuOpen(false); // Закрываем мобильное меню
    router.push("/");
  };

  const toggleMobileMenu = () => setIsMobileMenuOpen((prev) => !prev);
  const toggleNotifications = () => setIsNotificationsOpen((prev) => !prev);

  const guestNavItems: NavItem[] = [
    { label: "Регистрация", onClick: () => setIsRegistrationOpen(true) },
    { label: "Войти", onClick: () => setIsLoginOpen(true) },
  ];

  const authNavItemsMobile: NavItem[] = [
    { href: "/profile", label: "Профиль" },
    { href: "/notifications", label: "Уведомления" },
    { href: "/partner", label: "Стать партнером" },
    { label: "Выход", onClick: handleLogout },
  ];

  const menuVariants = {
    closed: { opacity: 0, y: -20 },
    open: { opacity: 1, y: 0 },
  };

  const notificationVariants = {
    hidden: { opacity: 0, y: -10 },
    visible: { opacity: 1, y: 0 },
  };

  useEffect(() => {
    const handleAuthChange = () => {
      setIsLoginOpen(false);
      setIsRegistrationOpen(false);
    };
    
    window.addEventListener("auth-change", handleAuthChange);
    return () => window.removeEventListener("auth-change", handleAuthChange);
  }, []);

  return (
    <header
      className={`fixed top-0 left-0 right-0 z-30 transition-all duration-300 ${
        isScrolled ? "bg-white/95 backdrop-blur-sm shadow-lg py-3" : "bg-white/90 py-4"
      }`}
    >
      <div className="container mx-auto px-4 md:px-6 flex items-center justify-between">
        <Link href="/" className="transition-transform duration-300 hover:scale-105">
          <Logo />
        </Link>

        {/* Мобильное меню */}
        <div className="flex items-center md:hidden">
          {isAuth && (
            <Link href="/profile" className="mr-4 text-orange-500 hover:text-orange-600">
              <div className="w-8 h-8 bg-orange-100 rounded-full flex items-center justify-center">
                <svg className="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                  <path fillRule="evenodd" d="M10 9a3 3 0 100-6 3 3 0 000 6zm-7 9a7 7 0 1114 0H3z" clipRule="evenodd" />
                </svg>
              </div>
            </Link>
          )}
          <button onClick={toggleMobileMenu} className="text-gray-700 hover:text-orange-500">
            <svg className="h-6 w-6" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2">
              {isMobileMenuOpen ? <path d="M18 6L6 18M6 6l12 12" /> : <path d="M3 12h18M3 6h18M3 18h18" />}
            </svg>
          </button>
          <AnimatePresence>
            {isMobileMenuOpen && (
              <motion.div
                className="fixed inset-0 bg-white z-50 flex flex-col items-center justify-center"
                initial={{ opacity: 0 }}
                animate={{ opacity: 1 }}
                exit={{ opacity: 0 }}
              >
                <button 
                  onClick={toggleMobileMenu}
                  className="absolute top-4 right-4 text-gray-500 hover:text-orange-500"
                >
                  <svg className="h-8 w-8" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2">
                    <path d="M18 6L6 18M6 6l12 12" />
                  </svg>
                </button>
                <motion.ul
                  className="flex flex-col items-center space-y-6 text-xl"
                  variants={menuVariants}
                  initial="closed"
                  animate="open"
                  exit="closed"
                >
                  {(isAuth ? authNavItemsMobile : guestNavItems).map((item, index) => (
                    <motion.li key={index} whileHover={{ scale: 1.05 }} whileTap={{ scale: 0.95 }}>
                      {item.onClick ? (
                        <button onClick={item.onClick} className="text-gray-800 hover:text-orange-500">
                          {item.label}
                        </button>
                      ) : (
                        <Link 
                          href={item.href || "#"} 
                          className="text-gray-800 hover:text-orange-500"
                          onClick={() => setIsMobileMenuOpen(false)}
                        >
                          {item.label}
                        </Link>
                      )}
                    </motion.li>
                  ))}
                </motion.ul>
              </motion.div>
            )}
          </AnimatePresence>
        </div>

        {/* Десктопная навигация */}
        <div className="hidden md:flex items-center space-x-4">
          {isAuth ? (
            <>
              <Link href="/partner" className="text-orange-500 hover:text-orange-600 px-4 py-2 rounded-lg hover:bg-orange-50">
                Стать партнером
              </Link>
              <div className="relative">
                <button 
================
